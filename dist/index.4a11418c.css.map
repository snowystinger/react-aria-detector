{"mappings":"AEyFwB,WAAA,sBAAA,uBACI,mCACoB,yBAAA,sBAuIrB,iBCxLR,4BAmEE,uBAAA,yDAAA,uDAAA,4CAAA,+CAAA,kGAAA,yBAAA,uBAgID,wBAAA,yCAAA,gCAAA,yCAAA,uCAAA,8BAAA,uCCpMgB,yDCWX,0BAAA,mBAAA,sBAAA,qBAAA,qBAAA,mBAAA,qDAAA,mDAAA,uBAAA,0BAAA,yBAAA,yBAAA,uBCuDO,gBAAA,mECzBkB,6CAAA,wDAAA,iBAAA,oBAAA,iBAAA,mBCnBrC,6FAAA,6FCIE,yBAAA,sEAAA,eAAA,yBAAA,yBAAA,yBAAA,eAAA,yBAAA,yBAAA,yBAAA,gEAAA,8DAAA,8DAAA,4DAAA,mDAAA,iDAAA,4CAAA,gCAAA,gCAAA,gCAAA,+BAAA,gCAAA,gCAAA,gCAAA,gCAAA,4FAAA,4FAAA,4FAAA,4FAAA,oCAAA,oCAAA,sBAAA,sBAAA,sBAuSQ,kBAAA,mBAAA,0CAeD,wBAAA,0BAAA,yBAAA,2BAkDF,2CAAA,kBAKsC,kBACtC,gDC1YJ,eAAA,gBAWF,6EAAA,0BAAA,0BAWD,6EAAA,0BAAA,0BAAA,2BCAO,yBAAA,mBAAA,qBAAA,wBAAA,qBCnBN,uBAAA,uBAME,wBAUC,yBAsBG,8BAAA,mBAwEO,8CAAA,4CAAA,4CAAA,0CAyDJ,sBAAA,6BAAA,2BAAA,6BAAA,sBAiBE,qBAAA,uBAAA,uBAAA,kBAAA,uBAqC8E,yBAiBhF,8BAAA,4BAAA,wBAAA,qBAAA,mBAAA,sBAAA,oBChPR,uBAAA,uBAAA,iBAAA,kBAAA,mCAAA,oCAAA,6FAAA,6FAAA,0FAAA,0CAAA,0CAAA,0CAAA,0CAAA,0CAAA,0CCsEO,uFAKJ,gCAAA,qCAAA,mBAAA,mBAAA,8BAAA,iCAAA,mCC/DS,mCAAA,yDAAA,mBAAA,oCA4CO,2BAAA,oCAAA,kCAAA,kCAAA,gCAAA,kCAAA,mCAAA,yBAAA,0BAAA,mCAAA,qCAAA,mCAAA,mCAAA,wDAAA,gCAAA,4BAAA,8BAAA,wBCzBlC,gEAAA,mCAAA,sEAEqB,6FAAA,mGAAA,mICaP,sFAAA,gFAAA,mCAAA,yDAAA,2EAAA,0EAAA,kGAAA,mDAAA,uCAAA,qCAAA,qCAAA,mCAAA,yGAAA,gGAAA,qBAAA,kCAAA,mFAAA,sBAAA,sBAAA,sBAAA,wEAAA,yEAAA,yEAAA,wEAAA,6CAAA,4CAAA,8CAAA,8CAAA,kCAAA,sDAAA,gCAAA,iCAAA,kDAAA,2CAAA,0BA2FF,uCAAA,oBAAA,wBAAA,wBAAA,0EAAA,yEAAA,qBAAA,6ECvDE,gDAAA,iBAAA,oFAAA,uBAAA,qBAAA,4BAAA,uCAuT+B,aAAA,yBAAA,uBAGxB,0BA0FQ,gBAOZ,4BAAA,2BAAA,8BA2CkB,8BAAA,6CAAA,2CAAA,2CAAA,yCAAA,2BAAA,yBAwBJ,kBAAA,iBAAA,oCAAA,kBAAA,sBAAA,sBAAA,uBAAA,oGA0BT,uFAAA,6FAAA,kBAAA,yBAAA,wBAAA,qCAyBG,qBAAA,uBAAA,oBASL,sBAAA,kCAAA,+BAWL,sBAAA,UAAA,uCAAA,2BAAA,4BAAA,wCAAA,iCA6F6C,mBAwBxC,0BAQM,6BAIM,yBAAA,oFAwFnB,uCAAA,oCAAA,gCAAA,sBAAA,sBAmCa,0BAAA,8BAAA,4BAAA,0BAAA,mCAUN,wBAAA,wBAAA,4BAAA,wBAAA,wBAAA,sBAAA,uBAAA,oBAAA,eAAA,wBAAA,uBAAA,kBAAA,0BAAA,qBAAA,gCAAA,2BAAA,8BAAA,yBAAA,uBAAA,0BAAA,gCAAA,8BA0FR,gBAAA,sDAAA,gGAAA,gDAAA,yGAAA,4GAAA,4GAAA,6GAAA,wGAAA,uBAAA,4BAAA,gCAAA,8BAAA,mFAoEoC,gNCthChC,yBAAA,sBAAA,+FAAA,oCAAA,8CAoBG,eAAA,kBAAA,oBAAA,kBAAA,gBAAA,mBAAA,qBAAA,mBAAA,yCAAA,uCAAA,uCAAA,qCAAA,uBAAA,4BAAA,yBAAA,4BAAA,kCAAA,gCAAA,uBAAA,8BAAA,iFAAA,uFAAA,uFAAA,uFAAA,uFAAA,uFAAA,oFAAA,mFAAA,mFAAA,mFAAA,mFAAA,mFAAA,gFAAA,uBA6CO,uFCvBR,4FAAA,wFAAA,4FAAA,2FAAA,8BAAA,oBAAA,sBAAA,sBAAA,sBAAA,yBAAA,+BAAA,6BAoBG,wBAYM,8EAAA,iFAeL,wBAAA,yBAAA,oFAAA,uBAAA,4BAAA,4BAAA,yCAAA,uCAAA,uCAAA,qCAAA,4FAAA,8CAAA,2BAAA,sBAAA,8BAAA,8BAAA,4GAAA,2CAAA,0DAAA,0BAAA,8BAAA,0BAAA,qBAAA,qBAAA,uBAAA,0BAAA,yBAAA,yBAAA,uBAmDC,wBAAA,yBAAA,4EAAA,4EAkBR,wCAAA,sCAAA,qCAAA,mCAAA,gCAKG,mBAAA,2BAAA,4BAYa,kBAAA,8BAKnB,mCAAA,iCAAA,gCAAA,gCAAA,gCAAA,gCAAA,uBAAA,sCAAA,oCAAA,oCAAA,kCAAA,eAAA,iBAAA,kBAAA,eAAA,gBAAA,kBAAA,mBAAA,gBAAA,oBAAA,yBAoBO,oCAAA,kCAAA,iCAAA,+BAAA,wBAAA,mFAAA,yBAAA,0CASM,2CAAA,yCAAA,wCAAA,sCAAA,wBAAA,sBAAA,2UAAA,4EAAA,kMAAA,oCAAA,yDAqBb,oCAAA,kCAAA,iCAAA,+BAKG,wCAAA,sCAAA,qCAAA,mCAAA,mFAAA,4EAAA,yEAgBE,0CAAA,wCAAA,uCAAA,qCAAA,8BAAA,wCA8FL,kBAAA,8BAAA,8BAAA,8BAAA,iCAkGmB,kBC5bR,wBAAA,uFAAA,uFAAA,mCAAA,oCAAA,oCAAA,oCAAA,sBAAA,sCAAA,oCAAA,oCAAA,kCAAA,oBAAA,qBAAA,qBAAA,qBAAA,oBAAA,oBAAA,oBCHP,0BAAA,sBAAA,uBAAA,0BAAA,gCAAA,8BA8DuC,iCAAA,+BAAA,+BAAA,6BAQf,oBAAA,mFAAA,qBAAA,4EAAA,iBAAA,8BAAA,0BAAA,wBAQD,qFAAA,uBAAA,mFAAA,qBAAA,4EAAA,qBpB9Bf,WAEwB,YAAA,yEAAA,aAAA,iJAAA,aAAA,mFA0BQ,YAAA,yEAAA,aAAA,iJAAA,aAAA,mFA6BO,YAAA,yEAAA,aAAA,iJAAA,aAAA,mFAqBA,YAAA,yEAAA,aAAA,iJAAA,aAAA,mFC7H5C,8CAAA,4CEUM,+DAAA,6DAAA,mEIeV,gFAAA,2EAAA,8EAAA,6EAAA,6EAAA,2EAAA,mFAAA,iFAAA,4EAAA,uFG+JU,+BAAA,kCAsDF,gCQlJD,0EAAA,2DAgQV,oCEvR4B,2JAAA,6FAQD,kFAAA,8FpB9Bf,wBIXI,kRAAA,8BJaoB,WAAA,YAAA,yEA0BQ,YAAA,yEA6BO,YAAA,yEAqBA,YAAA,yEC1D1C,mFDlB2B,WAAA,YAAA,gMA0BQ,YAAA,gMA6BO,YAAA,gMAqBA,YAAA,gMC1D1C,0MDlB2B,WAAA,YAAA,uGA0BQ,YAAA,uGA6BO,YAAA,uGAqBA,YAAA,uGC1D1C,iHDlB2B,WAAA,YAAA,6GA0BQ,YAAA,6GA6BO,YAAA,6GAqBA,YAAA,6GC1D1C,uHDlB2B,WAAA,aAAA,2JA0BQ,aAAA,2JA6BO,aAAA,2JAqBA,aAAA,2JC1D1C,sKDlB2B,WAAA,YAAA,kJA0BQ,YAAA,kJA6BO,YAAA,kJAqBA,YAAA,kJC1D1C,4JDlB2B,aAAA,8CAuIrB,kBCxLR,+BAmEE,yBAAA,4BAAA,wBAgID,4CAAA,2CAAA,0CAAA,yCEzLK,sBAAA,yBAAA,wBAAA,wBAAA,uBAAA,0BAAA,6BAAA,4BAAA,4BAAA,2BIeV,0BAsTO,6BAAA,6BAAA,8BAAA,8BClVN,gBAAA,iBESA,0BCRD,oBAAA,qBKkFD,kBAoZe,iBAkDM,iDAAA,+CAAA,+CAAA,6CAwBJ,oBAAA,wCA0BT,6BAAA,4BAAA,yCAkCF,mCAWL,2CA6F6C,qBC3rBzC,mBAAA,sBAAA,uBAAA,qBAAA,oBAAA,uBAAA,wBAAA,sBCsBD,qBA+CI,0BAAA,6BAAA,4BAAA,4BAAA,2BA0EJ,iCAiBN,kBAAA,oBAAA,qBAAA,mBAAA,mBAAA,qBAAA,sBAAA,oBAoBO,yBASM,yBAAA,yBAwIb,iCAAA,oCEvR4B,0BAAA,iCAKA,4BnBPnB,aAAA,8BM1CN,2BAAA,8BAAA,iCAAA,sCAAA,sCCjBD,4BAWD,2BOoHD,8BCvDE,qCA8diB,kDAuEhB,yBA4PW,2BAoGd,qDAAA,sDC97BO,sCAAA,qCAAA,gCAAA,oCAAA,oCAAA,4BAAA,gCA6CO,+CCwBJ,kCAmDC,2CA+FR,yBC5OQ,0CZuBR,aAAA,8CAAA,8EAAA,iFAAA,gFAAA,gFAAA,iFCYW,uEAWE,8EEhCX,mBAAA,sBAAA,kCAwKQ,aAAA,sBAAA,yBAAA,2BK1LH,gDFAD,kGESI,6EASE,4EASC,4EASD,6EAqGf,+BMjLZ,gMAQA,mCACE,yDAMF,oGAMA,kGAMA,kHAIA,4GC/BA","sources":["index.4a11418c.css","3d760190918a103f","src/App.js","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Disclosure.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/CenterBaseline.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/ActionButton.tsx","node_modules/@react-spectrum/s2/icons/packages/@react-spectrum/s2/src/Skeleton.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Form.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/AlertDialog.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Button.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/ProgressCircle.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/ButtonGroup.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Dialog.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/CloseButton.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Image.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Modal.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Provider.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Popover.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/TableView.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Checkbox.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Menu.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/Divider.tsx","node_modules/@react-spectrum/s2/dist/packages/@react-spectrum/s2/src/ContextualHelp.tsx","node_modules/@react-spectrum/s2/page.css","src/index.css"],"sourcesContent":["@layer _.a {\n  .l-39na1t {\n    width: 400px;\n  }\n\n  .k-3b246b {\n    height: 600px;\n  }\n\n  ._2e {\n    justify-content: space-between;\n  }\n\n  .Bc {\n    margin-bottom: .25rem;\n  }\n\n  .Ac {\n    margin-top: .25rem;\n  }\n\n  .kW {\n    height: 16rem;\n  }\n\n  .q-ffvo8f {\n    min-width: 12.5rem;\n  }\n\n  ._dn {\n    font-size: 1.75rem;\n  }\n\n  .C-10cd9hn {\n    padding-inline-start: calc(var(--o) * 3 / 8 - 1px);\n  }\n\n  .D-10cd9hn {\n    padding-inline-end: calc(var(--o) * 3 / 8 - 1px);\n  }\n\n  .i-10cd9hn {\n    row-gap: calc(var(--o) * 3 / 8 - 1px);\n  }\n\n  .j-10cd9hn {\n    column-gap: calc(var(--o) * 3 / 8 - 1px);\n  }\n\n  .b-1tgz9bq {\n    background-color: var(--lightningcss-light, #00000017) var(--lightningcss-dark, #ffffff1c);\n  }\n\n  .-_375tou_o-z {\n    --o: 3.5rem;\n  }\n\n  .-_375tou_o-B {\n    --o: 4rem;\n  }\n\n  .Ff {\n    padding-bottom: 1rem;\n  }\n\n  .C-1ch0ogp {\n    padding-inline-start: .5625rem;\n  }\n\n  .Ce {\n    padding-inline-start: .75rem;\n  }\n\n  .C-1p15uv3 {\n    padding-inline-start: .9375rem;\n  }\n\n  .D-1ch0ogp {\n    padding-inline-end: .5625rem;\n  }\n\n  .De {\n    padding-inline-end: .75rem;\n  }\n\n  .D-1p15uv3 {\n    padding-inline-end: .9375rem;\n  }\n\n  .-_1b6ows1:before {\n    content: \"Â \";\n    visibility: hidden;\n    width: 0;\n  }\n\n  .k-375toq {\n    height: var(--k);\n  }\n\n  .qq {\n    min-width: 2rem;\n  }\n\n  .qk {\n    min-width: 1.25rem;\n  }\n\n  .qm {\n    min-width: 1.5rem;\n  }\n\n  .qr {\n    min-width: 2.5rem;\n  }\n\n  .qx {\n    min-width: 3rem;\n  }\n\n  .CI {\n    padding-inline-start: calc(var(--k, var(--o)) * 3 / 8);\n  }\n\n  .DI {\n    padding-inline-end: calc(var(--k, var(--o)) * 3 / 8);\n  }\n\n  .-_375toq_k-q {\n    --k: 2rem;\n  }\n\n  .-_375toq_k-k {\n    --k: 1.25rem;\n  }\n\n  .-_375toq_k-m {\n    --k: 1.5rem;\n  }\n\n  .-_375toq_k-r {\n    --k: 2.5rem;\n  }\n\n  .-_375toq_k-x {\n    --k: 3rem;\n  }\n\n  .aa {\n    color: #0000;\n  }\n\n  ._sb {\n    -webkit-box-decoration-break: clone;\n    box-decoration-break: clone;\n  }\n\n  .__h-nvqmqy {\n    grid-template-columns: [field] 1fr;\n  }\n\n  .__h-hgmn7f {\n    grid-template-columns: [label] auto[field] 1fr;\n  }\n\n  .if {\n    row-gap: 1rem;\n  }\n\n  .ig {\n    row-gap: 1.25rem;\n  }\n\n  .ij {\n    row-gap: 2rem;\n  }\n\n  .il {\n    row-gap: 2.5rem;\n  }\n\n  .-rwx0fg_e-e {\n    --iconPrimary: var(--lightningcss-light, #f03823) var(--lightningcss-dark, #cd2e1d);\n  }\n\n  .-rwx0fg_e-g {\n    --iconPrimary: var(--lightningcss-light, #e86a00) var(--lightningcss-dark, #e06400);\n  }\n\n  .jG {\n    column-gap: .428571em;\n  }\n\n  .ad {\n    color: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  }\n\n  .ab {\n    color: #000;\n  }\n\n  .a_____e {\n    color: #ffffffd9;\n  }\n\n  .a_____f {\n    color: #fffffff0;\n  }\n\n  .a_____a {\n    color: #ffffff36;\n  }\n\n  .ac {\n    color: #fff;\n  }\n\n  .a_____r {\n    color: #000000d6;\n  }\n\n  .a_____s {\n    color: #000000ed;\n  }\n\n  .a_____n {\n    color: #00000038;\n  }\n\n  ._vg {\n    border-start-start-radius: calc(var(--k, var(--o, 9999px)) / 2);\n  }\n\n  ._wg {\n    border-start-end-radius: calc(var(--k, var(--o, 9999px)) / 2);\n  }\n\n  ._xg {\n    border-end-start-radius: calc(var(--k, var(--o, 9999px)) / 2);\n  }\n\n  ._yg {\n    border-end-end-radius: calc(var(--k, var(--o, 9999px)) / 2);\n  }\n\n  .CJ {\n    padding-inline-start: calc(var(--k, var(--o)) / 2);\n  }\n\n  .DJ {\n    padding-inline-end: calc(var(--k, var(--o)) / 2);\n  }\n\n  .-oelgqu_A--177861o {\n    --iconMargin: -.142857em;\n  }\n\n  .c_____e {\n    border-color: #ffffffd9;\n  }\n\n  .c_____f {\n    border-color: #fffffff0;\n  }\n\n  .c_____a {\n    border-color: #ffffff36;\n  }\n\n  .c____9 {\n    border-color: #ffffff2b;\n  }\n\n  .c_____r {\n    border-color: #000000d6;\n  }\n\n  .c_____s {\n    border-color: #000000ed;\n  }\n\n  .c_____n {\n    border-color: #00000038;\n  }\n\n  .c_____m {\n    border-color: #00000026;\n  }\n\n  .b_____E {\n    background-color: var(--lightningcss-light, #3b63fb) var(--lightningcss-dark, #345bf8);\n  }\n\n  .b_____F {\n    background-color: var(--lightningcss-light, #274dea) var(--lightningcss-dark, #2549e5);\n  }\n\n  .b_____I {\n    background-color: var(--lightningcss-light, #d73220) var(--lightningcss-dark, #cd2e1d);\n  }\n\n  .b_____J {\n    background-color: var(--lightningcss-light, #b72818) var(--lightningcss-dark, #b12617);\n  }\n\n  .b_____f {\n    background-color: #fffffff0;\n  }\n\n  .b_____s {\n    background-color: #000000ed;\n  }\n\n  .-_375tp0_u-c {\n    --u: 2px;\n  }\n\n  .-_375tp1_v-a {\n    --v: 0px;\n  }\n\n  .-_375tp1_v-c {\n    --v: 2px;\n  }\n\n  .X-3760fj {\n    top: 50%;\n  }\n\n  .Y-3760fj {\n    left: 50%;\n  }\n\n  .T-1tktoou {\n    transform: translate(-50%, -50%);\n  }\n\n  .l-9w1ydn {\n    width: .875rem;\n  }\n\n  .l-1ytbuww {\n    width: 1.125rem;\n  }\n\n  .k-9w1ydn {\n    height: .875rem;\n  }\n\n  .k-1ytbuww {\n    height: 1.125rem;\n  }\n\n  .E-1gogtue {\n    padding-top: var(--labelPadding);\n  }\n\n  .__A-3t1y {\n    order: 1;\n  }\n\n  .__A-3t1x {\n    order: 0;\n  }\n\n  .y-oelgqu {\n    margin-inline-start: var(--iconMargin);\n  }\n\n  .lB {\n    width: 4rem;\n  }\n\n  .kB {\n    height: 4rem;\n  }\n\n  .fk {\n    stroke: var(--lightningcss-light, #dadada) var(--lightningcss-dark, #393939);\n  }\n\n  .f_____b {\n    stroke: #ffffff2b;\n  }\n\n  .f_____o {\n    stroke: #00000026;\n  }\n\n  .fA {\n    stroke: var(--lightningcss-light, #3b63fb) var(--lightningcss-dark, #5681ff);\n  }\n\n  .f_____h {\n    stroke: #fffffff0;\n  }\n\n  .f_____u {\n    stroke: #000000ed;\n  }\n\n  .__Ga {\n    transform-origin: center;\n  }\n\n  ._Ze {\n    display: inline-flex;\n  }\n\n  .ie {\n    row-gap: .75rem;\n  }\n\n  .jd {\n    column-gap: .5rem;\n  }\n\n  ._6a {\n    flex-direction: row;\n  }\n\n  ._1b {\n    align-items: end;\n  }\n\n  .k-37m3s2 {\n    height: 140px;\n  }\n\n  .__Nb {\n    object-fit: cover;\n  }\n\n  ._dj {\n    font-size: 1.375rem;\n  }\n\n  .__wd {\n    overflow-y: visible;\n  }\n\n  .y_d {\n    margin-inline-start: auto;\n  }\n\n  .r4 {\n    max-width: 100%;\n  }\n\n  ._v-17zqamw {\n    border-start-start-radius: inherit;\n  }\n\n  ._w-17zqamw {\n    border-start-end-radius: inherit;\n  }\n\n  ._x-17zqamw {\n    border-end-start-radius: inherit;\n  }\n\n  ._y-17zqamw {\n    border-end-end-radius: inherit;\n  }\n\n  .je {\n    column-gap: .75rem;\n  }\n\n  .yj {\n    margin-inline-start: 2rem;\n  }\n\n  .zj {\n    margin-inline-end: 2rem;\n  }\n\n  .ze {\n    margin-inline-end: .75rem;\n  }\n\n  .Ae {\n    margin-top: .75rem;\n  }\n\n  ._9-3t1y {\n    flex-grow: 1;\n  }\n\n  .Ag {\n    margin-top: 1.25rem;\n  }\n\n  .Bf {\n    margin-bottom: 1rem;\n  }\n\n  .id {\n    row-gap: .5rem;\n  }\n\n  ._1a {\n    align-items: start;\n  }\n\n  .Be {\n    margin-bottom: .75rem;\n  }\n\n  .Cj {\n    padding-inline-start: 2rem;\n  }\n\n  .Dj {\n    padding-inline-end: 2rem;\n  }\n\n  .Fj {\n    padding-bottom: 2rem;\n  }\n\n  .Ej {\n    padding-top: 2rem;\n  }\n\n  .ih {\n    row-gap: 1.5rem;\n  }\n\n  .jh {\n    column-gap: 1.5rem;\n  }\n\n  ._7a {\n    flex-wrap: wrap;\n  }\n\n  .dc {\n    outline-color: #fff;\n  }\n\n  .db {\n    outline-color: #000;\n  }\n\n  .lm {\n    width: 1.5rem;\n  }\n\n  .km {\n    height: 1.5rem;\n  }\n\n  .b____7 {\n    background-color: #ffffff1c;\n  }\n\n  .b_____k {\n    background-color: #00000017;\n  }\n\n  .-rwx0fg_a-n {\n    --iconPrimary: var(--lightningcss-light, #292929) var(--lightningcss-dark, #dbdbdb);\n  }\n\n  .-rwx0fg_a-o {\n    --iconPrimary: var(--lightningcss-light, #131313) var(--lightningcss-dark, #f2f2f2);\n  }\n\n  .-rwx0fg_a-j {\n    --iconPrimary: var(--lightningcss-light, #c6c6c6) var(--lightningcss-dark, #444);\n  }\n\n  .-rwx0fg_a-_____e {\n    --iconPrimary: #ffffffd9;\n  }\n\n  .-rwx0fg_a-_____f {\n    --iconPrimary: #fffffff0;\n  }\n\n  .-rwx0fg_a-_____a {\n    --iconPrimary: #ffffff36;\n  }\n\n  .-rwx0fg_a-_____r {\n    --iconPrimary: #000000d6;\n  }\n\n  .-rwx0fg_a-_____s {\n    --iconPrimary: #000000ed;\n  }\n\n  .-rwx0fg_a-_____n {\n    --iconPrimary: #00000038;\n  }\n\n  .bg {\n    background-color: var(--lightningcss-light, #e9e9e9) var(--lightningcss-dark, #2c2c2c);\n  }\n\n  .__N-17zqamw {\n    object-fit: inherit;\n  }\n\n  .__O-17zqamw {\n    object-position: inherit;\n  }\n\n  ._K-3t1x {\n    opacity: 0;\n  }\n\n  ._K-3t1y {\n    opacity: 1;\n  }\n\n  ._Og {\n    transition-property: none;\n  }\n\n  ._Oc {\n    transition-property: opacity;\n  }\n\n  ._Q-3760fu {\n    transition-duration: .5s;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    ._Ac {\n      --lightningcss-light: ;\n      --lightningcss-dark: initial;\n    }\n  }\n\n  .Ub {\n    position: fixed;\n  }\n\n  .b_____o {\n    background-color: #00000070;\n  }\n\n  ._6b {\n    flex-direction: column;\n  }\n\n  ._ve {\n    border-start-start-radius: 1rem;\n  }\n\n  ._we {\n    border-start-end-radius: 1rem;\n  }\n\n  ._xe {\n    border-end-start-radius: 1rem;\n  }\n\n  ._ye {\n    border-end-end-radius: 1rem;\n  }\n\n  .l-tp2nko {\n    width: calc(100% - 40px);\n  }\n\n  .k-tp2nko {\n    height: calc(100% - 40px);\n  }\n\n  .r-yjhhbv {\n    max-width: 90vw;\n  }\n\n  .p-yjhhbg {\n    max-height: 90vh;\n  }\n\n  ._S-3zirke {\n    animation-name: -_1mhijd;\n  }\n\n  ._S-1nys8p3 {\n    animation-name: -_1llqja1;\n  }\n\n  ._T-375y1o {\n    animation-duration: .25s;\n  }\n\n  ._T-375x5l {\n    animation-duration: .13s;\n  }\n\n  ._Ya {\n    animation-timing-function: cubic-bezier(.45, 0, .4, 1);\n  }\n\n  ._U-375x8c {\n    animation-delay: .16s;\n  }\n\n  ._U-3t1x {\n    animation-delay: 0s;\n  }\n\n  ._Wd {\n    animation-fill-mode: both;\n  }\n\n  .da {\n    outline-color: #0000;\n  }\n\n  :where(html) {\n    --lightningcss-light: initial;\n    --lightningcss-dark: ;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    :where(html) {\n      --lightningcss-light: ;\n      --lightningcss-dark: initial;\n    }\n  }\n\n  @media (prefers-color-scheme: dark) {\n    ._Ac {\n      --lightningcss-light: ;\n      --lightningcss-dark: initial;\n    }\n  }\n\n  .-_1de2x0q_b-d {\n    --s2-container-bg: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  }\n\n  .-_1de2x0q_b-e {\n    --s2-container-bg: var(--lightningcss-light, #f8f8f8) var(--lightningcss-dark, #1b1b1b);\n  }\n\n  .b-1de2x0q {\n    background-color: var(--s2-container-bg);\n    background-color: var(--s2-container-bg);\n    background-color: var(--s2-container-bg);\n  }\n\n  ._A-10jn6wd {\n    color-scheme: var(--lightningcss-light, light) var(--lightningcss-dark, dark);\n  }\n\n  ._Ac {\n    --lightningcss-light: initial;\n    --lightningcss-dark: ;\n    color-scheme: light dark;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    ._Ac {\n      --lightningcss-light: ;\n      --lightningcss-dark: initial;\n    }\n  }\n\n  ._Aa {\n    --lightningcss-light: initial;\n    --lightningcss-dark: ;\n    color-scheme: light;\n  }\n\n  ._Ab {\n    --lightningcss-light: ;\n    --lightningcss-dark: initial;\n    color-scheme: dark;\n  }\n\n  .-_1de2x0q_b-_____1 {\n    --s2-container-bg: var(--lightningcss-light, #fff) var(--lightningcss-dark, #222);\n  }\n\n  .b-1de2x0q {\n    background-color: var(--s2-container-bg);\n  }\n\n  ._vd {\n    border-start-start-radius: .625rem;\n  }\n\n  ._wd {\n    border-start-end-radius: .625rem;\n  }\n\n  ._xd {\n    border-end-start-radius: .625rem;\n  }\n\n  ._yd {\n    border-end-end-radius: .625rem;\n  }\n\n  ._ub {\n    filter: drop-shadow(0 2px 8px var(--lightningcss-light, #00000029) var(--lightningcss-dark, #0000007a));\n  }\n\n  ._tb {\n    box-shadow: 0 2px 8px var(--lightningcss-light, #00000029) var(--lightningcss-dark, #0000007a);\n  }\n\n  ._td {\n    box-shadow: none;\n  }\n\n  .sb {\n    border-inline-start-width: 1px;\n  }\n\n  .ch {\n    border-color: var(--lightningcss-light, #e1e1e1) var(--lightningcss-dark, #323232);\n  }\n\n  .l-38aqto {\n    width: 21rem;\n  }\n\n  .l-38elgx {\n    width: 26rem;\n  }\n\n  .l-3940j6 {\n    width: 36rem;\n  }\n\n  .Qd {\n    --translateY: .5rem;\n    translate: var(--translateX, 0) var(--translateY, 0);\n  }\n\n  .QG {\n    --translateY: -.5rem;\n    translate: var(--translateX, 0) var(--translateY, 0);\n  }\n\n  .PG {\n    --translateX: -.5rem;\n    translate: var(--translateX, 0) var(--translateY, 0);\n  }\n\n  .Pd {\n    --translateX: .5rem;\n    translate: var(--translateX, 0) var(--translateY, 0);\n  }\n\n  ._S-17xx2vw {\n    animation-name: -_2hjlm, -_1llqja1;\n  }\n\n  ._S-crq4zk {\n    animation-name: -xohm13, -_1llqja1;\n  }\n\n  ._S-1hbwyb {\n    animation-name: -_1s1guk8, -_1llqja1;\n  }\n\n  ._S-tlelkz {\n    animation-name: -_1dp80kl, -_1llqja1;\n  }\n\n  ._T-375xx3 {\n    animation-duration: .2s;\n  }\n\n  ._Yc {\n    animation-timing-function: cubic-bezier(.5, 0, 1, 1);\n  }\n\n  ._Va {\n    animation-direction: normal;\n  }\n\n  ._Vb {\n    animation-direction: reverse;\n  }\n\n  ._O-19n1ox2 {\n    transition-property: opacity, transform;\n  }\n\n  .__P-19n1ox2 {\n    will-change: opacity, transform;\n  }\n\n  .__Ba {\n    pointer-events: none;\n  }\n\n  .e-1de2x0q {\n    fill: var(--s2-container-bg);\n  }\n\n  .R-3t1x {\n    rotate: none;\n  }\n\n  .R-375xa6 {\n    rotate: 180deg;\n  }\n\n  .R-375ty3 {\n    rotate: -90deg;\n  }\n\n  .PF {\n    --translateX: -.25rem;\n    translate: var(--translateX, 0) var(--translateY, 0);\n  }\n\n  .Pc {\n    --translateX: .25rem;\n    translate: var(--translateX, 0) var(--translateY, 0);\n  }\n\n  .xb {\n    stroke-width: 1px;\n  }\n\n  .fj {\n    stroke: var(--lightningcss-light, #e1e1e1) var(--lightningcss-dark, #323232);\n  }\n\n  .__Da {\n    -webkit-user-select: none;\n    user-select: none;\n  }\n\n  .oa {\n    min-height: 0;\n  }\n\n  .di {\n    outline-color: var(--lightningcss-light, #dadada) var(--lightningcss-dark, #393939);\n  }\n\n  ._Nb {\n    outline-width: 1px;\n  }\n\n  ._Na {\n    outline-width: 0;\n  }\n\n  .Mj {\n    scroll-padding-top: 2rem;\n  }\n\n  .Kl {\n    scroll-padding-inline-start: 2.5rem;\n  }\n\n  .Za {\n    bottom: 0;\n  }\n\n  .Va {\n    inset-inline-start: 0;\n  }\n\n  .Wa {\n    inset-inline-end: 0;\n  }\n\n  .k-17zqamw {\n    height: inherit;\n  }\n\n  .qa {\n    min-width: 0;\n  }\n\n  .zd {\n    margin-inline-end: .5rem;\n  }\n\n  ._kd {\n    vertical-align: bottom;\n  }\n\n  ._kundefined {\n    vertical-align: 0;\n  }\n\n  ._M-3hmpw {\n    outline-offset: -2px;\n  }\n\n  ._v-6njx2e {\n    border-start-start-radius: .375rem;\n  }\n\n  ._w-6njx2e {\n    border-start-end-radius: .375rem;\n  }\n\n  ._x-6njx2e {\n    border-end-start-radius: .375rem;\n  }\n\n  ._y-6njx2e {\n    border-end-end-radius: .375rem;\n  }\n\n  ._2b {\n    justify-content: start;\n  }\n\n  ._2c {\n    justify-content: end;\n  }\n\n  ._Zj {\n    display: none;\n  }\n\n  .lh {\n    width: .75rem;\n  }\n\n  .W-2al4ab {\n    inset-inline-end: -.375rem;\n  }\n\n  .__Hi {\n    cursor: none;\n  }\n\n  .__Hx {\n    cursor: e-resize;\n  }\n\n  .__Hz {\n    cursor: w-resize;\n  }\n\n  .__HD {\n    cursor: ew-resize;\n  }\n\n  .-_1m7qh0o_d-x {\n    --focus-ring-color: var(--lightningcss-light, #4b75ff) var(--lightningcss-dark, #456efe);\n  }\n\n  .bi {\n    background-color: var(--lightningcss-light, #dadada) var(--lightningcss-dark, #393939);\n  }\n\n  .b-1m7qh0o {\n    background-color: var(--focus-ring-color);\n    background-color: var(--focus-ring-color);\n  }\n\n  .k_c {\n    height: 100vh;\n  }\n\n  .l-cplj4k {\n    width: .0625rem;\n  }\n\n  .l-59f7mn {\n    width: .125rem;\n  }\n\n  .V-6njx2e {\n    inset-inline-start: .375rem;\n  }\n\n  ._9-3t1x {\n    flex-grow: 0;\n  }\n\n  ._8-3t1y {\n    flex-shrink: 1;\n  }\n\n  .hF {\n    flex-basis: auto;\n  }\n\n  .R-3hn0u {\n    rotate: 90deg;\n  }\n\n  .yG {\n    margin-inline-start: .428571em;\n  }\n\n  .q-1wikn8b {\n    min-width: 1.14286em;\n  }\n\n  .Ua {\n    position: absolute;\n  }\n\n  .Xa {\n    top: 0;\n  }\n\n  .V-avx9c1 {\n    inset-inline-start: -.0625rem;\n  }\n\n  .l-1wikn8b {\n    width: 1.14286em;\n  }\n\n  .k-1wikn8b {\n    height: 1.14286em;\n  }\n\n  .e-1m7qh0o {\n    fill: var(--focus-ring-color);\n  }\n\n  .-rwx0fg_e-x {\n    --iconPrimary: white;\n  }\n\n  .qI {\n    min-width: 8rem;\n  }\n\n  .A-yj899n {\n    margin-top: -1px;\n  }\n\n  .yf {\n    margin-inline-start: 1rem;\n  }\n\n  .ub {\n    border-top-width: 1px;\n  }\n\n  .bf {\n    background-color: var(--lightningcss-light, #f3f3f3) var(--lightningcss-dark, #222);\n  }\n\n  .v-375tp1 {\n    border-bottom-width: var(--v);\n  }\n\n  .u-375tp0 {\n    border-top-width: var(--u);\n  }\n\n  .tb {\n    border-inline-end-width: 1px;\n  }\n\n  .-_375tp0_u-a {\n    --u: 0px;\n  }\n\n  .-_375tp1_v-b {\n    --v: 1px;\n  }\n\n  .va {\n    border-bottom-width: 0;\n  }\n\n  .Cf {\n    padding-inline-start: 1rem;\n  }\n\n  .Df {\n    padding-inline-end: 1rem;\n  }\n\n  ._0b {\n    align-content: center;\n  }\n\n  .k-1xrzxd1 {\n    height: calc(100% - 1px);\n  }\n\n  .__vb {\n    overflow-x: hidden;\n  }\n\n  .__wb {\n    overflow-y: hidden;\n  }\n\n  ._ma {\n    text-overflow: ellipsis;\n  }\n\n  ._pb {\n    white-space: nowrap;\n  }\n\n  ._pa {\n    white-space: normal;\n  }\n\n  ._ja {\n    text-align: start;\n  }\n\n  ._jb {\n    text-align: center;\n  }\n\n  ._jc {\n    text-align: end;\n  }\n\n  .l4 {\n    width: 100%;\n  }\n\n  .__Fa {\n    isolation: isolate;\n  }\n\n  .Ec {\n    padding-top: .25rem;\n  }\n\n  .Ea {\n    padding-top: 0;\n  }\n\n  .Fc {\n    padding-bottom: .25rem;\n  }\n\n  .Fa {\n    padding-bottom: 0;\n  }\n\n  .Cc {\n    padding-inline-start: .25rem;\n  }\n\n  .Ca {\n    padding-inline-start: 0;\n  }\n\n  .Dc {\n    padding-inline-end: .25rem;\n  }\n\n  .Da {\n    padding-inline-end: 0;\n  }\n\n  .AK {\n    margin-top: -.25rem;\n  }\n\n  .BK {\n    margin-bottom: -.25rem;\n  }\n\n  .yK {\n    margin-inline-start: -.25rem;\n  }\n\n  .zK {\n    margin-inline-end: -.25rem;\n  }\n\n  .k4 {\n    height: 100%;\n  }\n\n  .b-19jpv4m {\n    background-color: var(--rowBackgroundColor);\n  }\n\n  .-_19jpv4m_b-d {\n    --rowBackgroundColor: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  }\n\n  .-_19jpv4m_b-a {\n    --rowBackgroundColor: transparent;\n  }\n\n  .-_19jpv4m_b--26tcdv {\n    --rowBackgroundColor: var(--lightningcss-light, #eee) var(--lightningcss-dark, #212121);\n  }\n\n  .-_19jpv4m_b--17nxj1 {\n    --rowBackgroundColor: var(--lightningcss-light, #e7e7e7) var(--lightningcss-dark, #282828);\n  }\n\n  .-_19jpv4m_b--sogeql {\n    --rowBackgroundColor: var(--lightningcss-light, #ebefff) var(--lightningcss-dark, #151828);\n  }\n\n  .-_19jpv4m_b--1hocwbr {\n    --rowBackgroundColor: var(--lightningcss-light, #e2e8fe) var(--lightningcss-dark, #161c34);\n  }\n\n  .-oorfdf_d-x {\n    --rowFocusIndicatorColor: var(--lightningcss-light, #4b75ff) var(--lightningcss-dark, #456efe);\n  }\n\n  .ua {\n    border-top-width: 0;\n  }\n\n  .vb {\n    border-bottom-width: 1px;\n  }\n\n  .sa {\n    border-inline-start-width: 0;\n  }\n\n  .ta {\n    border-inline-end-width: 0;\n  }\n\n  .ci {\n    border-color: var(--lightningcss-light, #dadada) var(--lightningcss-dark, #393939);\n  }\n\n  .-zwoa9h:before {\n    content: \"\";\n    z-index: 3;\n    background-color: var(--rowFocusIndicatorColor);\n    width: 3px;\n    height: 100%;\n    margin-block-end: 1px;\n    margin-inline-end: -3px;\n    display: inline-block;\n    position: sticky;\n    inset-inline-start: 0;\n  }\n\n  .jF {\n    column-gap: .714286em;\n  }\n\n  .l7 {\n    width: fit-content;\n  }\n\n  ._Ob {\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n  }\n\n  .__a-4a7c5l {\n    grid-column-start: field;\n  }\n\n  .__R-yksgrp {\n    -webkit-tap-highlight-color: #0000;\n  }\n\n  .lj {\n    width: 1rem;\n  }\n\n  .l8 {\n    width: .875rem;\n  }\n\n  .l_a {\n    width: 1.125rem;\n  }\n\n  .lk {\n    width: 1.25rem;\n  }\n\n  .kj {\n    height: 1rem;\n  }\n\n  .k8 {\n    height: .875rem;\n  }\n\n  .k_a {\n    height: 1.125rem;\n  }\n\n  .kk {\n    height: 1.25rem;\n  }\n\n  ._vi {\n    border-start-start-radius: .285714em;\n  }\n\n  ._wi {\n    border-start-end-radius: .285714em;\n  }\n\n  ._xi {\n    border-end-start-radius: .285714em;\n  }\n\n  ._yi {\n    border-end-end-radius: .285714em;\n  }\n\n  ._8-3t1x {\n    flex-shrink: 0;\n  }\n\n  ._2d {\n    justify-content: center;\n  }\n\n  .uc {\n    border-top-width: 2px;\n  }\n\n  .vc {\n    border-bottom-width: 2px;\n  }\n\n  .sc {\n    border-inline-start-width: 2px;\n  }\n\n  .tc {\n    border-inline-end-width: 2px;\n  }\n\n  .wa {\n    border-style: solid;\n  }\n\n  ._zb {\n    forced-color-adjust: none;\n  }\n\n  .bd {\n    background-color: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  }\n\n  .bo {\n    background-color: var(--lightningcss-light, #131313) var(--lightningcss-dark, #f2f2f2);\n  }\n\n  .by {\n    background-color: var(--lightningcss-light, #3b63fb) var(--lightningcss-dark, #5681ff);\n  }\n\n  .bz {\n    background-color: var(--lightningcss-light, #274dea) var(--lightningcss-dark, #6995fe);\n  }\n\n  .bO {\n    background-color: var(--lightningcss-light, #d73220) var(--lightningcss-dark, #fc432e);\n  }\n\n  .bP {\n    background-color: var(--lightningcss-light, #b72818) var(--lightningcss-dark, #ff6756);\n  }\n\n  .bj {\n    background-color: var(--lightningcss-light, #c6c6c6) var(--lightningcss-dark, #444);\n  }\n\n  .cn {\n    border-color: var(--lightningcss-light, #292929) var(--lightningcss-dark, #dbdbdb);\n  }\n\n  .co {\n    border-color: var(--lightningcss-light, #131313) var(--lightningcss-dark, #f2f2f2);\n  }\n\n  .cO {\n    border-color: var(--lightningcss-light, #d73220) var(--lightningcss-dark, #fc432e);\n  }\n\n  .cP {\n    border-color: var(--lightningcss-light, #b72818) var(--lightningcss-dark, #ff6756);\n  }\n\n  .cQ {\n    border-color: var(--lightningcss-light, #9c2113) var(--lightningcss-dark, #ff8678);\n  }\n\n  .cj {\n    border-color: var(--lightningcss-light, #c6c6c6) var(--lightningcss-dark, #444);\n  }\n\n  .ca {\n    border-color: #0000;\n  }\n\n  .-rwx0fg_e-y {\n    --iconPrimary: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  }\n\n  .__h-17i5a9u {\n    grid-template-columns: .5625rem auto auto minmax(0, 1fr) auto auto auto .5625rem;\n  }\n\n  .__h-1kgdida {\n    grid-template-columns: .75rem auto auto minmax(0, 1fr) auto auto auto .75rem;\n  }\n\n  .__h-1w0s9l0 {\n    grid-template-columns: .9375rem auto auto minmax(0, 1fr) auto auto auto .9375rem;\n  }\n\n  .__h-358ibk {\n    grid-template-columns: 1.125rem auto auto minmax(0, 1fr) auto auto auto 1.125rem;\n  }\n\n  .p-17zqamw {\n    max-height: inherit;\n  }\n\n  .rX {\n    max-width: 20rem;\n  }\n\n  .__va {\n    overflow-x: auto;\n  }\n\n  .__wa {\n    overflow-y: auto;\n  }\n\n  .Ed {\n    padding-top: .5rem;\n  }\n\n  .Fd {\n    padding-bottom: .5rem;\n  }\n\n  .Cd {\n    padding-inline-start: .5rem;\n  }\n\n  .Dd {\n    padding-inline-end: .5rem;\n  }\n\n  ._1c {\n    align-items: center;\n  }\n\n  .E-1dbqcch {\n    padding-top: calc((var(--o)  - var(--u, 0px)  - var(--v, 0px)  - 1lh) / 2);\n  }\n\n  .F-1dbqcch {\n    padding-bottom: calc((var(--o)  - var(--u, 0px)  - var(--v, 0px)  - 1lh) / 2);\n  }\n\n  ._La {\n    outline-style: none;\n  }\n\n  ._Lb {\n    outline-style: solid;\n  }\n\n  .dx {\n    outline-color: var(--lightningcss-light, #4b75ff) var(--lightningcss-dark, #456efe);\n  }\n\n  ._Nc {\n    outline-width: 2px;\n  }\n\n  ._M-3t1z {\n    outline-offset: 2px;\n  }\n\n  .__na {\n    box-sizing: border-box;\n  }\n\n  ._vh {\n    border-start-start-radius: .571429em;\n  }\n\n  ._wh {\n    border-start-end-radius: .571429em;\n  }\n\n  ._xh {\n    border-end-start-radius: .571429em;\n  }\n\n  ._yh {\n    border-end-end-radius: .571429em;\n  }\n\n  .-_1gogtue_E--1dbqcch {\n    --labelPadding: calc((var(--o)  - var(--u, 0px)  - var(--v, 0px)  - 1lh) / 2);\n  }\n\n  .F-1gogtue {\n    padding-bottom: var(--labelPadding);\n  }\n\n  .ba {\n    background-color: #0000;\n  }\n\n  .Uc {\n    position: relative;\n  }\n\n  .__a-3t1y {\n    grid-column-start: 1;\n  }\n\n  .__b-3hmpv {\n    grid-column-end: -1;\n  }\n\n  .__j-f9k53a {\n    grid-template-areas: \". checkmark icon label value keyboard descriptor .\"\n                         \". . . description . . . .\";\n  }\n\n  .__h-1cwd7ud {\n    grid-template-columns: subgrid;\n  }\n\n  .__i-kmtuht {\n    grid-template-rows: auto minmax(0, min-content);\n  }\n\n  ._1d {\n    align-items: baseline;\n  }\n\n  .o-375tou {\n    min-height: var(--o);\n  }\n\n  ._ld {\n    text-decoration: none;\n  }\n\n  .__Hb {\n    cursor: default;\n  }\n\n  .__Hc {\n    cursor: pointer;\n  }\n\n  .-_375tou_o-q {\n    --o: 2rem;\n  }\n\n  .-_375tou_o-k {\n    --o: 1.25rem;\n  }\n\n  .-_375tou_o-m {\n    --o: 1.5rem;\n  }\n\n  .-_375tou_o-r {\n    --o: 2.5rem;\n  }\n\n  .-_375tou_o-x {\n    --o: 3rem;\n  }\n\n  .__Eb {\n    visibility: hidden;\n  }\n\n  .__Ea {\n    visibility: visible;\n  }\n\n  .ay {\n    color: var(--lightningcss-light, #3b63fb) var(--lightningcss-dark, #5681ff);\n  }\n\n  .az {\n    color: var(--lightningcss-light, #274dea) var(--lightningcss-dark, #6995fe);\n  }\n\n  .__a-jjmfgu {\n    grid-column-start: checkmark;\n  }\n\n  .__b-jjmfgu {\n    grid-column-end: checkmark;\n  }\n\n  .__c-jjmfgu {\n    grid-row-start: checkmark;\n  }\n\n  .__d-jjmfgu {\n    grid-row-end: checkmark;\n  }\n\n  .zF {\n    margin-inline-end: .714286em;\n  }\n\n  ._Za {\n    display: block;\n  }\n\n  .l-1sthc3k {\n    width: 1.42857em;\n  }\n\n  .k-1sthc3k {\n    height: 1.42857em;\n  }\n\n  ._Zd {\n    display: flex;\n  }\n\n  .__d-ykjmzy {\n    grid-row-end: icon;\n  }\n\n  .__a-ykjmzy {\n    grid-column-start: icon;\n  }\n\n  .__b-ykjmzy {\n    grid-column-end: icon;\n  }\n\n  .__c-ykjmzy {\n    grid-row-start: icon;\n  }\n\n  .__d-7u9dhl {\n    grid-row-end: span 2;\n  }\n\n  .zG {\n    margin-inline-end: .428571em;\n  }\n\n  .A-1kmz9hv {\n    margin-top: .428571em;\n  }\n\n  ._4d {\n    align-self: center;\n  }\n\n  ._vb {\n    border-start-start-radius: .25rem;\n  }\n\n  ._wb {\n    border-start-end-radius: .25rem;\n  }\n\n  ._xb {\n    border-end-start-radius: .25rem;\n  }\n\n  ._yb {\n    border-end-end-radius: .25rem;\n  }\n\n  .lq {\n    width: 2rem;\n  }\n\n  .lr {\n    width: 2.5rem;\n  }\n\n  .lv {\n    width: 2.75rem;\n  }\n\n  .lx {\n    width: 3rem;\n  }\n\n  .kq {\n    height: 2rem;\n  }\n\n  .kr {\n    height: 2.5rem;\n  }\n\n  .kv {\n    height: 2.75rem;\n  }\n\n  .kx {\n    height: 3rem;\n  }\n\n  ._bb {\n    aspect-ratio: 1;\n  }\n\n  .__Na {\n    object-fit: contain;\n  }\n\n  .__a-4e9m05 {\n    grid-column-start: label;\n  }\n\n  .__b-4e9m05 {\n    grid-column-end: label;\n  }\n\n  .__c-4e9m05 {\n    grid-row-start: label;\n  }\n\n  .__d-4e9m05 {\n    grid-row-end: label;\n  }\n\n  ._di {\n    font-size: 1.125rem;\n  }\n\n  ._ec {\n    font-variation-settings: \"wght\" 500;\n    font-synthesis-weight: none;\n    font-weight: 500;\n  }\n\n  .a-17zqamw {\n    color: inherit;\n  }\n\n  .A-1gogtue {\n    margin-top: var(--labelPadding);\n  }\n\n  .__a-14f9fux {\n    grid-column-start: description;\n  }\n\n  .__b-14f9fux {\n    grid-column-end: description;\n  }\n\n  .__c-14f9fux {\n    grid-row-start: description;\n  }\n\n  .__d-14f9fux {\n    grid-row-end: description;\n  }\n\n  ._da {\n    font-size: .6875rem;\n  }\n\n  ._dc {\n    font-size: .75rem;\n  }\n\n  ._eb {\n    font-variation-settings: \"wght\" 400;\n    font-synthesis-weight: none;\n    font-variation-settings: \"wght\" 400;\n    font-synthesis-weight: none;\n    font-variation-settings: \"wght\" 400;\n    font-synthesis-weight: none;\n    font-variation-settings: \"wght\" 400;\n    font-synthesis-weight: none;\n    font-variation-settings: \"wght\" 400;\n    font-synthesis-weight: none;\n    font-weight: 400;\n  }\n\n  .am {\n    color: var(--lightningcss-light, #505050) var(--lightningcss-dark, #afafaf);\n  }\n\n  ._Oa {\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;\n  }\n\n  ._Q-375x7f {\n    transition-duration: .15s;\n  }\n\n  ._Ra {\n    transition-timing-function: cubic-bezier(.45, 0, .4, 1);\n  }\n\n  .__a-4lc1fm {\n    grid-column-start: value;\n  }\n\n  .__b-4lc1fm {\n    grid-column-end: value;\n  }\n\n  .__c-4lc1fm {\n    grid-row-start: value;\n  }\n\n  .__d-4lc1fm {\n    grid-row-end: value;\n  }\n\n  .__a-1fzj7g6 {\n    grid-column-start: keyboard;\n  }\n\n  .__b-1fzj7g6 {\n    grid-column-end: keyboard;\n  }\n\n  .__c-1fzj7g6 {\n    grid-row-start: keyboard;\n  }\n\n  .__d-1fzj7g6 {\n    grid-row-end: keyboard;\n  }\n\n  ._ea {\n    font-variation-settings: \"wght\" 300;\n    font-synthesis-weight: none;\n    font-weight: 300;\n  }\n\n  .al {\n    color: var(--lightningcss-light, #717171) var(--lightningcss-dark, #8a8a8a);\n  }\n\n  .aj {\n    color: var(--lightningcss-light, #c6c6c6) var(--lightningcss-dark, #444);\n  }\n\n  .__a-1eqbudg {\n    grid-column-start: descriptor;\n  }\n\n  .__b-1eqbudg {\n    grid-column-end: descriptor;\n  }\n\n  .__c-1eqbudg {\n    grid-row-start: descriptor;\n  }\n\n  .__d-1eqbudg {\n    grid-row-end: descriptor;\n  }\n\n  .yd {\n    margin-inline-start: .5rem;\n  }\n\n  .-rwx0fg_e-b {\n    --iconPrimary: currentColor;\n  }\n\n  ._Zf {\n    display: grid;\n  }\n\n  .__a-3t1z {\n    grid-column-start: 2;\n  }\n\n  .__b-3hmpw {\n    grid-column-end: -2;\n  }\n\n  .A-2ipd0y {\n    margin-top: .3125rem;\n  }\n\n  .B-2ipd0y {\n    margin-bottom: .3125rem;\n  }\n\n  .S-3hmpv {\n    scale: -1;\n  }\n\n  ._4e {\n    align-self: stretch;\n  }\n\n  .bh {\n    background-color: var(--lightningcss-light, #e1e1e1) var(--lightningcss-dark, #323232);\n  }\n\n  .bn {\n    background-color: var(--lightningcss-light, #292929) var(--lightningcss-dark, #dbdbdb);\n  }\n\n  .b____8 {\n    background-color: #ffffff24;\n  }\n\n  .b_____e {\n    background-color: #ffffffd9;\n  }\n\n  .b_____l {\n    background-color: #0000001f;\n  }\n\n  .b_____r {\n    background-color: #000000d6;\n  }\n\n  .wf {\n    border-style: none;\n  }\n\n  ._vf {\n    border-start-start-radius: 9999px;\n  }\n\n  ._wf {\n    border-start-end-radius: 9999px;\n  }\n\n  ._xf {\n    border-end-start-radius: 9999px;\n  }\n\n  ._yf {\n    border-end-end-radius: 9999px;\n  }\n\n  .Ba {\n    margin-bottom: 0;\n  }\n\n  .k-375zlr {\n    height: 2px;\n  }\n\n  .k-375yri {\n    height: 1px;\n  }\n\n  .k-3761a9 {\n    height: 4px;\n  }\n\n  .l-375zlr {\n    width: 2px;\n  }\n\n  .l-375yri {\n    width: 1px;\n  }\n\n  .l-3761a9 {\n    width: 4px;\n  }\n\n  .q-389edk {\n    min-width: 218px;\n  }\n\n  .l-389edk {\n    width: 218px;\n  }\n\n  .Eh {\n    padding-top: 1.5rem;\n  }\n\n  .Fh {\n    padding-bottom: 1.5rem;\n  }\n\n  .Ch {\n    padding-inline-start: 1.5rem;\n  }\n\n  .Dh {\n    padding-inline-end: 1.5rem;\n  }\n\n  ._va {\n    border-start-start-radius: 0;\n  }\n\n  ._wa {\n    border-start-end-radius: 0;\n  }\n\n  ._xa {\n    border-end-start-radius: 0;\n  }\n\n  ._ya {\n    border-end-end-radius: 0;\n  }\n\n  ._dg {\n    font-size: 1rem;\n  }\n\n  ._ed {\n    font-variation-settings: \"wght\" 700;\n    font-synthesis-weight: none;\n    font-weight: 700;\n  }\n\n  ._fa {\n    line-height: 1.3;\n  }\n\n  .ao {\n    color: var(--lightningcss-light, #131313) var(--lightningcss-dark, #f2f2f2);\n  }\n\n  .Aa {\n    margin-top: 0;\n  }\n\n  .B-y6pz8c {\n    margin-bottom: .5rem;\n  }\n\n  .ya {\n    margin-inline-start: 0;\n  }\n\n  .za {\n    margin-inline-end: 0;\n  }\n\n  ._ca {\n    font-family: adobe-clean-variable, adobe-clean, ui-sans-serif, system-ui, sans-serif;\n  }\n\n  ._de {\n    font-size: .875rem;\n  }\n\n  ._eb {\n    font-variation-settings: \"wght\" 400;\n    font-synthesis-weight: none;\n    font-weight: 400;\n  }\n\n  ._fb {\n    line-height: 1.5;\n  }\n\n  .an {\n    color: var(--lightningcss-light, #292929) var(--lightningcss-dark, #dbdbdb);\n  }\n\n  .Af {\n    margin-top: 1rem;\n  }\n}\n\n@layer _.b {\n  ._c-enzrfpb {\n    &:lang(ar) {\n      font-family: myriad-arabic, ui-sans-serif, system-ui, sans-serif;\n    }\n  }\n\n  ._e-1x99dloe {\n    &:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n      font-variation-settings: \"wght\" 800;\n      font-synthesis-weight: none;\n      font-weight: 800;\n    }\n  }\n\n  ._f-1x99dlob {\n    &:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n      line-height: 1.5;\n    }\n  }\n\n  ._c-enzrfpb {\n    &:lang(ar) {\n      font-family: myriad-arabic, ui-sans-serif, system-ui, sans-serif;\n    }\n  }\n\n  ._e-1x99dloe {\n    &:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n      font-variation-settings: \"wght\" 800;\n      font-synthesis-weight: none;\n      font-weight: 800;\n    }\n  }\n\n  ._f-1x99dlob {\n    &:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n      line-height: 1.5;\n    }\n  }\n\n  ._c-enzrfpb {\n    &:lang(ar) {\n      font-family: myriad-arabic, ui-sans-serif, system-ui, sans-serif;\n    }\n  }\n\n  ._e-1x99dloe {\n    &:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n      font-variation-settings: \"wght\" 800;\n      font-synthesis-weight: none;\n      font-weight: 800;\n    }\n  }\n\n  ._f-1x99dlob {\n    &:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n      line-height: 1.5;\n    }\n  }\n\n  ._c-enzrfpb {\n    &:lang(ar) {\n      font-family: myriad-arabic, ui-sans-serif, system-ui, sans-serif;\n    }\n  }\n\n  ._e-1x99dloe {\n    &:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n      font-variation-settings: \"wght\" 800;\n      font-synthesis-weight: none;\n      font-weight: 800;\n    }\n  }\n\n  ._f-1x99dlob {\n    &:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n      line-height: 1.5;\n    }\n  }\n\n  .v-uamghwb:last-child {\n    border-bottom-width: 1px;\n  }\n\n  .v-uamghwa:last-child {\n    border-bottom-width: 0;\n  }\n\n  .C-1dz4pg9a:has([slot=\"icon\"]:only-child) {\n    padding-inline-start: 0;\n  }\n\n  .D-1dz4pg9a:has([slot=\"icon\"]:only-child) {\n    padding-inline-end: 0;\n  }\n\n  .-oelgqu_A--1dz4pg9a:has([slot=\"icon\"]:only-child) {\n    --iconMargin: 0rem;\n  }\n\n  ._1-soocicc:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    align-items: center;\n  }\n\n  .q-soocicq:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    min-width: 2rem;\n  }\n\n  .q-soocick:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    min-width: 1.25rem;\n  }\n\n  .q-soocicm:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    min-width: 1.5rem;\n  }\n\n  .q-soocicr:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    min-width: 2.5rem;\n  }\n\n  .q-soocicx:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    min-width: 3rem;\n  }\n\n  .C-soocica:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    padding-inline-start: 0;\n  }\n\n  .D-soocica:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    padding-inline-end: 0;\n  }\n\n  ._b-soocicb:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    aspect-ratio: 1;\n  }\n\n  .-oelgqu_A--soocica:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n    --iconMargin: 0rem;\n  }\n\n  .A-15rr5u6a:empty {\n    margin-top: 0;\n  }\n\n  .B-15rr5u6a:empty {\n    margin-bottom: 0;\n  }\n\n  .E-15rr5u6a:empty {\n    padding-top: 0;\n  }\n\n  .__i-1mnwavb-1wamrdj:has([slot=\"description\"]) {\n    grid-template-rows: auto auto;\n  }\n\n  .i-1mnwavb-cplj4k:has([slot=\"description\"]) {\n    row-gap: .0625rem;\n  }\n\n  ._Z-uamghwj:last-child {\n    display: none;\n  }\n\n  ._e-1x99dloe:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    font-variation-settings: \"wght\" 800;\n    font-synthesis-weight: none;\n    font-weight: 800;\n  }\n\n  ._f-1x99dlob:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    line-height: 1.5;\n  }\n\n  ._c-enzrfpb:lang(ar) {\n    font-family: myriad-arabic, ui-sans-serif, system-ui, sans-serif;\n  }\n\n  ._f-1x99dloc:is(:lang(ja), :lang(ko), :lang(zh), :lang(zh-Hant), :lang(zh-Hans)) {\n    line-height: 1.7;\n  }\n}\n\n@layer UNSAFE_overrides {\n  .-my2ngj {\n    background-image: linear-gradient(to right, var(--lightningcss-light, #e9e9e9) var(--lightningcss-dark, #2c2c2c) 33%, var(--lightningcss-light, #fff) var(--lightningcss-dark, #393939), var(--lightningcss-light, #e9e9e9) var(--lightningcss-dark, #2c2c2c) 66%);\n    background-size: 300%;\n  }\n\n  .-my2ngj * {\n    visibility: hidden;\n  }\n}\n\n@layer _.c {\n  ._c-enzwzjc {\n    &:lang(he) {\n      font-family: myriad-hebrew, ui-sans-serif, system-ui, sans-serif;\n    }\n  }\n\n  ._c-enzwzjc {\n    &:lang(he) {\n      font-family: myriad-hebrew, ui-sans-serif, system-ui, sans-serif;\n    }\n  }\n\n  ._c-enzwzjc {\n    &:lang(he) {\n      font-family: myriad-hebrew, ui-sans-serif, system-ui, sans-serif;\n    }\n  }\n\n  ._c-enzwzjc {\n    &:lang(he) {\n      font-family: myriad-hebrew, ui-sans-serif, system-ui, sans-serif;\n    }\n  }\n\n  ._c-enzwzjc:lang(he) {\n    font-family: myriad-hebrew, ui-sans-serif, system-ui, sans-serif;\n  }\n}\n\n@layer _.d {\n  ._c-enzykdd {\n    &:lang(ja) {\n      font-family: adobe-clean-han-japanese, Hiragino Kaku Gothic ProN, ãã©ã®ãè§ã´ ProN W3, Osaka, YuGothic, Yu Gothic, ã¡ã¤ãªãª, Meiryo, ï¼­ï¼³ ï¼°ã´ã·ãã¯, MS PGothic, sans-serif;\n    }\n  }\n\n  ._c-enzykdd {\n    &:lang(ja) {\n      font-family: adobe-clean-han-japanese, Hiragino Kaku Gothic ProN, ãã©ã®ãè§ã´ ProN W3, Osaka, YuGothic, Yu Gothic, ã¡ã¤ãªãª, Meiryo, ï¼­ï¼³ ï¼°ã´ã·ãã¯, MS PGothic, sans-serif;\n    }\n  }\n\n  ._c-enzykdd {\n    &:lang(ja) {\n      font-family: adobe-clean-han-japanese, Hiragino Kaku Gothic ProN, ãã©ã®ãè§ã´ ProN W3, Osaka, YuGothic, Yu Gothic, ã¡ã¤ãªãª, Meiryo, ï¼­ï¼³ ï¼°ã´ã·ãã¯, MS PGothic, sans-serif;\n    }\n  }\n\n  ._c-enzykdd {\n    &:lang(ja) {\n      font-family: adobe-clean-han-japanese, Hiragino Kaku Gothic ProN, ãã©ã®ãè§ã´ ProN W3, Osaka, YuGothic, Yu Gothic, ã¡ã¤ãªãª, Meiryo, ï¼­ï¼³ ï¼°ã´ã·ãã¯, MS PGothic, sans-serif;\n    }\n  }\n\n  ._c-enzykdd:lang(ja) {\n    font-family: adobe-clean-han-japanese, Hiragino Kaku Gothic ProN, ãã©ã®ãè§ã´ ProN W3, Osaka, YuGothic, Yu Gothic, ã¡ã¤ãªãª, Meiryo, ï¼­ï¼³ ï¼°ã´ã·ãã¯, MS PGothic, sans-serif;\n  }\n}\n\n@layer _.e {\n  ._c-enzzrge {\n    &:lang(ko) {\n      font-family: adobe-clean-han-korean, source-han-korean, Malgun Gothic, Apple Gothic, sans-serif;\n    }\n  }\n\n  ._c-enzzrge {\n    &:lang(ko) {\n      font-family: adobe-clean-han-korean, source-han-korean, Malgun Gothic, Apple Gothic, sans-serif;\n    }\n  }\n\n  ._c-enzzrge {\n    &:lang(ko) {\n      font-family: adobe-clean-han-korean, source-han-korean, Malgun Gothic, Apple Gothic, sans-serif;\n    }\n  }\n\n  ._c-enzzrge {\n    &:lang(ko) {\n      font-family: adobe-clean-han-korean, source-han-korean, Malgun Gothic, Apple Gothic, sans-serif;\n    }\n  }\n\n  ._c-enzzrge:lang(ko) {\n    font-family: adobe-clean-han-korean, source-han-korean, Malgun Gothic, Apple Gothic, sans-serif;\n  }\n}\n\n@layer _.f {\n  ._c-eo0c6sf {\n    &:lang(zh) {\n      font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Heiti TC Light, sans-serif;\n    }\n  }\n\n  ._c-eo0c6sf {\n    &:lang(zh) {\n      font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Heiti TC Light, sans-serif;\n    }\n  }\n\n  ._c-eo0c6sf {\n    &:lang(zh) {\n      font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Heiti TC Light, sans-serif;\n    }\n  }\n\n  ._c-eo0c6sf {\n    &:lang(zh) {\n      font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Heiti TC Light, sans-serif;\n    }\n  }\n\n  ._c-eo0c6sf:lang(zh) {\n    font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Heiti TC Light, sans-serif;\n  }\n}\n\n@layer _.g {\n  ._c-1uotwbwg {\n    &:lang(zh-hant) {\n      font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Microsoft JhengHei UI, Microsoft JhengHei, Heiti TC Light, sans-serif;\n    }\n  }\n\n  ._c-1uotwbwg {\n    &:lang(zh-hant) {\n      font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Microsoft JhengHei UI, Microsoft JhengHei, Heiti TC Light, sans-serif;\n    }\n  }\n\n  ._c-1uotwbwg {\n    &:lang(zh-hant) {\n      font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Microsoft JhengHei UI, Microsoft JhengHei, Heiti TC Light, sans-serif;\n    }\n  }\n\n  ._c-1uotwbwg {\n    &:lang(zh-hant) {\n      font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Microsoft JhengHei UI, Microsoft JhengHei, Heiti TC Light, sans-serif;\n    }\n  }\n\n  ._c-1uotwbwg:lang(zh-hant) {\n    font-family: adobe-clean-han-traditional, source-han-traditional, MingLiu, Microsoft JhengHei UI, Microsoft JhengHei, Heiti TC Light, sans-serif;\n  }\n}\n\n@layer _.h {\n  ._c-bc1l9oh {\n    &:is(:lang(zh-Hans), :lang(zh-CN), :lang(zh-SG)) {\n      font-family: adobe-clean-han-simplified-c, source-han-simplified-c, SimSun, Heiti SC Light, sans-serif;\n    }\n  }\n\n  ._c-bc1l9oh {\n    &:is(:lang(zh-Hans), :lang(zh-CN), :lang(zh-SG)) {\n      font-family: adobe-clean-han-simplified-c, source-han-simplified-c, SimSun, Heiti SC Light, sans-serif;\n    }\n  }\n\n  ._c-bc1l9oh {\n    &:is(:lang(zh-Hans), :lang(zh-CN), :lang(zh-SG)) {\n      font-family: adobe-clean-han-simplified-c, source-han-simplified-c, SimSun, Heiti SC Light, sans-serif;\n    }\n  }\n\n  ._c-bc1l9oh {\n    &:is(:lang(zh-Hans), :lang(zh-CN), :lang(zh-SG)) {\n      font-family: adobe-clean-han-simplified-c, source-han-simplified-c, SimSun, Heiti SC Light, sans-serif;\n    }\n  }\n\n  ._c-bc1l9oh:is(:lang(zh-Hans), :lang(zh-CN), :lang(zh-SG)) {\n    font-family: adobe-clean-han-simplified-c, source-han-simplified-c, SimSun, Heiti SC Light, sans-serif;\n  }\n}\n\n@layer _.b.b {\n  @media not ((hover: hover) and (pointer: fine)) {\n    .kbX {\n      height: 20rem;\n    }\n\n    .qb-z005a2 {\n      min-width: 15.625rem;\n    }\n\n    ._dbo {\n      font-size: 2.125rem;\n    }\n\n    .-_375tou_o-bA {\n      --o: 4.375rem;\n    }\n\n    .-_375tou_o-bC {\n      --o: 5rem;\n    }\n\n    .Cb-1itkwgp {\n      padding-inline-start: .703125rem;\n    }\n\n    .Cb-yk4pb9 {\n      padding-inline-start: 1.17188rem;\n    }\n\n    .Db-1itkwgp {\n      padding-inline-end: .703125rem;\n    }\n\n    .Db-yk4pb9 {\n      padding-inline-end: 1.17188rem;\n    }\n\n    .qbr {\n      min-width: 2.5rem;\n    }\n\n    .qbl {\n      min-width: 1.5625rem;\n    }\n\n    .qbn {\n      min-width: 1.875rem;\n    }\n\n    .qbu {\n      min-width: 3.125rem;\n    }\n\n    .qby {\n      min-width: 3.75rem;\n    }\n\n    .-_375toq_k-br {\n      --k: 2.5rem;\n    }\n\n    .-_375toq_k-bl {\n      --k: 1.5625rem;\n    }\n\n    .-_375toq_k-bn {\n      --k: 1.875rem;\n    }\n\n    .-_375toq_k-bu {\n      --k: 3.125rem;\n    }\n\n    .-_375toq_k-by {\n      --k: 3.75rem;\n    }\n\n    .jbH {\n      column-gap: .470588em;\n    }\n\n    .lb-1n4kawg {\n      width: 1.09375rem;\n    }\n\n    .lb-1nxaedl {\n      width: 1.40625rem;\n    }\n\n    .kb-1n4kawg {\n      height: 1.09375rem;\n    }\n\n    .kb-1nxaedl {\n      height: 1.40625rem;\n    }\n\n    .lbC {\n      width: 5rem;\n    }\n\n    .kbC {\n      height: 5rem;\n    }\n\n    ._dbm {\n      font-size: 1.6875rem;\n    }\n\n    .lbn {\n      width: 1.875rem;\n    }\n\n    .kbn {\n      height: 1.875rem;\n    }\n\n    .oba {\n      min-height: 0;\n    }\n\n    .qba {\n      min-width: 0;\n    }\n\n    ._vb-1aa9md1 {\n      border-start-start-radius: .46875rem;\n    }\n\n    ._wb-1aa9md1 {\n      border-start-end-radius: .46875rem;\n    }\n\n    ._xb-1aa9md1 {\n      border-end-start-radius: .46875rem;\n    }\n\n    ._yb-1aa9md1 {\n      border-end-end-radius: .46875rem;\n    }\n\n    .lbi {\n      width: .9375rem;\n    }\n\n    .Wb-1l44p6q {\n      inset-inline-end: -.46875rem;\n    }\n\n    .lb-1332gxq {\n      width: .078125rem;\n    }\n\n    .lb-13yuhxm {\n      width: .15625rem;\n    }\n\n    .Vb-1aa9md1 {\n      inset-inline-start: .46875rem;\n    }\n\n    .ybH {\n      margin-inline-start: .470588em;\n    }\n\n    .Vb-15azsa3 {\n      inset-inline-start: -.078125rem;\n    }\n\n    .qbJ {\n      min-width: 10rem;\n    }\n\n    .lbk {\n      width: 1.25rem;\n    }\n\n    .lb9 {\n      width: 1.09375rem;\n    }\n\n    .lb_b {\n      width: 1.40625rem;\n    }\n\n    .lbl {\n      width: 1.5625rem;\n    }\n\n    .kbk {\n      height: 1.25rem;\n    }\n\n    .kb9 {\n      height: 1.09375rem;\n    }\n\n    .kb_b {\n      height: 1.40625rem;\n    }\n\n    .kbl {\n      height: 1.5625rem;\n    }\n\n    .rb0 {\n      max-width: 25rem;\n    }\n\n    .-_375tou_o-br {\n      --o: 2.5rem;\n    }\n\n    .-_375tou_o-bl {\n      --o: 1.5625rem;\n    }\n\n    .-_375tou_o-bn {\n      --o: 1.875rem;\n    }\n\n    .-_375tou_o-bu {\n      --o: 3.125rem;\n    }\n\n    .-_375tou_o-by {\n      --o: 3.75rem;\n    }\n\n    .zbH {\n      margin-inline-end: .470588em;\n    }\n\n    .lbr {\n      width: 2.5rem;\n    }\n\n    .lbu {\n      width: 3.125rem;\n    }\n\n    .lbw {\n      width: 3.4375rem;\n    }\n\n    .lby {\n      width: 3.75rem;\n    }\n\n    .kbr {\n      height: 2.5rem;\n    }\n\n    .kbu {\n      height: 3.125rem;\n    }\n\n    .kbw {\n      height: 3.4375rem;\n    }\n\n    .kby {\n      height: 3.75rem;\n    }\n\n    ._dbj {\n      font-size: 1.375rem;\n    }\n\n    ._dbb {\n      font-size: .8125rem;\n    }\n\n    ._dbd {\n      font-size: .9375rem;\n    }\n\n    .Ab-shnpr4 {\n      margin-top: .390625rem;\n    }\n\n    .Bb-shnpr4 {\n      margin-bottom: .390625rem;\n    }\n\n    ._dbh {\n      font-size: 1.1875rem;\n    }\n\n    .Bb-8hx8xw {\n      margin-bottom: .625rem;\n    }\n\n    ._dbf {\n      font-size: 1.0625rem;\n    }\n  }\n}\n\n@layer _.b.a {\n  @media (forced-colors: active) {\n    .aa_____w {\n      color: buttonface;\n    }\n\n    .aa_____A {\n      color: highlighttext;\n    }\n\n    .ca_____z {\n      border-color: highlight;\n    }\n\n    .ba_____x {\n      background-color: buttontext;\n    }\n\n    .ba_____w {\n      background-color: buttonface;\n    }\n\n    .fa_____w {\n      stroke: background;\n    }\n\n    .fa_____B {\n      stroke: highlight;\n    }\n\n    .fa_____x {\n      stroke: buttonborder;\n    }\n\n    .da_____v {\n      outline-color: buttonborder;\n    }\n\n    .-_1m7qh0o_d-a_____z {\n      --focus-ring-color: Highlight;\n    }\n\n    .ea_____U {\n      fill: highlight;\n    }\n\n    .aa_____x {\n      color: buttontext;\n    }\n\n    .-_19jpv4m_b-a_____u {\n      --rowBackgroundColor: Background;\n    }\n\n    .-oorfdf_d-a_____z {\n      --rowFocusIndicatorColor: Highlight;\n    }\n\n    .ba_____u {\n      background-color: background;\n    }\n\n    .ba_____z {\n      background-color: highlight;\n    }\n\n    .ba_____C {\n      background-color: mark;\n    }\n\n    .ba_____B {\n      background-color: graytext;\n    }\n\n    .ca_____v {\n      border-color: buttonborder;\n    }\n\n    .ca_____C {\n      border-color: mark;\n    }\n\n    .ca_____B {\n      border-color: graytext;\n    }\n\n    .-rwx0fg_e-a_____V {\n      --iconPrimary: HighlightText;\n    }\n\n    .da_____z {\n      outline-color: highlight;\n    }\n\n    .-rwx0fg_e-a_____U {\n      --iconPrimary: Highlight;\n    }\n\n    .aa_____B {\n      color: graytext;\n    }\n\n    .ba_____v {\n      background-color: buttonborder;\n    }\n  }\n}\n\n@layer _.c.b {\n  @media not ((hover: hover) and (pointer: fine)) {\n    .q-soocicbr:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n      min-width: 2.5rem;\n    }\n\n    .q-soocicbl:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n      min-width: 1.5625rem;\n    }\n\n    .q-soocicbn:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n      min-width: 1.875rem;\n    }\n\n    .q-soocicbu:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n      min-width: 3.125rem;\n    }\n\n    .q-soocicby:has([slot=\"icon\"]):not(:has([data-rsp-slot=\"text\"])) {\n      min-width: 3.75rem;\n    }\n  }\n}\n\n@keyframes -u41dq3 {\n  0% {\n    transform: rotate(0);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes -_1i5ccgk {\n  0%, 100% {\n    stroke-dashoffset: 75px;\n  }\n\n  30% {\n    stroke-dashoffset: 20px;\n  }\n}\n\n@layer _.b.-l92dlr {\n  @media (height < 400px) {\n    .__w-l92dlrd {\n      overflow-y: visible;\n    }\n  }\n}\n\n@layer _.b.c {\n  @media (width >= 640px) {\n    ._6ca {\n      flex-direction: row;\n    }\n\n    ._1cc {\n      align-items: center;\n    }\n  }\n}\n\n@keyframes -_1llqja1 {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes -_1mhijd {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes -xohm13 {\n  from {\n    transform: translateY(-4px);\n  }\n\n  to {\n    transform: translateY(0);\n  }\n}\n\n@keyframes -_2hjlm {\n  from {\n    transform: translateY(4px);\n  }\n\n  to {\n    transform: translateY(0);\n  }\n}\n\n@keyframes -_1s1guk8 {\n  from {\n    transform: translateX(4px);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n}\n\n@keyframes -_1dp80kl {\n  from {\n    transform: translateX(-4px);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n}\n\n.\\.:not(#a#b) {\n  all: revert-layer;\n}\n\nhtml {\n  --lightningcss-light: initial;\n  --lightningcss-dark: ;\n  color-scheme: light dark;\n  --s2-container-bg: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  background: var(--s2-container-bg);\n}\n\n@media (prefers-color-scheme: dark) {\n  html {\n    --lightningcss-light: ;\n    --lightningcss-dark: initial;\n  }\n}\n\nhtml[data-color-scheme=\"light\"] {\n  --lightningcss-light: initial;\n  --lightningcss-dark: ;\n  color-scheme: light;\n}\n\nhtml[data-color-scheme=\"dark\"] {\n  --lightningcss-light: ;\n  --lightningcss-dark: initial;\n  color-scheme: dark;\n}\n\nhtml[data-background=\"layer-1\"] {\n  --s2-container-bg: var(--lightningcss-light, #f8f8f8) var(--lightningcss-dark, #1b1b1b);\n}\n\nhtml[data-background=\"layer-2\"] {\n  --s2-container-bg: var(--lightningcss-light, #fff) var(--lightningcss-dark, #222);\n}\n\nhtml, body {\n  margin: 0;\n}\n/*# sourceMappingURL=index.4a11418c.css.map */\n","@import \"7b77c4f484e27220\";\n@import \"7f997991b3a99fbd\";\n@import \"f3f61a6146315465\";\n@import \"a6d18cafda01605a\";\n@import \"2bbf683b9a6c1d21\";\n@import \"26e0aee5de2d6c62\";\n@import \"d30c33872a79a2ac\";\n@import \"0d8b65797b64846e\";\n@import \"957704ecbc3a54e2\";\n@import \"ed6230f2a9e38dbe\";\n@import \"a440485ec3a0d2ed\";\n@import \"30e5c9337c601036\";\n@import \"8941768f5e1c9fa4\";\n@import \"ba8c2f78cb668cea\";\n@import \"07b6286a4b664fc2\";\n@import \"d638bc1a42006308\";\n@import \"876fe3dd717eb49d\";\n@import \"2397e71d2e516d5d\";\n@import \"8f3001c8c2b70270\";\n@import \"bc138ac38f8427d1\";\n@import \"09615a623f58d497\";\n@import \"0273d100085e0368\";\n@import \"a96b8a41fa39b089\";\n@import \"7cc29ef69582bfc2\";\n@import \"067e7a05d0da25c2\";\n@import \"9d3dc3650919b997\";\n@import \"6e9f41083b065021\";\n@import \"c47a5b5b7da1f54b\";\n@import \"874c21814e1e227c\";\n@import \"405252bce65cadf5\";\n@import \"838824b6c4c4a123\";\n","import {useCallback, useEffect, useState, useMemo} from \"react\";\nimport {\n    ActionButton,\n    Button,\n    ButtonGroup,\n    TableView,\n    TableHeader,\n    TableBody,\n    Column,\n    Row,\n    Cell,\n    Accordion,\n    Disclosure,\n    DisclosureHeader,\n    DisclosurePanel,\n    ContextualHelp,\n    Heading,\n    Content,\n    Footer,\n    Text,\n    DialogTrigger,\n    AlertDialog\n} from '@react-spectrum/s2';\nimport \"@react-spectrum/s2/page.css\";\nimport './index.css';\nimport {style} from \"@react-spectrum/s2/style\" with { type: \"macro\" };\n\nasync function setClipboard(text) {\n    const type = \"text/plain\";\n    const blob = new Blob([text], { type });\n    const data = [new ClipboardItem({ [type]: blob })];\n    await navigator.clipboard.write(data);\n}\n\nfunction renderEmptyState() {\n    return (\n        <div style={{padding: '16px', textAlign: 'center'}}>\n            No domains found. Visit some websites.\n        </div>\n    );\n}\n\nfunction renderBannedEmptyState() {\n    return (\n        <div style={{padding: '16px', textAlign: 'center'}}>\n            No domains banned yet.\n        </div>\n    );\n}\n\nfunction renderPausedEmptyState() {\n    return (\n        <div style={{padding: '16px', textAlign: 'center'}}>\n            No domains paused yet.\n        </div>\n    );\n}\n\nexport function App() {\n    let [domains, setDomains] = useState([]);\n    let [bannedDomains, setBannedDomains] = useState([]);\n    let [pausedDomains, setPausedDomains] = useState([]);\n    let updateStateFromStorage = useCallback(() => {\n        chrome.storage.local.get(['domains', 'bannedDomains', 'pausedDomains']).then(function (entries) {\n            let bannedDomains = entries.bannedDomains ?? [];\n            let pausedDomains = entries.pausedDomains ?? [];\n            let allKeys = entries.domains ?? [];\n            setDomains(allKeys);\n            setBannedDomains(bannedDomains);\n            setPausedDomains(pausedDomains);\n        }, []);\n    }, []);\n    useEffect(() => {\n        chrome.storage.onChanged.addListener(function (changes, namespace) {\n            updateStateFromStorage();\n        });\n    }, []);\n    useEffect(() => {\n        updateStateFromStorage();\n    }, []);\n\n    let columns = useMemo(() => [{name: 'Domain', id: 'domain', isRowHeader: true}, {name: 'Actions', id: 'actions'}], []);\n    let bannedColumns = useMemo(() => [{name: 'Banned domains', id: 'domain', isRowHeader: true}, {name: 'Actions', id: 'actions'}], []);\n    let pausedColumns = useMemo(() => [{name: 'Paused domains', id: 'domain', isRowHeader: true}, {name: 'Actions', id: 'actions'}], []);\n    let items = useMemo(() => domains.map(domain => ({domain, id: domain})), [domains]);\n    let bannedItems = useMemo(() => bannedDomains.map(domain => ({domain, id: domain})), [bannedDomains]);\n    let pausedItems = useMemo(() => pausedDomains.map(domain => ({domain, id: domain})), [pausedDomains]);\n\n    return (\n        <div className={style({width: '[400px]', height: '[600px]', display: 'flex', flexDirection: 'column', gap: 8, padding: 8, boxSizing: 'border-box'})}>\n            <div className={style({display: 'flex', justifyContent: 'space-between'})}>\n                <h1 id=\"table-title\" className={style({flexGrow: 0, flexShrink: 0, font: 'heading-lg', marginBottom: 4, marginTop: 4})}>React Aria Detector</h1>\n                <ContextualHelp>\n                    <Heading>How to use</Heading>\n                    <Content>\n                        <Text>\n                            <p>\n                                This extension detects websites using React Aria and allows you to manage the list of domains as well as generate a report.\n                            </p>\n                            <p>\n                                Excluding domains means that they won't show up in the auto generated report that you can get by clicking the \"Copy\" button.\n                            </p>\n                            <p>\n                                Pausing for a domain will disconnect the mutation observer and will not try to find React Aria on the domain again until it is unpaused and the page is refreshed.\n                            </p>\n                            <p>\n                                Reset storage will clear everything in the entire extension.\n                            </p>\n                        </Text>\n                    </Content>\n                    <Footer>\n                    </Footer>\n                </ContextualHelp>\n            </div>\n            <Accordion allowsMultipleExpanded defaultExpandedKeys={['react-aria-fans']}>\n                <Disclosure id=\"react-aria-fans\">\n                    <DisclosureHeader>\n                        <h2 id=\"table-title\" className={style({flexGrow: 0, flexShrink: 0, font: 'heading', margin: 0})}>Domains using React Aria</h2>\n                    </DisclosureHeader>\n                    <DisclosurePanel>\n                        <DomainTable\n                            items={items}\n                            columns={columns}\n                            aria-labelledby=\"table-title\"\n                            actions={[\n                                {name: 'Delete', onAction: (domain) => {\n                                    chrome.storage.local.remove(domain);\n                                }}, {name: 'Ban', onAction: (domain) => {\n                                    chrome.storage.local.get('bannedDomains').then(function (entries) {\n                                        let bannedDomains = entries.bannedDomains || [];\n                                        bannedDomains.push(domain);\n                                        chrome.storage.local.set({bannedDomains});\n                                    });\n                                }}, {name: 'Pause', onAction: (domain) => {\n                                    chrome.storage.local.get('pausedDomains').then(function (entries) {\n                                        let pausedDomains = entries.pausedDomains || [];\n                                        pausedDomains.push(domain);\n                                        chrome.storage.local.set({pausedDomains});\n                                    });\n                                }}]}\n                                renderEmptyState={renderEmptyState}\n                            />\n                    </DisclosurePanel>\n                </Disclosure>\n                <Disclosure id=\"banned-domains\">\n                    <DisclosureHeader>\n                        <h2 id=\"banned-table-title\" className={style({flexGrow: 0, flexShrink: 0, font: 'heading', margin: 0})}>Domains excluded</h2>\n                    </DisclosureHeader>\n                    <DisclosurePanel>\n                        <DomainTable\n                            items={bannedItems}\n                            columns={bannedColumns}\n                            aria-labelledby=\"banned-table-title\"\n                            actions={[\n                                {name: 'Unban', onAction: (domain) => {\n                                    chrome.storage.local.get('bannedDomains').then(function (entries) {\n                                        let bannedDomains = entries.bannedDomains || [];\n                                        bannedDomains = bannedDomains.filter(d => d !== domain);\n                                        chrome.storage.local.set({bannedDomains});\n                                    });\n                                }}]}\n                            renderEmptyState={renderBannedEmptyState}\n                        />\n                    </DisclosurePanel>\n                </Disclosure>\n                <Disclosure id=\"paused-domains\">\n                    <DisclosureHeader>\n                        <h2 id=\"paused-table-title\" className={style({flexGrow: 0, flexShrink: 0, font: 'heading', margin: 0})}>Domains on pause</h2>\n                    </DisclosureHeader>\n                    <DisclosurePanel>\n                        <DomainTable\n                            items={pausedItems}\n                            columns={pausedColumns}\n                            aria-labelledby=\"paused-table-title\"\n                            actions={[\n                                {name: 'Unpause', onAction: (domain) => {\n                                    chrome.storage.local.get('pausedDomains').then(function (entries) {\n                                        let pausedDomains = entries.pausedDomains || [];\n                                        pausedDomains = pausedDomains.filter(d => d !== domain);\n                                        chrome.storage.local.set({pausedDomains});\n                                    });\n                                }}]}\n                            renderEmptyState={renderPausedEmptyState}\n                        />\n                    </DisclosurePanel>\n                </Disclosure>\n            </Accordion>\n            <ButtonGroup styles={style({flexGrow: 0, flexShrink: 0})}>\n                <DialogTrigger>\n                    <Button variant=\"negative\">Reset storage</Button>\n                    <AlertDialog\n                        title=\"Reset storage\"\n                        variant=\"destructive\"\n                        primaryActionLabel=\"Reset\"\n                        cancelLabel=\"Cancel\"\n                        onPrimaryAction={() => {\n                            chrome.storage.local.clear();\n                        }}>\n                        Are you sure you want to reset all storage? This will delete all domains and settings.\n                    </AlertDialog>\n                </DialogTrigger>\n                <Button variant=\"secondary\" onPress={() => {\n                    chrome.tabs.query({active: true, currentWindow: true}, function(tabs){\n                        // send message so the content-script can tell us the domain more easily\n                        if (tabs[0]) {\n                            chrome.tabs.sendMessage(tabs[0].id, {action: \"pause\"});\n                        }\n                    });\n                }}>Pause domain</Button>\n                <Button variant=\"accent\" onPress={() => {\n                    setClipboard(`ð¤© Sites using React Aria: ${JSON.stringify(domains)}`);\n                }}>Copy</Button>\n            </ButtonGroup>\n        </div>\n    );\n}\n\nfunction DomainTable(props) {\n    let {\n        items,\n        columns,\n        'aria-labelledby': ariaLabelledBy,\n        actions,\n        renderEmptyState\n    } = props;\n    return (\n        <TableView styles={style({height: 256})} aria-labelledby={ariaLabelledBy} overflowMode=\"wrap\">\n            <TableHeader columns={columns}>\n                {(column) => (\n                    <Column isRowHeader={column.isRowHeader}>{column.name}</Column>\n                )}\n            </TableHeader>\n            <TableBody items={items} renderEmptyState={renderEmptyState}>\n                {item => (\n                    <Row columns={columns}>\n                        {(column) => {\n                            let domain = item.domain;\n                            if(column.id === 'domain') {\n                                return <Cell id={column.id}>{domain}</Cell>\n                            } else {\n                                return (\n                                    <Cell id={column.id}>\n                                        <div style={{display: 'flex', gap: '4px'}}>\n                                            {actions.map(({name, onAction}) => (\n                                                <ActionButton onPress={() => onAction(domain)}>{name}</ActionButton>\n                                            ))}\n                                        </div>\n                                    </Cell>\n                                );\n                            }\n                        }}\n                    </Row>\n                )}\n            </TableBody>\n        </TableView>\n    )\n}\n\n//\n// let [domains, setDomains] = useState([]);\n// let [bannedDomains, setBannedDomains] = useState([]);\n// useEffect(() => {\n//     chrome.storage.local.get().then(function (entries) {\n//         let allKeys = Object.keys(entries).filter(key => !reservedStorageKeys.includes(key));\n//         setDomains(allKeys);\n//         console.log('all keys:', allKeys)\n//     }, []);\n//     chrome.storage.local.get('bannedDomains').then(function (entries) {\n//         let bannedDomains = entries.bannedDomains || [];\n//         setBannedDomains(bannedDomains);\n//     });\n// }, []);\n// let columns = useMemo(() => ['Domain', 'Actions'], []);\n// let items = useMemo(() => domains.map(domain => ({domain, id: domain})), [domains]);\n// return (\n//     <div style={{maxWidth: '300px', maxHeight: '600px', display: 'flex', flexDirection: 'column', gap: '8px'}}>\n//         <h1 id=\"table-title\">Domains using React Aria</h1>\n//         <Table aria-labelledby=\"table-title\">\n//             <TableHeader columns={columns}>\n//                 {(column) => (\n//                     <Column width={150} minWidth={150} isRowHeader={column.isRowHeader}>{column.name}</Column>\n//                 )}\n//             </TableHeader>\n//             <TableBody items={items} renderEmptyState={renderEmptyState}Z>\n//                 {item => (\n//                     <Row columns={columns}>\n//                         <Cell>{item.domain}</Cell>\n//                         <Cell>\n//                             <div style={{display: 'flex'}}>\n//                                 <ActionButton onPress={() => {\n//                                     chrome.storage.local.remove(domain);\n//                                     setDomains(domains.filter(d => d !== domain));\n//                                 }}>Delete</ActionButton>\n//                                 <ActionButton onPress={() => {\n//                                     chrome.storage.local.get('bannedDomains').then(function (entries) {\n//                                         let bannedDomains = entries.bannedDomains || [];\n//                                         bannedDomains.push(domain);\n//                                         chrome.storage.local.set({bannedDomains});\n//                                         setBannedDomains(bannedDomains);\n//                                     });\n//                                 }}>Ban</ActionButton>\n//                             </div>\n//                         </Cell>\n//                     </Row>\n//                 )}\n//             </TableBody>\n//         </Table>\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, DOMRef, DOMRefValue} from '@react-types/shared';\nimport {Button, ContextValue, DisclosureStateContext, Heading, Provider, UNSTABLE_Disclosure as RACDisclosure, UNSTABLE_DisclosurePanel as RACDisclosurePanel, DisclosurePanelProps as RACDisclosurePanelProps, DisclosureProps as RACDisclosureProps, useLocale, useSlottedContext} from 'react-aria-components';\nimport {CenterBaseline} from './CenterBaseline';\nimport {centerPadding, getAllowedOverrides, StyleProps, UnsafeStyles} from './style-utils' with { type: 'macro' };\nimport Chevron from '../ui-icons/Chevron';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {focusRing, lightDark, size as sizeValue, style} from '../style' with { type: 'macro' };\nimport React, {createContext, forwardRef, ReactNode, useContext} from 'react';\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface DisclosureProps extends Omit<RACDisclosureProps, 'className' | 'style' | 'children'>, StyleProps {\n  /**\n   * The size of the disclosure.\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /**\n   * The amount of space between the disclosures.\n   * @default 'regular'\n   */\n  density?: 'compact' | 'regular' | 'spacious',\n  /** Whether the disclosure should be displayed with a quiet style. */\n  isQuiet?: boolean,\n  /** The contents of the disclosure, consisting of an DisclosureHeader and DisclosurePanel. */\n  children: ReactNode\n}\n\nexport const DisclosureContext = createContext<ContextValue<Omit<DisclosureProps, 'children'>, DOMRefValue<HTMLDivElement>>>(null);\n\nconst disclosure = style({\n  color: 'heading',\n  borderTopWidth: {\n    default: 1,\n    isQuiet: 0\n  },\n  borderBottomWidth: {\n    default: 0,\n    ':last-child': {\n      default: 1,\n      isQuiet: 0\n    }\n  },\n  borderStartWidth: 0,\n  borderEndWidth: 0,\n  borderStyle: 'solid',\n  borderColor: 'gray-200',\n  minWidth: sizeValue(200)\n}, getAllowedOverrides());\n\nfunction Disclosure(props: DisclosureProps, ref: DOMRef<HTMLDivElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, DisclosureContext);\n  let {\n    size = 'M',\n    density = 'regular',\n    isQuiet,\n    UNSAFE_style,\n    UNSAFE_className = ''\n  } = props;\n  let domRef = useDOMRef(ref);\n\n  return (\n    <Provider\n      values={[\n        [DisclosureContext, {size, isQuiet, density}]\n      ]}>\n      <RACDisclosure\n        {...props}\n        ref={domRef}\n        style={UNSAFE_style}\n        className={(UNSAFE_className ?? '') + disclosure({isQuiet}, props.styles)}>\n        {props.children}\n      </RACDisclosure>\n    </Provider>\n  );\n}\n\n/**\n * A disclosure is a collapsible section of content. It is composed of a a header with a heading and trigger button, and a panel that contains the content.\n */\nlet _Disclosure = forwardRef(Disclosure);\nexport {_Disclosure as Disclosure};\n\nexport interface DisclosureHeaderProps extends UnsafeStyles, DOMProps {\n  /** The heading level of the disclosure header.\n   * \n   * @default 3\n   */\n  level?: number,\n  /** The contents of the disclosure header. */\n  children: React.ReactNode\n}\n\nconst headingStyle = style({\n  margin: 0\n});\n\nconst buttonStyles = style({\n  ...focusRing(),\n  outlineOffset: -2,\n  font: 'heading',\n  color: {\n    default: 'neutral',\n    isDisabled: 'disabled'\n  },\n  fontWeight: 'bold',\n  fontSize: {\n    size: {\n      S: 'heading-xs',\n      M: 'heading-sm',\n      L: 'heading',\n      XL: 'heading-lg'\n    }\n  },\n  lineHeight: 'ui',\n  display: 'flex',\n  alignItems: 'baseline',\n  paddingX: '[calc(self(minHeight) * 3/8 - 1px)]',\n  paddingY: centerPadding(),\n  gap: '[calc(self(minHeight) * 3/8 - 1px)]',\n  minHeight: {\n    // compact is equivalent to 'control', but other densities have more padding.\n    size: {\n      S: {\n        density: {\n          compact: 24,\n          regular: 32,\n          spacious: 40\n        }\n      },\n      M: {\n        density: {\n          compact: 32,\n          regular: 40,\n          spacious: 48\n        }\n      },\n      L: {\n        density: {\n          compact: 40,\n          regular: 48,\n          spacious: 56\n        }\n      },\n      XL: {\n        density: {\n          compact: 48,\n          regular: 56,\n          spacious: 64\n        }\n      }\n    }\n  },\n  width: 'full',\n  backgroundColor: {\n    default: 'transparent',\n    isFocusVisible: lightDark('transparent-black-100', 'transparent-white-100'),\n    isHovered: lightDark('transparent-black-100', 'transparent-white-100'),\n    isPressed: lightDark('transparent-black-100', 'transparent-white-100')\n  },\n  transition: 'default',\n  borderWidth: 0,\n  borderRadius: {\n    // Only rounded for keyboard focus and quiet.\n    default: 'none',\n    isFocusVisible: 'control',\n    isQuiet: 'control'\n  },\n  textAlign: 'start',\n  disableTapHighlight: true\n});\n\nconst chevronStyles = style({\n  rotate: {\n    isRTL: 180,\n    isExpanded: 90\n  },\n  transition: 'default',\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  },\n  flexShrink: 0\n});\n\nfunction DisclosureHeader(props: DisclosureHeaderProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    level = 3,\n    UNSAFE_style,\n    UNSAFE_className = '',\n    ...otherProps\n  } = props;\n  let domRef = useDOMRef(ref);\n  const domProps = filterDOMProps(otherProps);\n  let {direction} = useLocale();\n  let {isExpanded} = useContext(DisclosureStateContext)!;\n  let {size, density, isQuiet} = useSlottedContext(DisclosureContext)!;\n  let isRTL = direction === 'rtl';\n  return (\n    <Heading\n      {...domProps}\n      level={level}\n      ref={domRef}\n      style={UNSAFE_style}\n      className={(UNSAFE_className ?? '') + headingStyle}>\n      <Button className={(renderProps) => buttonStyles({...renderProps, size, density, isQuiet})} slot=\"trigger\">\n        <CenterBaseline>\n          <Chevron size={size} className={chevronStyles({isExpanded, isRTL})} aria-hidden=\"true\" />\n        </CenterBaseline>\n        {props.children}\n      </Button>\n    </Heading>\n  );\n}\n\n/**\n * A header for a disclosure. Contains a heading and a trigger button to expand/collapse the panel.\n */\nlet _DisclosureHeader = forwardRef(DisclosureHeader);\nexport {_DisclosureHeader as DisclosureHeader};\n\nexport interface DisclosurePanelProps extends Omit<RACDisclosurePanelProps, 'className' | 'style' | 'children'>, UnsafeStyles, DOMProps, AriaLabelingProps {\n  children: React.ReactNode\n}\n\nconst panelStyles = style({\n  font: 'body',\n  paddingTop: {\n    isExpanded: 8\n  },\n  paddingBottom: {\n    isExpanded: 16\n  },\n  paddingX: {\n    isExpanded: {\n      size: {\n        S: 8,\n        M: sizeValue(9),\n        L: 12,\n        XL: sizeValue(15)\n      }\n    }\n  }\n});\n\nfunction DisclosurePanel(props: DisclosurePanelProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    UNSAFE_style,\n    UNSAFE_className = '',\n    ...otherProps\n  } = props;\n  const domProps = filterDOMProps(otherProps);\n  let {size} = useSlottedContext(DisclosureContext)!;\n  let {isExpanded} = useContext(DisclosureStateContext)!;\n  let panelRef = useDOMRef(ref);\n  return (\n    <RACDisclosurePanel\n      {...domProps}\n      ref={panelRef}\n      style={UNSAFE_style}\n      className={(UNSAFE_className ?? '') + panelStyles({size, isExpanded})}>\n      {props.children}\n    </RACDisclosurePanel>\n  );\n}\n\n/**\n * A disclosure panel is a collapsible section of content that is hidden until the disclosure is expanded.\n */\nlet _DisclosurePanel = forwardRef(DisclosurePanel);\nexport {_DisclosurePanel as DisclosurePanel};\n\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CSSProperties, ReactNode} from 'react';\nimport {mergeStyles} from '../style/runtime';\nimport {raw} from '../style/style-macro' with {type: 'macro'};\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleString} from '../style/types';\n\ninterface CenterBaselineProps {\n  style?: CSSProperties,\n  styles?: StyleString,\n  children: ReactNode,\n  slot?: string\n}\n\nconst styles = style({\n  display: 'flex',\n  alignItems: 'center'\n});\n\nexport function CenterBaseline(props: CenterBaselineProps) {\n  return (\n    <div\n      slot={props.slot}\n      style={props.style}\n      className={mergeStyles(styles, props.styles) + ' ' + centerBaselineBefore}>\n      {props.children}\n    </div>\n  );\n}\n\nexport const centerBaselineBefore = raw('&::before { content: \"\\u00a0\"; width: 0; visibility: hidden }');\n\nexport function centerBaseline(props: Omit<CenterBaselineProps, 'children'> = {}): (icon: ReactNode) => ReactNode {\n  return (icon: ReactNode) => <CenterBaseline {...props}>{icon}</CenterBaseline>;\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {baseColor, focusRing, fontRelative, style} from '../style' with { type: 'macro' };\nimport {ButtonProps, ButtonRenderProps, ContextValue, OverlayTriggerStateContext, Provider, Button as RACButton, Text} from 'react-aria-components';\nimport {centerBaseline} from './CenterBaseline';\nimport {createContext, forwardRef, ReactNode, useContext} from 'react';\nimport {FocusableRef, FocusableRefValue} from '@react-types/shared';\nimport {getAllowedOverrides, StyleProps} from './style-utils' with { type: 'macro' };\nimport {IconContext} from './Icon';\nimport {pressScale} from './pressScale';\nimport {SkeletonContext} from './Skeleton';\nimport {TextContext} from './Content';\nimport {useFocusableRef} from '@react-spectrum/utils';\nimport {useFormProps} from './Form';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface ActionButtonStyleProps {\n  /**\n   * The size of the ActionButton.\n   *\n   * @default 'M'\n   */\n  size?: 'XS' | 'S' | 'M' | 'L' | 'XL',\n  /** The static color style to apply. Useful when the ActionButton appears over a color background. */\n  staticColor?: 'black' | 'white',\n  /** Whether the button should be displayed with a [quiet style](https://spectrum.adobe.com/page/action-button/#Quiet). */\n  isQuiet?: boolean\n}\n\ninterface ToggleButtonStyleProps {\n  /** Whether the ActionButton should be selected (controlled). */\n  isSelected?: boolean,\n  /** Whether the button should be displayed with an [emphasized style](https://spectrum.adobe.com/page/action-button/#Emphasis). */\n  isEmphasized?: boolean\n}\n\nexport interface ActionButtonProps extends Omit<ButtonProps, 'className' | 'style' | 'children' | 'onHover' | 'onHoverStart' | 'onHoverEnd' | 'onHoverChange' | 'isPending'>, StyleProps, ActionButtonStyleProps {\n  /** The content to display in the ActionButton. */\n  children?: ReactNode\n}\n\n// These styles handle both ActionButton and ToggleButton\nexport const btnStyles = style<ButtonRenderProps & ActionButtonStyleProps & ToggleButtonStyleProps>({\n  ...focusRing(),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  columnGap: 'text-to-visual',\n  font: 'control',\n  fontWeight: 'medium',\n  userSelect: 'none',\n  height: 'control',\n  minWidth: 'control',\n  transition: 'default',\n  forcedColorAdjust: 'none',\n  backgroundColor: {\n    default: {\n      ...baseColor('gray-100'),\n      default: {\n        default: 'gray-100',\n        isQuiet: 'transparent'\n      }\n    },\n    isSelected: {\n      default: 'neutral',\n      isEmphasized: 'accent',\n      isDisabled: {\n        default: 'gray-100',\n        isQuiet: 'transparent'\n      }\n    },\n    staticColor: {\n      white: {\n        ...baseColor('transparent-white-100'),\n        default: {\n          default: 'transparent-white-100',\n          isQuiet: 'transparent'\n        },\n        isSelected: {\n          default: baseColor('transparent-white-800'),\n          isDisabled: {\n            default: 'transparent-white-100',\n            isQuiet: 'transparent'\n          }\n        }\n      },\n      black: {\n        ...baseColor('transparent-black-100'),\n        default: {\n          default: 'transparent-black-100',\n          isQuiet: 'transparent'\n        },\n        isSelected: {\n          default: baseColor('transparent-black-800'),\n          isDisabled: {\n            default: 'transparent-black-100',\n            isQuiet: 'transparent'\n          }\n        }\n      }\n    },\n    forcedColors: {\n      default: 'ButtonFace',\n      isSelected: {\n        default: 'Highlight',\n        isDisabled: 'ButtonFace'\n      }\n    }\n  },\n  color: {\n    default: 'neutral',\n    isSelected: {\n      default: 'gray-25',\n      isEmphasized: 'white'\n    },\n    isDisabled: 'disabled',\n    staticColor: {\n      white: {\n        default: baseColor('transparent-white-800'),\n        isSelected: 'black',\n        isDisabled: 'transparent-white-400'\n      },\n      black: {\n        default: baseColor('transparent-black-800'),\n        isSelected: 'white',\n        isDisabled: 'transparent-black-400'\n      }\n    },\n    forcedColors: {\n      default: 'ButtonText',\n      isSelected: 'HighlightText',\n      isDisabled: {\n        default: 'GrayText'\n      }\n    }\n  },\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  },\n  outlineColor: {\n    default: 'focus-ring',\n    staticColor: {\n      white: 'white',\n      black: 'black'\n    },\n    forcedColors: 'Highlight'\n  },\n  borderStyle: 'none',\n  paddingX: {\n    default: 'edge-to-text',\n    ':has([slot=icon]:only-child)': 0\n  },\n  paddingY: 0,\n  borderRadius: 'control',\n  '--iconMargin': {\n    type: 'marginTop',\n    value: {\n      default: fontRelative(-2),\n      ':has([slot=icon]:only-child)': 0\n    }\n  },\n  disableTapHighlight: true\n}, getAllowedOverrides());\n\nexport const ActionButtonContext = createContext<ContextValue<ActionButtonProps, FocusableRefValue<HTMLButtonElement>>>(null);\n\nfunction ActionButton(props: ActionButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, ActionButtonContext);\n  props = useFormProps(props as any);\n  let domRef = useFocusableRef(ref);\n  let overlayTriggerState = useContext(OverlayTriggerStateContext);\n\n  return (\n    <RACButton\n      {...props}\n      ref={domRef}\n      style={pressScale(domRef, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + btnStyles({\n        ...renderProps,\n        // Retain hover styles when an overlay is open.\n        isHovered: renderProps.isHovered || overlayTriggerState?.isOpen || false,\n        staticColor: props.staticColor,\n        size: props.size || 'M',\n        isQuiet: props.isQuiet\n      }, props.styles)}>\n      <Provider\n        values={[\n          [SkeletonContext, null],\n          [TextContext, {styles: style({paddingY: '--labelPadding', order: 1, truncate: true})}],\n          [IconContext, {\n            render: centerBaseline({slot: 'icon', styles: style({order: 0})}),\n            styles: style({size: fontRelative(20), marginStart: '--iconMargin', flexShrink: 0})\n          }]\n        ]}>\n        {typeof props.children === 'string' ? <Text>{props.children}</Text> : props.children}\n      </Provider>\n    </RACButton>\n  );\n}\n\n/**\n * ActionButtons allow users to perform an action.\n * Theyâre used for similar, task-based options within a workflow, and are ideal for interfaces where buttons arenât meant to draw a lot of attention.\n */\nlet _ActionButton = forwardRef(ActionButton);\nexport {_ActionButton as ActionButton};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {cloneElement, createContext, CSSProperties, ReactElement, ReactNode, Ref, useCallback, useContext, useRef} from 'react';\nimport {colorToken} from '../style/tokens' with {type: 'macro'};\nimport {mergeRefs} from '@react-aria/utils';\nimport {mergeStyles} from '../style/runtime';\nimport {raw} from '../style/style-macro' with {type: 'macro'};\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleString} from '../style/types';\n\nlet reduceMotion = typeof window?.matchMedia === 'function'\n  ? window.matchMedia('(prefers-reduced-motion: reduce)').matches\n  : false;\n\nexport function useLoadingAnimation(isAnimating: boolean) {\n  let animationRef = useRef<Animation | null>(null);\n  return useCallback((element: HTMLElement | null) => {\n    if (isAnimating && !animationRef.current && element && !reduceMotion) {\n      // Use web animation API instead of CSS animations so that we can\n      // synchronize it between all loading elements on the page (via startTime).\n      animationRef.current = element.animate(\n        [\n          {backgroundPosition: '100%'},\n          {backgroundPosition: '0%'}\n        ],\n        {\n          duration: 2000,\n          iterations: Infinity,\n          easing: 'ease-in-out'\n        }\n      );\n      animationRef.current.startTime = 0;\n    } else if (!isAnimating && animationRef.current) {\n      animationRef.current.cancel();\n      animationRef.current = null;\n    }\n  }, [isAnimating]);\n}\n\nexport type SkeletonElement = ReactElement<{\n  children?: ReactNode,\n  className?: string,\n  ref?: Ref<HTMLElement>,\n  inert?: boolean | 'true'\n}>;\n\nexport const SkeletonContext = createContext<boolean | null>(null);\nexport function useIsSkeleton(): boolean {\n  return useContext(SkeletonContext) || false;\n}\n\nexport interface SkeletonProps {\n  children: ReactNode,\n  isLoading: boolean\n}\n\n/**\n * A Skeleton wraps around content to render it as a placeholder.\n */\nexport function Skeleton({children, isLoading}: SkeletonProps) {\n  // Disable all form components inside a skeleton.\n  return (\n    <SkeletonContext.Provider value={isLoading}>\n      {children}\n    </SkeletonContext.Provider>\n  );\n}\n\nexport const loadingStyle = raw(`\n  background-image: linear-gradient(to right, ${colorToken('gray-100')} 33%, light-dark(${colorToken('gray-25')}, ${colorToken('gray-300')}), ${colorToken('gray-100')} 66%);\n  background-size: 300%;\n  * {\n    visibility: hidden;\n  }\n`, 'UNSAFE_overrides');\n\nexport function useSkeletonText(children: ReactNode, style: CSSProperties | undefined): [ReactNode, CSSProperties | undefined] {\n  let isSkeleton = useContext(SkeletonContext);\n  if (isSkeleton) {\n    children = <SkeletonText>{children}</SkeletonText>;\n    style = {\n      ...style,\n      // This ensures the ellipsis on truncated text is also hidden.\n      // -webkit-text-fill-color overrides any `color` property that is also set.\n      WebkitTextFillColor: 'transparent'\n    };\n  }\n  return [children, style];\n}\n\n// Rendered inside <Text> to create skeleton line boxes via box-decoration-break.\nexport function SkeletonText({children}) {\n  return (\n    <span\n      // @ts-ignore - compatibility with React < 19\n      inert=\"true\"\n      ref={useLoadingAnimation(true)}\n      className={loadingStyle + style({\n        color: 'transparent',\n        boxDecorationBreak: 'clone',\n        borderRadius: 'sm'\n      })}>\n      {children}\n    </span>\n  );\n}\n\n// Clones the child element and displays it with skeleton styling.\nexport function SkeletonWrapper({children}: {children: SkeletonElement}) {\n  let isLoading = useContext(SkeletonContext);\n  let animation = useLoadingAnimation(isLoading || false);\n  if (isLoading == null) {\n    return children;\n  }\n\n  let childRef = 'ref' in children ? children.ref as any : children.props.ref;\n  return (\n    <SkeletonContext.Provider value={null}>\n      {isLoading ? cloneElement(children, {\n        ref: mergeRefs(childRef, animation),\n        className: (children.props.className || '') + ' ' + loadingStyle,\n        inert: 'true'\n      }) : children}\n    </SkeletonContext.Provider>\n  );\n}\n\n// Adds default border radius around icons when displayed in a skeleton.\nexport function useSkeletonIcon(styles: StyleString): StyleString {\n  let isSkeleton = useContext(SkeletonContext);\n  if (isSkeleton) {\n    return mergeStyles(style({borderRadius: 'sm'}), styles);\n  }\n  return styles || '' as StyleString;\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createContext, forwardRef, ReactNode, useContext, useMemo} from 'react';\nimport {DOMRef, SpectrumLabelableProps} from '@react-types/shared';\nimport {getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {Form as RACForm, FormProps as RACFormProps} from 'react-aria-components';\nimport {style} from '../style' with {type: 'macro'};\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useIsSkeleton} from './Skeleton';\n\ninterface FormStyleProps extends Omit<SpectrumLabelableProps, 'label' | 'contextualHelp'> {\n  /**\n   * Size of the Form elements.\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /** Whether the Form elements are disabled. */\n  isDisabled?: boolean,\n  /** Whether the Form elements are rendered with their emphasized style. */\n  isEmphasized?: boolean\n}\n\nexport interface FormProps extends FormStyleProps, Omit<RACFormProps, 'className' | 'style' | 'children'>, StyleProps {\n  children?: ReactNode\n}\n\nexport const FormContext = createContext<FormStyleProps | null>(null);\nexport function useFormProps<T extends FormStyleProps>(props: T): T {\n  let ctx = useContext(FormContext);\n  let isSkeleton = useIsSkeleton();\n  return useMemo(() => {\n    let result: T = props;\n    if (ctx || isSkeleton) {\n      result = {...props};\n    }\n\n    if (ctx) {\n      // This is a subset of mergeProps. We just need to merge non-undefined values.\n      for (let key in ctx) {\n        if (result[key] === undefined) {\n          result[key] = ctx[key];\n        }\n      }\n    }\n\n    // Skeleton always wins over local props.\n    if (isSkeleton) {\n      result.isDisabled = true;\n    }\n\n    return result;\n  }, [ctx, props, isSkeleton]);\n}\n\nfunction Form(props: FormProps, ref: DOMRef<HTMLFormElement>) {\n  let {\n    labelPosition = 'top',\n    labelAlign,\n    necessityIndicator,\n    isRequired,\n    isDisabled,\n    isEmphasized,\n    size = 'M',\n    ...formProps\n  } = props;\n  let domRef = useDOMRef(ref);\n\n  return (\n    <RACForm\n      {...formProps}\n      ref={domRef}\n      style={props.UNSAFE_style}\n      className={(props.UNSAFE_className || '') + style({\n        display: 'grid',\n        gridTemplateColumns: {\n          labelPosition: {\n            top: ['[field] 1fr'],\n            side: ['[label] auto', '[field] 1fr']\n          }\n        },\n        // TODO: confirm when we have tokens\n        rowGap: {\n          size: {\n            XS: 16,\n            S: 20,\n            M: 24,\n            L: 32,\n            XL: 40\n          }\n        },\n        columnGap: 'text-to-control'\n      }, getAllowedOverrides())({labelPosition, size}, props.styles)}>\n      <FormContext.Provider\n        value={{\n          labelPosition,\n          labelAlign,\n          necessityIndicator,\n          isRequired,\n          isDisabled,\n          isEmphasized,\n          size\n        }}>\n        {props.children}\n      </FormContext.Provider>\n    </RACForm>\n  );\n}\n\n/**\n * Forms allow users to enter data that can be submitted while providing alignment and styling for form fields.\n */\nlet _Form = /*#__PURE__*/ forwardRef(Form);\nexport {_Form as Form};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertTriangle from '../s2wf-icons/S2_Icon_AlertTriangle_20_N.svg';\nimport {Button} from './Button';\nimport {ButtonGroup} from './ButtonGroup';\nimport {CenterBaseline} from './CenterBaseline';\nimport {chain} from '@react-aria/utils';\nimport {Content, Heading} from './Content';\nimport {Dialog} from './Dialog';\nimport {DOMProps, DOMRef} from '@react-types/shared';\nimport {forwardRef, ReactNode} from 'react';\nimport {IconContext} from './Icon';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport NoticeSquare from '../s2wf-icons/S2_Icon_AlertDiamond_20_N.svg';\nimport {Provider} from 'react-aria-components';\nimport {style} from '../style' with {type: 'macro'};\nimport {UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface AlertDialogProps extends DOMProps, UnsafeStyles {\n  /** The [visual style](https://spectrum.adobe.com/page/alert-dialog/#Options) of the AlertDialog.  */\n  variant?: 'confirmation' | 'information' | 'destructive' | 'error' | 'warning',\n  /** The title of the AlertDialog. */\n  title: string,\n  /** The contents of the AlertDialog. */\n  children: ReactNode,\n  /** The label to display within the cancel button. */\n  cancelLabel?: string,\n  /** The label to display within the confirm button. */\n  primaryActionLabel: string,\n  /** The label to display within the secondary button. */\n  secondaryActionLabel?: string,\n  /** Whether the primary button is disabled. */\n  isPrimaryActionDisabled?: boolean,\n  /** Whether the secondary button is disabled. */\n  isSecondaryActionDisabled?: boolean,\n  /** Handler that is called when the cancel button is pressed. */\n  onCancel?: () => void,\n  /** Handler that is called when the primary button is pressed. */\n  onPrimaryAction?: () => void,\n  /** Handler that is called when the secondary button is pressed. */\n  onSecondaryAction?: () => void,\n  /** Button to focus by default when the dialog opens. */\n  autoFocusButton?: 'cancel' | 'primary' | 'secondary',\n  /**\n   * The size of the Dialog.\n   *\n   * @default 'M'\n   */\n    size?: 'S' | 'M' | 'L'\n}\n\nconst icon = style({\n  marginEnd: 8,\n  '--iconPrimary': {\n    type: 'fill',\n    value: {\n      variant: {\n        error: 'negative',\n        warning: 'notice'\n      }\n    }\n  }\n});\n\nfunction AlertDialog(props: AlertDialogProps, ref: DOMRef) {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  let {\n    autoFocusButton,\n    cancelLabel,\n    secondaryActionLabel,\n    primaryActionLabel,\n    isSecondaryActionDisabled,\n    isPrimaryActionDisabled,\n    onCancel = () => {},\n    onPrimaryAction = () => {},\n    onSecondaryAction = () => {},\n    title,\n    children,\n    variant = 'confirmation'\n  } = props;\n\n  let buttonVariant = 'primary';\n  if (variant === 'confirmation') {\n    buttonVariant = 'accent';\n  } else if (variant === 'destructive') {\n    buttonVariant = 'negative';\n  }\n\n  return (\n    <Dialog\n      role=\"alertdialog\"\n      ref={ref}\n      size={props.size}\n      UNSAFE_style={props.UNSAFE_style}\n      UNSAFE_className={(props.UNSAFE_className || '')}>\n      {({close}) => (\n        <>\n          <Provider\n            values={[\n              [IconContext, {styles: icon({variant})}]\n            ]}>\n            <Heading slot=\"title\">\n              <CenterBaseline>\n                {variant === 'error' && <AlertTriangle aria-label={stringFormatter.format('dialog.alert')} />}\n                {variant === 'warning' && <NoticeSquare aria-label={stringFormatter.format('dialog.alert')} />}\n                {title}\n              </CenterBaseline>\n            </Heading>\n          </Provider>\n          <Content>{children}</Content>\n          <ButtonGroup>\n            {cancelLabel &&\n              <Button\n                onPress={() => chain(close(), onCancel())}\n                variant=\"secondary\"\n                fillStyle=\"outline\"\n                autoFocus={autoFocusButton === 'cancel'}>\n                {cancelLabel}\n              </Button>\n            }\n            {secondaryActionLabel &&\n              <Button\n                onPress={() => chain(close(), onSecondaryAction())}\n                variant=\"secondary\"\n                isDisabled={isSecondaryActionDisabled}\n                fillStyle=\"outline\"\n                autoFocus={autoFocusButton === 'secondary'}>\n                {secondaryActionLabel}\n              </Button>\n            }\n            <Button\n              variant={buttonVariant as 'primary' | 'accent' | 'negative'}\n              isDisabled={isPrimaryActionDisabled}\n              autoFocus={autoFocusButton === 'primary'}\n              onPress={() => chain(close(), onPrimaryAction())}>\n              {primaryActionLabel}\n            </Button>\n          </ButtonGroup>\n        </>\n      )}\n    </Dialog>\n  );\n}\n\n/**\n * AlertDialogs are a specific type of Dialog. They display important information that users need to acknowledge.\n */\nlet _AlertDialog = forwardRef(AlertDialog);\nexport {_AlertDialog as AlertDialog};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {baseColor, focusRing, fontRelative, size as sizeValue, style} from '../style' with {type: 'macro'};\nimport {ButtonRenderProps, ContextValue, Link, LinkProps, OverlayTriggerStateContext, Provider, Button as RACButton, ButtonProps as RACButtonProps} from 'react-aria-components';\nimport {centerBaseline} from './CenterBaseline';\nimport {centerPadding, getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {createContext, forwardRef, ReactNode, useContext, useEffect, useState} from 'react';\nimport {FocusableRef, FocusableRefValue} from '@react-types/shared';\nimport {IconContext} from './Icon';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {pressScale} from './pressScale';\nimport {ProgressCircle} from './ProgressCircle';\nimport {SkeletonContext} from './Skeleton';\nimport {Text, TextContext} from './Content';\nimport {useFocusableRef} from '@react-spectrum/utils';\nimport {useFormProps} from './Form';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\ninterface ButtonStyleProps {\n  /**\n   * The [visual style](https://spectrum.adobe.com/page/button/#Options) of the button.\n   *\n   * @default 'primary'\n   */\n  variant?: 'primary' | 'secondary' | 'accent' | 'negative',\n  /**\n   * The background style of the Button.\n   *\n   * @default 'fill'\n   */\n  fillStyle?: 'fill' | 'outline',\n  /**\n   * The size of the Button.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /** The static color style to apply. Useful when the Button appears over a color background. */\n  staticColor?: 'white' | 'black'\n}\n\nexport interface ButtonProps extends Omit<RACButtonProps, 'className' | 'style' | 'children' | 'onHover' | 'onHoverStart' | 'onHoverEnd' | 'onHoverChange'>, StyleProps, ButtonStyleProps {\n  /** The content to display in the Button. */\n  children?: ReactNode\n}\n\nexport interface LinkButtonProps extends Omit<LinkProps, 'className' | 'style' | 'children'>, StyleProps, ButtonStyleProps {\n  /** The content to display in the Button. */\n  children?: ReactNode\n}\n\nexport const ButtonContext = createContext<ContextValue<ButtonProps, FocusableRefValue<HTMLButtonElement>>>(null);\nexport const LinkButtonContext = createContext<ContextValue<ButtonProps, FocusableRefValue<HTMLAnchorElement>>>(null);\n\nconst iconOnly = ':has([slot=icon]):not(:has([data-rsp-slot=text]))';\nconst button = style<ButtonRenderProps & ButtonStyleProps>({\n  ...focusRing(),\n  position: 'relative',\n  display: 'flex',\n  alignItems: {\n    default: 'baseline',\n    [iconOnly]: 'center'\n  },\n  justifyContent: 'center',\n  textAlign: 'start',\n  columnGap: 'text-to-visual',\n  font: 'control',\n  fontWeight: 'bold',\n  userSelect: 'none',\n  minHeight: 'control',\n  minWidth: {\n    [iconOnly]: 'control'\n  },\n  borderRadius: 'pill',\n  boxSizing: 'border-box',\n  width: 'fit',\n  textDecoration: 'none', // for link buttons\n  paddingX: {\n    default: 'pill',\n    [iconOnly]: 0\n  },\n  paddingY: 0,\n  aspectRatio: {\n    [iconOnly]: 'square'\n  },\n  transition: 'default',\n  borderStyle: 'solid',\n  borderWidth: {\n    fillStyle: {\n      fill: 0,\n      outline: 2\n    }\n  },\n  '--labelPadding': {\n    type: 'paddingTop',\n    value: centerPadding()\n  },\n  '--iconMargin': {\n    type: 'marginTop',\n    value: {\n      default: fontRelative(-2),\n      [iconOnly]: 0\n    }\n  },\n  borderColor: {\n    variant: {\n      primary: baseColor('gray-800'),\n      secondary: baseColor('gray-300')\n    },\n    isDisabled: 'disabled',\n    staticColor: {\n      white: {\n        variant: {\n          primary: baseColor('transparent-white-800'),\n          secondary: baseColor('transparent-white-300')\n        },\n        isDisabled: 'transparent-white-300'\n      },\n      black: {\n        variant: {\n          primary: baseColor('transparent-black-800'),\n          secondary: baseColor('transparent-black-300')\n        },\n        isDisabled: 'transparent-black-300'\n      }\n    },\n    forcedColors: {\n      default: 'ButtonBorder',\n      isHovered: 'Highlight',\n      isDisabled: 'GrayText'\n    }\n  },\n  backgroundColor: {\n    fillStyle: {\n      fill: {\n        variant: {\n          primary: 'neutral',\n          secondary: baseColor('gray-100'),\n          accent: 'accent',\n          negative: 'negative'\n        },\n        isDisabled: 'disabled'\n      },\n      outline: {\n        default: 'transparent',\n        isHovered: 'gray-100',\n        isPressed: 'gray-100',\n        isFocusVisible: 'gray-100',\n        isDisabled: 'transparent'\n      }\n    },\n    staticColor: {\n      white: {\n        fillStyle: {\n          fill: {\n            variant: {\n              primary: baseColor('transparent-white-800'),\n              secondary: baseColor('transparent-white-100')\n            },\n            isDisabled: 'transparent-white-100'\n          },\n          outline: {\n            default: 'transparent',\n            isHovered: 'transparent-white-100',\n            isPressed: 'transparent-white-100',\n            isFocusVisible: 'transparent-white-100',\n            isDisabled: 'transparent'\n          }\n        }\n      },\n      black: {\n        fillStyle: {\n          fill: {\n            variant: {\n              primary: baseColor('transparent-black-800'),\n              secondary: baseColor('transparent-black-100')\n            },\n            isDisabled: 'transparent-black-100'\n          },\n          outline: {\n            default: 'transparent',\n            isHovered: 'transparent-black-100',\n            isPressed: 'transparent-black-100',\n            isFocusVisible: 'transparent-black-100',\n            isDisabled: 'transparent'\n          }\n        }\n      }\n    },\n    forcedColors: {\n      fillStyle: {\n        fill: {\n          default: 'ButtonText',\n          isHovered: 'Highlight',\n          isDisabled: 'GrayText'\n        },\n        outline: 'ButtonFace'\n      }\n    }\n  },\n  color: {\n    fillStyle: {\n      fill: {\n        variant: {\n          primary: 'gray-25',\n          secondary: 'neutral',\n          accent: 'white',\n          negative: 'white'\n        },\n        isDisabled: 'disabled'\n      },\n      outline: {\n        default: 'neutral',\n        isDisabled: 'disabled'\n      }\n    },\n    staticColor: {\n      white: {\n        fillStyle: {\n          fill: {\n            variant: {\n              primary: 'black',\n              secondary: baseColor('transparent-white-800')\n            }\n          },\n          outline: baseColor('transparent-white-800')\n        },\n        isDisabled: 'transparent-white-400'\n      },\n      black: {\n        fillStyle: {\n          fill: {\n            variant: {\n              primary: 'white',\n              secondary: baseColor('transparent-black-800')\n            }\n          },\n          outline: baseColor('transparent-black-800')\n        },\n        isDisabled: 'transparent-black-400'\n      }\n    },\n    forcedColors: {\n      fillStyle: {\n        fill: {\n          default: 'ButtonFace',\n          isDisabled: 'HighlightText'\n        },\n        outline: {\n          default: 'ButtonText',\n          isDisabled: 'GrayText'\n        }\n      }\n    }\n  },\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  },\n  outlineColor: {\n    default: 'focus-ring',\n    staticColor: {\n      white: 'white',\n      black: 'black'\n    },\n    forcedColors: 'Highlight'\n  },\n  forcedColorAdjust: 'none',\n  disableTapHighlight: true\n}, getAllowedOverrides());\n\nfunction Button(props: ButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, ButtonContext);\n  props = useFormProps(props);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  let {\n    isPending,\n    variant = 'primary',\n    fillStyle = 'fill',\n    size = 'M',\n    staticColor\n  } = props;\n  let domRef = useFocusableRef(ref);\n  let overlayTriggerState = useContext(OverlayTriggerStateContext);\n\n  let [isProgressVisible, setIsProgressVisible] = useState(false);\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>;\n\n    if (isPending) {\n      // Start timer when isPending is set to true.\n      timeout = setTimeout(() => {\n        setIsProgressVisible(true);\n      }, 1000);\n    } else {\n      // Exit loading state when isPending is set to false. */\n      setIsProgressVisible(false);\n    }\n    return () => {\n      // Clean up on unmount or when user removes isPending prop before entering loading state.\n      clearTimeout(timeout);\n    };\n  }, [isPending]);\n\n  return (\n    <RACButton\n      {...props}\n      ref={domRef}\n      style={pressScale(domRef, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + button({\n        ...renderProps,\n        // Retain hover styles when an overlay is open.\n        isHovered: renderProps.isHovered || overlayTriggerState?.isOpen || false,\n        isDisabled: renderProps.isDisabled || isProgressVisible,\n        variant,\n        fillStyle,\n        size,\n        staticColor\n      }, props.styles)}>\n      <Provider\n        values={[\n          [SkeletonContext, null],\n          [TextContext, {\n            styles: style({\n              paddingY: '--labelPadding',\n              order: 1,\n              opacity: {\n                default: 1,\n                isProgressVisible: 0\n              }\n            })({isProgressVisible}),\n            // @ts-ignore data-attributes allowed on all JSX elements, but adding to DOMProps has been problematic in the past\n            'data-rsp-slot': 'text'\n          }],\n          [IconContext, {\n            render: centerBaseline({slot: 'icon', styles: style({order: 0})}),\n            styles: style({\n              size: fontRelative(20),\n              marginStart: '--iconMargin',\n              flexShrink: 0,\n              opacity: {\n                default: 1,\n                isProgressVisible: 0\n              }\n            })({isProgressVisible})\n          }]\n        ]}>\n        {typeof props.children === 'string' ? <Text>{props.children}</Text> : props.children}\n        {isPending &&\n          <div\n            className={style({\n              position: 'absolute',\n              top: '[50%]',\n              left: '[50%]',\n              transform: 'translate(-50%, -50%)',\n              opacity: {\n                default: 0,\n                isProgressVisible: 1\n              }\n            })({isProgressVisible, isPending})}>\n            <ProgressCircle\n              isIndeterminate\n              aria-label={stringFormatter.format('button.pending')}\n              size=\"S\"\n              staticColor={staticColor}\n              styles={style({\n                size: {\n                  size: {\n                    S: sizeValue(14),\n                    M: sizeValue(18),\n                    L: 20,\n                    XL: 24\n                  }\n                }\n              })({size})} />\n          </div>\n        }\n      </Provider>\n    </RACButton>\n  );\n}\n\n/**\n * Buttons allow users to perform an action.\n * They have multiple styles for various needs, and are ideal for calling attention to\n * where a user needs to do something in order to move forward in a flow.\n */\nlet _Button = forwardRef(Button);\nexport {_Button as Button};\n\nfunction LinkButton(props: LinkButtonProps, ref: FocusableRef<HTMLAnchorElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, LinkButtonContext);\n  props = useFormProps(props);\n  let domRef = useFocusableRef(ref);\n  let overlayTriggerState = useContext(OverlayTriggerStateContext);\n\n  return (\n    <Link\n      {...props}\n      ref={domRef}\n      style={pressScale(domRef, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + button({\n        ...renderProps,\n        // Retain hover styles when an overlay is open.\n        isHovered: renderProps.isHovered || overlayTriggerState?.isOpen || false,\n        variant: props.variant || 'primary',\n        fillStyle: props.fillStyle || 'fill',\n        size: props.size || 'M',\n        staticColor: props.staticColor,\n        isPending: false\n      }, props.styles)}>\n      <Provider\n        values={[\n          [SkeletonContext, null],\n          [TextContext, {\n            styles: style({paddingY: '--labelPadding', order: 1}),\n            // @ts-ignore data-attributes allowed on all JSX elements, but adding to DOMProps has been problematic in the past\n            'data-rsp-slot': 'text'\n          }],\n          [IconContext, {\n            render: centerBaseline({slot: 'icon', styles: style({order: 0})}),\n            styles: style({size: fontRelative(20), marginStart: '--iconMargin', flexShrink: 0})\n          }]\n        ]}>\n        {typeof props.children === 'string' ? <Text>{props.children}</Text> : props.children}\n      </Provider>\n    </Link>\n  );\n}\n\n/**\n * A LinkButton combines the functionality of a link with the appearance of a button. Useful for allowing users to navigate to another page.\n */\nlet _LinkButton = forwardRef(LinkButton);\nexport {_LinkButton as LinkButton};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ContextValue, ProgressBar as RACProgressBar, ProgressBarProps as RACProgressBarProps} from 'react-aria-components';\nimport {createContext, forwardRef} from 'react';\nimport {DOMRef, DOMRefValue} from '@react-types/shared';\nimport {getAllowedOverrides, StylesPropWithHeight, UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {keyframes} from '../style/style-macro' with {type: 'macro'};\nimport {style} from '../style' with {type: 'macro'};\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface ProgressCircleStyleProps {\n  /**\n   * The size of the ProgressCircle.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L',\n  /** The static color style to apply. Useful when the button appears over a color background. */\n  staticColor?: 'black' | 'white',\n  /**\n   * Whether presentation is indeterminate when progress isn't known.\n   */\n  isIndeterminate?: boolean\n}\n\nexport const ProgressCircleContext = createContext<ContextValue<ProgressCircleProps, DOMRefValue<HTMLDivElement>>>(null);\n\n// Double check the types passed to each style, may not need all for each\nconst wrapper = style<ProgressCircleStyleProps>({\n  size: {\n    default: 32,\n    size: {\n      S: 16,\n      L: 64\n    }\n  },\n  aspectRatio: 'square'\n}, getAllowedOverrides({height: true}));\n\nconst track = style<ProgressCircleStyleProps>({\n  stroke: {\n    default: 'gray-300',\n    staticColor: {\n      white: 'transparent-white-300',\n      black: 'transparent-black-300'\n    },\n    forcedColors: 'Background'\n  }\n});\n\nconst fill = style<ProgressCircleStyleProps>({\n  stroke: {\n    default: 'blue-900',\n    staticColor: {\n      white: 'transparent-white-900',\n      black: 'transparent-black-900'\n    },\n    forcedColors: 'Highlight'\n  },\n  rotate: -90,\n  transformOrigin: 'center'\n});\n\nexport interface ProgressCircleProps extends Omit<RACProgressBarProps, 'children' | 'style' | 'valueLabel' | 'formatOptions' | 'label' | 'className'>, ProgressCircleStyleProps, UnsafeStyles {\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: StylesPropWithHeight\n}\n\nconst rotationAnimation = keyframes(`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`);\n\n// stroke-dashoffset represents `100 - percentage`. See below for how this works.\nconst dashoffsetAnimation = keyframes(`\n  0%, 100% {\n    stroke-dashoffset: 75;\n  }\n\n  30% {\n    stroke-dashoffset: 20;\n  }\n`);\n\nfunction ProgressCircle(props: ProgressCircleProps, ref: DOMRef<HTMLDivElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, ProgressCircleContext);\n  let {\n    size = 'M',\n    staticColor,\n    UNSAFE_style,\n    UNSAFE_className = ''\n  } = props;\n  let domRef = useDOMRef(ref);\n\n  let strokeWidth = 3;\n  if (size === 'S') {\n    strokeWidth = 2;\n  } else if (size === 'L') {\n    strokeWidth = 4;\n  }\n\n  // SVG strokes are centered, so subtract half the stroke width from the radius to create an inner stroke.\n  let radius = `calc(50% - ${strokeWidth / 2}px)`;\n\n  return (\n    <RACProgressBar\n      {...props}\n      ref={domRef}\n      style={UNSAFE_style}\n      className={renderProps => UNSAFE_className + wrapper({\n        ...renderProps,\n        size\n      }, props.styles)}>\n      {({percentage, isIndeterminate}) => (\n        <svg\n          fill=\"none\"\n          width=\"100%\"\n          height=\"100%\">\n          <circle\n            cx=\"50%\"\n            cy=\"50%\"\n            r={radius}\n            strokeWidth={strokeWidth}\n            className={track({staticColor})} />\n          <circle\n            cx=\"50%\"\n            cy=\"50%\"\n            r={radius}\n            strokeWidth={strokeWidth}\n            className={fill({staticColor})}\n            style={{\n              // These cubic-bezier timing functions were derived from the previous animation keyframes\n              // using a best fit algorithm, and then manually adjusted to approximate the original animation.\n              animation: isIndeterminate ? `${rotationAnimation} 1s cubic-bezier(.6, .1, .3, .9) infinite, ${dashoffsetAnimation} 1s cubic-bezier(.25, .1, .25, 1.3) infinite` : undefined\n            }}\n            // Normalize the path length to 100 so we can easily set stroke-dashoffset to a percentage.\n            pathLength=\"100\"\n            // Add extra gap between dashes so 0% works in Chrome.\n            strokeDasharray=\"100 200\"\n            strokeDashoffset={isIndeterminate || percentage == null ? undefined : 100 - percentage}\n            strokeLinecap=\"round\" />\n        </svg>\n      )}\n    </RACProgressBar>\n  );\n}\n\n/**\n * ProgressCircles show the progression of a system operation such as downloading, uploading, or processing, in a visual way.\n * They can represent determinate or indeterminate progress.\n */\nlet _ProgressCircle = /*#__PURE__*/ forwardRef(ProgressCircle);\nexport {_ProgressCircle as ProgressCircle};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ButtonContext, LinkButtonContext} from './Button';\nimport {ContextValue, Provider, SlotProps} from 'react-aria-components';\nimport {createContext, forwardRef, ReactNode, useCallback, useRef} from 'react';\nimport {DOMProps, DOMRef, DOMRefValue} from '@react-types/shared';\nimport {getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {style} from '../style' with {type: 'macro'};\nimport {\n  useDOMRef,\n  useResizeObserver\n} from '@react-spectrum/utils';\nimport {useLayoutEffect, useValueEffect} from '@react-aria/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\ninterface ButtonGroupStyleProps {\n  /**\n   * The axis the ButtonGroup should align with. Setting this to 'vertical' will prevent\n   * any switching behaviors between 'vertical' and 'horizontal'.\n   *\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical',\n  /**\n   * The alignment of the Buttons within the ButtonGroup.\n   *\n   * @default 'start'\n   */\n  align?: 'start' | 'end' | 'center',\n  /**\n   * The size of the Buttons within the ButtonGroup.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL'\n}\n\nexport interface ButtonGroupProps extends ButtonGroupStyleProps, SlotProps, StyleProps, DOMProps {\n  /** The Buttons contained within the ButtonGroup. */\n  children: ReactNode,\n  /** Whether the Buttons in the ButtonGroup are all disabled. */\n  isDisabled?: boolean\n}\n\ninterface ButtonGroupContextValue extends Partial<ButtonGroupProps> {\n  /** Whether the ButtonGroup shouldn't be rendered. */\n  isHidden?: boolean\n}\n\nexport const ButtonGroupContext = createContext<ContextValue<ButtonGroupContextValue, DOMRefValue<HTMLDivElement>>>({});\n\nconst buttongroup = style<ButtonGroupStyleProps>({\n  display: 'inline-flex',\n  position: 'relative',\n  gap: {\n    size: {\n      S: 8,\n      M: 12,\n      L: 12,\n      XL: 12\n    }\n  },\n  flexDirection: {\n    default: 'row',\n    orientation: {\n      vertical: 'column'\n    }\n  },\n  alignItems: {\n    default: 'center',\n    orientation: {\n      vertical: {\n        default: 'start',\n        align: {\n          end: 'end',\n          center: 'center'\n        }\n      }\n    }\n  },\n  justifyContent: {\n    orientation: {\n      vertical: {\n        default: 'start',\n        align: {\n          end: 'end',\n          center: 'center'\n        }\n      }\n    }\n  }\n}, getAllowedOverrides());\n\nfunction ButtonGroup(props: ButtonGroupProps, ref: DOMRef<HTMLDivElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, ButtonGroupContext);\n  let domRef = useDOMRef(ref);\n  let {\n    size = 'M',\n    orientation = 'horizontal',\n    align = 'start',\n    children,\n    isDisabled\n  } = props;\n\n  let [hasOverflow, setHasOverflow] = useValueEffect(false);\n\n  let checkForOverflow = useCallback(() => {\n    let computeHasOverflow = () => {\n      if (domRef.current && orientation === 'horizontal') {\n        let buttonGroupChildren = Array.from(domRef.current.children) as HTMLElement[];\n        let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors\n        // If any buttons have negative X positions (align=\"end\") or extend beyond\n        // the width of the button group (align=\"start\"), then switch to vertical.\n        if (buttonGroupChildren.some(child => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX)) {\n          return true;\n        }\n        return false;\n      }\n    };\n    if (orientation === 'horizontal') {\n      setHasOverflow(function* () {\n        // Force to horizontal for measurement.\n        yield false;\n\n        // Measure, and update if there is overflow.\n        yield computeHasOverflow();\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [domRef, orientation, setHasOverflow, children]);\n\n  // There are two main reasons we need to remeasure:\n  // 1. Internal changes: Check for initial overflow or when orientation/scale/children change (from checkForOverflow dep array)\n  useLayoutEffect(() => {\n    checkForOverflow();\n  }, [checkForOverflow]);\n\n  // 2. External changes: buttongroup won't change size due to any parents changing size, so listen to its container for size changes to figure out if we should remeasure\n  let parent = useRef<HTMLElement | null>(null);\n  useLayoutEffect(() => {\n    if (domRef.current) {\n      parent.current = domRef.current.parentElement as HTMLElement;\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [domRef.current]);\n  useResizeObserver({ref: parent, onResize: checkForOverflow});\n\n  if ((props as ButtonGroupContextValue).isHidden) {\n    return null;\n  }\n\n  let context = {styles: style({flexShrink: 0}), size, isDisabled};\n  return (\n    <div\n      ref={domRef}\n      style={props.UNSAFE_style}\n      className={(props.UNSAFE_className || '') + buttongroup({\n        align,\n        orientation: orientation === 'vertical' || hasOverflow ? 'vertical' : 'horizontal',\n        size\n      }, props.styles)}>\n      <Provider\n        values={[\n          [ButtonContext, context],\n          [LinkButtonContext, context]\n        ]}>\n        {children}\n      </Provider>\n    </div>\n  );\n}\n\n/**\n * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.\n */\nconst _ButtonGroup = forwardRef(ButtonGroup);\nexport {_ButtonGroup as ButtonGroup};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PopoverProps as AriaPopoverProps, composeRenderProps, OverlayTriggerStateContext, Provider, Dialog as RACDialog, DialogProps as RACDialogProps} from 'react-aria-components';\nimport {ButtonGroupContext} from './ButtonGroup';\nimport {CloseButton} from './CloseButton';\nimport {ContentContext, FooterContext, HeaderContext, HeadingContext} from './Content';\nimport {createContext, forwardRef, RefObject, useContext} from 'react';\nimport {DOMRef} from '@react-types/shared';\nimport {ImageContext} from './Image';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {Modal} from './Modal';\nimport {Popover} from './Popover';\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleProps} from './style-utils';\nimport {useDOMRef, useMediaQuery} from '@react-spectrum/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\n// TODO: what style overrides should be allowed?\nexport interface DialogProps extends Omit<RACDialogProps, 'className' | 'style'>, StyleProps {\n  /**\n   * Whether the Dialog is dismissable.\n   */\n  isDismissable?: boolean,\n  /**\n   * The size of the Dialog.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L'\n}\n\nconst image = style({\n  width: 'full',\n  height: '[140px]',\n  objectFit: 'cover'\n});\n\nconst heading = style({\n  flexGrow: 1,\n  marginY: 0,\n  font: 'heading'\n});\n\nconst header = style({\n  font: 'body-lg'\n});\n\nconst content =  style({\n  flexGrow: 1,\n  overflowY: {\n    default: 'auto',\n    // Make the whole dialog scroll rather than only the content when the height it small.\n    '@media (height < 400)': 'visible',\n    type: {\n      popover: 'visible'\n    }\n  },\n  font: 'body',\n  // TODO: adjust margin on mobile?\n  marginX: {\n    default: 32\n  }\n});\n\nconst footer = style({\n  flexGrow: 1,\n  font: 'body'\n});\n\nconst buttonGroup = style({\n  marginStart: 'auto',\n  maxWidth: 'full'\n});\n\ninterface DialogContextValue extends Pick<AriaPopoverProps, 'placement' | 'shouldFlip' | 'containerPadding' | 'offset' | 'crossOffset'> {\n  /**\n   * The type of Dialog that should be rendered.\n   */\n  type?: 'modal' | 'popover' | 'fullscreen' | 'fullscreenTakeover', // TODO: add tray back in\n  /**\n   * Whether a modal type Dialog should be dismissable.\n   */\n  isDismissable?: boolean,\n  /**\n   * Whether a popover type Dialog's arrow should be hidden.\n   */\n  hideArrow?: boolean,\n  /**\n   * Whether pressing the escape key to close the dialog should be disabled.\n   */\n  isKeyboardDismissDisabled?: boolean\n}\n\nexport const DialogContext = createContext<DialogContextValue>({\n  type: 'modal',\n  isDismissable: false,\n  hideArrow: false,\n  shouldFlip: true,\n  isKeyboardDismissDisabled: false\n});\n\nfunction Dialog(props: DialogProps, ref: DOMRef) {\n  let ctx = useContext(DialogContext);\n  let isDismissable = ctx.isDismissable || props.isDismissable;\n  let isKeyboardDismissDisabled = ctx.isKeyboardDismissDisabled;\n  let domRef = useDOMRef(ref);\n\n  switch (ctx.type) {\n    case 'modal':\n    case 'fullscreen':\n    case 'fullscreenTakeover': {\n      let size = ctx.type === 'modal' ? props.size : ctx.type;\n      return (\n        <Modal size={size} isDismissable={isDismissable} isKeyboardDismissDisabled={isKeyboardDismissDisabled}>\n          <DialogInner {...props} {...ctx} dialogRef={domRef} isDismissable={isDismissable} />\n        </Modal>\n      );\n    }\n    case 'popover':\n      // get hideArrow from dialog instead?\n      return (\n        <Popover size={props.size || 'M'} hideArrow={ctx.hideArrow} placement={ctx.placement} shouldFlip={ctx.shouldFlip} containerPadding={ctx.containerPadding} offset={ctx.offset} crossOffset={ctx.crossOffset}>\n          <DialogInner {...props} {...ctx} dialogRef={domRef} isDismissable={isDismissable} />\n        </Popover>\n      );\n\n    // TODO: popover/tray\n    // how do we want to do popover, v3 dialogtrigger rendered it, not the dialog\n    // in addition, how do we want to handle the margins that dialog currently imposes, just change them to 0 for popover?\n    // in order for the dialog to contain scrolling behavior, we'd need to follow what i did for menu otherwise the internal padding\n    // of the popover will squish the scrollable content area and the scroll bar will appear to be inside instead of part of the popover\n  }\n}\n\n/**\n * Dialogs are windows containing contextual information, tasks, or workflows that appear over the user interface.\n * Depending on the kind of Dialog, further interactions may be blocked until the Dialog is acknowledged.\n */\nlet _Dialog = forwardRef(Dialog);\nexport {_Dialog as Dialog};\n\nexport const dialogInner = style({\n  display: 'flex',\n  flexDirection: 'column',\n  flexGrow: 1,\n  maxHeight: '[inherit]',\n  boxSizing: 'border-box',\n  outlineStyle: 'none',\n  fontFamily: 'sans',\n  borderRadius: '[inherit]',\n  overflow: 'auto'\n});\n\nfunction DialogInner(props: DialogProps & DialogContextValue & {dialogRef: RefObject<HTMLElement | null>}) {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  // The button group in fullscreen dialogs usually goes at the top, but\n  // when the window is small, it moves to the bottom. We could do this in\n  // pure CSS with display: none, but then the ref would go to two places.\n  // With JS we can actually unmount on of them to ensure there is only one at a time.\n  // Hopefully apps don't SSR render a dialog that's already open, because this means\n  // we don't evaluate the media query until JS loads.\n  let isSmall = useMediaQuery('(max-width: 640px)');\n  let buttonGroupPlacement = 'bottom';\n  if (props.type === 'fullscreen' || props.type === 'fullscreenTakeover') {\n    buttonGroupPlacement = isSmall ? 'bottom' : 'top';\n  }\n\n  if (props.isDismissable) {\n    buttonGroupPlacement = 'none';\n  }\n\n  // TODO: manage focus when the button group placement changes and focus was on one of the buttons?\n\n  return (\n    <RACDialog\n      {...props}\n      ref={props.dialogRef}\n      style={props.UNSAFE_style}\n      className={(props.UNSAFE_className || '') + dialogInner}>\n      {composeRenderProps(props.children, (children, {close}) => (\n        // Render the children multiple times inside the wrappers we need to implement the layout.\n        // Each instance hides certain children so that they are all rendered in the correct locations.\n        // Reset OverlayTriggerStateContext so the buttons inside the dialog don't retain their hover state.\n        <OverlayTriggerStateContext.Provider value={null}>\n          {/* Hero image */}\n          <Provider\n            values={[\n              [ImageContext, {styles: image}],\n              [HeadingContext, {isHidden: true}],\n              [HeaderContext, {isHidden: true}],\n              [ContentContext, {isHidden: true}],\n              [FooterContext, {isHidden: true}],\n              [ButtonGroupContext, {isHidden: true}]\n            ]}>\n            {children}\n          </Provider>\n          {/* Top header: heading, header, dismiss button, and button group (in fullscreen dialogs). */}\n          <div\n            className={style({\n              // Wrapper that creates the margin for the dismiss button.\n              display: 'flex',\n              alignItems: 'start',\n              columnGap: 12,\n              marginStart: {\n                default: 32\n              },\n              marginEnd: {\n                default: 32,\n                isDismissable: 12\n              },\n              marginTop: {\n                default: 12 // margin to dismiss button\n              }\n            })({isDismissable: props.isDismissable, type: props.type})}>\n            <div\n              className={style({\n                // Wrapper for heading, header, and button group.\n                // This swaps orientation from horizontal to vertical at small screen sizes.\n                display: 'flex',\n                flexGrow: 1,\n                marginTop: {\n                  default: 20, // 32 - 12 (handled above)\n                  ':empty': 0\n                },\n                marginBottom: {\n                  default: 16,\n                  ':empty': 0\n                },\n                columnGap: 24,\n                rowGap: 8,\n                flexDirection: {\n                  default: 'column',\n                  sm: 'row'\n                },\n                alignItems: {\n                  default: 'start',\n                  sm: 'center'\n                }\n              })}>\n              <Provider\n                values={[\n                  [ImageContext, {hidden: true}],\n                  [HeadingContext, {styles: heading}],\n                  [HeaderContext, {styles: header}],\n                  [ContentContext, {isHidden: true}],\n                  [FooterContext, {isHidden: true}],\n                  [ButtonGroupContext, {isHidden: buttonGroupPlacement !== 'top'}]\n                ]}>\n                {children}\n              </Provider>\n            </div>\n            {props.isDismissable &&\n            <CloseButton aria-label={stringFormatter.format('dialog.dismiss')} onPress={close} styles={style({marginBottom: 12})} />\n          }\n          </div>\n          {/* Main content */}\n          <Provider\n            values={[\n              [ImageContext, {hidden: true}],\n              [HeadingContext, {isHidden: true}],\n              [HeaderContext, {isHidden: true}],\n              [ContentContext, {styles: content({type: props.type})}],\n              [FooterContext, {isHidden: true}],\n              [ButtonGroupContext, {isHidden: true}]\n            ]}>\n            {children}\n          </Provider>\n          {/* Footer and button group */}\n          <div\n            className={style({\n              display: 'flex',\n              paddingX: {\n                default: 32\n              },\n              paddingBottom: {\n                default: 32\n              },\n              paddingTop: {\n                default: 32,\n                ':empty': 0\n              },\n              gap: 24,\n              alignItems: 'center',\n              flexWrap: 'wrap'\n            })}>\n            <Provider\n              values={[\n                [ImageContext, {hidden: true}],\n                [HeadingContext, {isHidden: true}],\n                [HeaderContext, {isHidden: true}],\n                [ContentContext, {isHidden: true}],\n                [FooterContext, {styles: footer}],\n                [ButtonGroupContext, {isHidden: buttonGroupPlacement !== 'bottom', styles: buttonGroup, align: 'end'}]\n              ]}>\n              {children}\n            </Provider>\n          </div>\n        </OverlayTriggerStateContext.Provider>\n      ))}\n    </RACDialog>\n  );\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {baseColor, focusRing, style} from '../style' with {type: 'macro'};\nimport {Button, ButtonProps} from 'react-aria-components';\nimport CrossIcon from '../ui-icons/Cross';\nimport {FocusableRef} from '@react-types/shared';\nimport {forwardRef} from 'react';\nimport {getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {pressScale} from './pressScale';\nimport {useFocusableRef} from '@react-spectrum/utils';\n\ninterface CloseButtonProps extends Omit<ButtonProps, 'className' | 'style' | 'children'>, StyleProps {\n  /**\n   * The size of the CloseButton.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /** The static color style to apply. Useful when the Button appears over a color background. */\n  staticColor?: 'white' | 'black'\n}\n\nconst hoverBackground = {\n  default: 'gray-100',\n  staticColor: {\n    white: 'transparent-white-100',\n    black: 'transparent-black-100'\n  }\n} as const;\n\nconst styles = style({\n  ...focusRing(),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  size: 'control',\n  borderRadius: 'full',\n  padding: 0,\n  borderStyle: 'none',\n  transition: 'default',\n  backgroundColor: {\n    default: 'transparent',\n    isHovered: hoverBackground,\n    isFocusVisible: hoverBackground,\n    isPressed: hoverBackground\n  },\n  '--iconPrimary': {\n    type: 'color',\n    value: {\n      default: 'neutral',\n      isDisabled: 'disabled',\n      staticColor: {\n        white: {\n          default: baseColor('transparent-white-800'),\n          isDisabled: 'transparent-white-400'\n        },\n        black: {\n          default: baseColor('transparent-black-800'),\n          isDisabled: 'transparent-black-400'\n        }\n      }\n    }\n  },\n  outlineColor: {\n    default: 'focus-ring',\n    staticColor: {\n      white: 'white',\n      black: 'black'\n    },\n    forcedColors: 'Highlight'\n  }\n}, getAllowedOverrides());\n\nfunction CloseButton(props: CloseButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  let {UNSAFE_style, UNSAFE_className = ''} = props;\n  let domRef = useFocusableRef(ref);\n  return (\n    <Button\n      {...props}\n      ref={domRef}\n      style={pressScale(domRef, UNSAFE_style)}\n      className={renderProps => UNSAFE_className + styles(renderProps, props.styles)}>\n      <CrossIcon size={({S: 'L', M: 'XL', L: 'XXL', XL: 'XXXL'} as const)[props.size || 'M']} />\n    </Button>\n  );\n}\n\nlet _CloseButton = forwardRef(CloseButton);\nexport {_CloseButton as CloseButton};\n","import {ContextValue, SlotProps} from 'react-aria-components';\nimport {createContext, ForwardedRef, forwardRef, HTMLAttributeReferrerPolicy, ReactNode, useCallback, useContext, useMemo, useReducer, useRef} from 'react';\nimport {DefaultImageGroup, ImageGroup} from './ImageCoordinator';\nimport {loadingStyle, useIsSkeleton, useLoadingAnimation} from './Skeleton';\nimport {mergeStyles} from '../style/runtime';\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleString} from '../style/types';\nimport {UnsafeStyles} from './style-utils';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface ImageProps extends UnsafeStyles, SlotProps {\n  /** The URL of the image. */\n  src?: string,\n  // TODO\n  // srcSet?: string,\n  // sizes?: string,\n  /** Accessible alt text for the image. */\n  alt?: string,\n  /**\n   * Indicates if the fetching of the image must be done using a CORS request.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin).\n   */\n  crossOrigin?: 'anonymous' | 'use-credentials',\n  /**\n   * Whether the browser should decode images synchronously or asynchronously.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#decoding).\n   */\n  decoding?: 'async' | 'auto' | 'sync',\n  // Only supported in React 19...\n  // fetchPriority?: 'high' | 'low' | 'auto',\n  /**\n   * Whether the image should be loaded immediately or lazily when scrolled into view.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#loading).\n   */\n  loading?: 'eager' | 'lazy',\n  /**\n   * A string indicating which referrer to use when fetching the resource.\n   * [See MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#referrerpolicy).\n   */\n  referrerPolicy?: HTMLAttributeReferrerPolicy,\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: StyleString,\n  /** A function that is called to render a fallback when the image fails to load. */\n  renderError?: () => ReactNode,\n  /**\n   * A group of images to coordinate between, matching the group passed to the `<ImageCoordinator>` component.\n   * If not provided, the default image group is used.\n   */\n  group?: ImageGroup\n}\n\ninterface ImageContextValue extends ImageProps {\n  hidden?: boolean\n}\n\nexport const ImageContext = createContext<ContextValue<ImageContextValue, HTMLDivElement>>(null);\n\ntype ImageState = 'loading' | 'loaded' | 'revealed' | 'error';\ninterface State {\n  state: ImageState,\n  src: string,\n  startTime: number,\n  loadTime: number\n}\n\ntype Action = \n  | {type: 'update', src: string}\n  | {type: 'loaded'}\n  | {type: 'revealed'}\n  | {type: 'error'};\n\nfunction createState(src: string): State {\n  return {\n    state: 'loading',\n    src,\n    startTime: Date.now(),\n    loadTime: 0\n  };\n} \n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'update': {\n      return {\n        state: 'loading',\n        src: action.src,\n        startTime: Date.now(),\n        loadTime: 0\n      };\n    }\n    case 'loaded':\n    case 'error': {\n      return {\n        ...state,\n        state: action.type\n      };\n    }\n    case 'revealed': {\n      return {\n        ...state,\n        state: 'revealed',\n        loadTime: Date.now() - state.startTime\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst wrapperStyles = style({\n  backgroundColor: 'gray-100',\n  overflow: 'hidden'\n});\n\nconst imgStyles = style({\n  display: 'block',\n  width: 'full',\n  height: 'full',\n  objectFit: '[inherit]',\n  objectPosition: '[inherit]',\n  opacity: {\n    default: 0,\n    isRevealed: 1\n  },\n  transition: {\n    default: 'none',\n    isTransitioning: 'opacity'\n  },\n  transitionDuration: 500\n});\n\nfunction Image(props: ImageProps, domRef: ForwardedRef<HTMLDivElement>) {\n  [props, domRef] = useSpectrumContextProps(props, domRef, ImageContext);\n\n  let {\n    src = '',\n    styles,\n    UNSAFE_className = '',\n    UNSAFE_style,\n    renderError,\n    group = DefaultImageGroup,\n    // TODO\n    // srcSet,\n    // sizes,\n    alt,\n    crossOrigin,\n    decoding,\n    loading,\n    referrerPolicy\n  } = props;\n  let hidden = (props as ImageContextValue).hidden;\n  \n  let {revealAll, register, unregister, load} = useContext(group);\n  let [{state, src: lastSrc, loadTime}, dispatch] = useReducer(reducer, src, createState);\n\n  if (src !== lastSrc && !hidden) {\n    dispatch({type: 'update', src});\n  }\n\n  if (state === 'loaded' && revealAll && !hidden) {\n    dispatch({type: 'revealed'});\n  }\n\n  let imgRef = useRef<HTMLImageElement | null>(null);\n  useLayoutEffect(() => {\n    if (hidden) {\n      return;\n    }\n\n    register(src);\n    return () => {\n      unregister(src);\n    };\n  }, [hidden, register, unregister, src]);\n\n  let onLoad = useCallback(() => {\n    load(src);\n    dispatch({type: 'loaded'});\n  }, [load, src]);\n\n  let onError = useCallback(() => {\n    dispatch({type: 'error'});\n    unregister(src);\n  }, [unregister, src]);\n\n  let isSkeleton = useIsSkeleton();\n  let isAnimating = isSkeleton || state === 'loading' || state === 'loaded';\n  let animation = useLoadingAnimation(isAnimating);\n  useLayoutEffect(() => {\n    if (hidden) {\n      return;\n    }\n\n    // If the image is already loaded, update state immediately instead of waiting for onLoad.\n    if (state === 'loading' && imgRef.current?.complete) {\n      // Queue a microtask so we don't hit React's update limit.\n      // TODO: is this necessary?\n      queueMicrotask(onLoad);\n    }\n\n    animation(domRef.current);\n  });\n\n  if (props.alt == null) {\n    console.warn(\n      'The `alt` prop was not provided to an image. ' +\n      'Add `alt` text for screen readers, or set `alt=\"\"` prop to indicate that the image ' +\n      'is decorative or redundant with displayed text and should not be announced by screen readers.'\n    );\n  }\n\n  let errorState = !isSkeleton && state === 'error' && renderError?.();\n  let isRevealed = state === 'revealed' && !isSkeleton;\n  let isTransitioning = isRevealed && loadTime > 200;\n  return useMemo(() => hidden ? null : (\n    <div\n      ref={domRef}\n      style={UNSAFE_style}\n      className={UNSAFE_className + mergeStyles(wrapperStyles, styles) + ' '  + (isAnimating ? loadingStyle : '')}>\n      {errorState}\n      {!errorState && (\n        <img\n          src={src}\n          alt={alt}\n          crossOrigin={crossOrigin}\n          decoding={decoding}\n          loading={loading}\n          referrerPolicy={referrerPolicy}\n          ref={imgRef}\n          onLoad={onLoad}\n          onError={onError}\n          className={imgStyles({isRevealed, isTransitioning})} />\n        )}\n    </div>\n  ), [hidden, domRef, UNSAFE_style, UNSAFE_className, styles, isAnimating, errorState, src, alt, crossOrigin, decoding, loading, referrerPolicy, onLoad, onError, isRevealed, isTransitioning]);\n}\n\nconst _Image = forwardRef(Image);\nexport {_Image as Image};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {colorScheme} from './style-utils' with {type: 'macro'};\nimport {ColorSchemeContext} from './Provider';\nimport {DOMRef} from '@react-types/shared';\nimport {forwardRef, MutableRefObject, useCallback, useContext} from 'react';\nimport {keyframes} from '../style/style-macro' with {type: 'macro'};\nimport {ModalOverlay, ModalOverlayProps, Modal as RACModal, useLocale} from 'react-aria-components';\nimport {style} from '../style' with {type: 'macro'};\nimport {useDOMRef} from '@react-spectrum/utils';\n\ninterface ModalProps extends ModalOverlayProps {\n  /**\n   * The size of the Modal.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'fullscreen' | 'fullscreenTakeover'\n}\n\nconst fade = keyframes(`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`);\n\nconst fadeAndSlide = keyframes(`\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`);\n\nconst modalOverlayStyles = style({\n  ...colorScheme(),\n  position: 'fixed',\n  inset: 0,\n  isolation: 'isolate',\n  backgroundColor: 'transparent-black-500',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  animation: {\n    isEntering: fade,\n    isExiting: fade\n  },\n  animationDuration: {\n    isEntering: 250,\n    isExiting: 130\n  },\n  animationDirection: {\n    isEntering: 'normal',\n    isExiting: 'reverse'\n  }\n});\n\nfunction Modal(props: ModalProps, ref: DOMRef<HTMLDivElement>) {\n  let domRef = useDOMRef(ref);\n  let colorScheme = useContext(ColorSchemeContext);\n  let {locale, direction} = useLocale();\n\n  // TODO: should we pass through lang and dir props in RAC?\n  let modalRef = useCallback((el: HTMLDivElement) => {\n    (domRef as MutableRefObject<HTMLDivElement>).current = el;\n    if (el) {\n      el.lang = locale;\n      el.dir = direction;\n    }\n  }, [locale, direction, domRef]);\n\n  return (\n    <ModalOverlay\n      {...props}\n      className={renderProps => modalOverlayStyles({...renderProps, colorScheme})}>\n      <RACModal\n        {...props}\n        ref={modalRef}\n        className={renderProps => style({\n          display: 'flex',\n          flexDirection: 'column',\n          borderRadius: {\n            default: 'xl',\n            size: {\n              fullscreenTakeover: 'none'\n            }\n          },\n          width: {\n            size: {\n              // Copied from designs, not sure if correct.\n              S: '[21rem]',\n              M: '[26rem]',\n              L: '[36rem]',\n              fullscreen: '[calc(100% - 40px)]',\n              fullscreenTakeover: 'full'\n            }\n          },\n          height: {\n            size: {\n              fullscreen: '[calc(100% - 40px)]',\n              fullscreenTakeover: 'full'\n            }\n          },\n          maxWidth: {\n            size: {\n              S: '[90vw]',\n              M: '[90vw]',\n              L: '[90vw]'\n            }\n          },\n          maxHeight: {\n            size: {\n              S: '[90vh]',\n              M: '[90vh]',\n              L: '[90vh]'\n            }\n          },\n          '--s2-container-bg': {\n            type: 'backgroundColor',\n            value: 'layer-2'\n          },\n          backgroundColor: '--s2-container-bg',\n          animation: {\n            isEntering: fadeAndSlide,\n            isExiting: fade\n          },\n          animationDuration: {\n            isEntering: 250,\n            isExiting: 130\n          },\n          animationDelay: {\n            isEntering: 160,\n            isExiting: 0\n          },\n          animationDirection: {\n            isEntering: 'normal',\n            isExiting: 'reverse'\n          },\n          animationFillMode: 'both',\n          // Transparent outline for WHCM.\n          outlineStyle: 'solid',\n          outlineWidth: 1,\n          outlineColor: 'transparent'\n        })({...renderProps, size: props.size || 'M'})} />\n    </ModalOverlay>\n  );\n}\n\n/**\n * A modal is an overlay element which blocks interaction with elements outside it.\n */\nlet _Modal = forwardRef(Modal);\nexport {_Modal as Modal};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {ColorScheme, Router} from '@react-types/provider';\nimport {colorScheme, UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {createContext, JSX, ReactNode, useContext} from 'react';\nimport {generateDefaultColorSchemeStyles} from './page.macro' with {type: 'macro'};\nimport {I18nProvider, RouterProvider, useLocale} from 'react-aria-components';\nimport {mergeStyles} from '../style/runtime';\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleString} from '../style/types';\n\nexport interface ProviderProps extends UnsafeStyles {\n  /** The content of the Provider. */\n  children: ReactNode,\n  /**\n   * The locale for your application as a [BCP 47](https://www.ietf.org/rfc/bcp/bcp47.txt) language code.\n   * Defaults to the browser/OS language setting.\n   * @default 'en-US'\n   */\n  locale?: string,\n  /**\n   * Provides a client side router to all nested React Spectrum links to enable client side navigation.\n   */\n  router?: Router,\n  /**\n   * The color scheme for your application.\n   * Defaults to operating system preferences.\n   */\n  colorScheme?: ColorScheme,\n  /** The background for this provider. If not provided, the background is transparent. */\n  background?: 'base' | 'layer-1' | 'layer-2',\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: StyleString,\n  /**\n   * The DOM element to render.\n   * @default div\n   */\n  elementType?: keyof JSX.IntrinsicElements\n}\n\nexport const ColorSchemeContext = createContext<ColorScheme | 'light dark' | null>(null);\n\nexport function Provider(props: ProviderProps) {\n  let result = <ProviderInner {...props} />;\n  let parentColorScheme = useContext(ColorSchemeContext);\n  let colorScheme = props.colorScheme || parentColorScheme;\n  if (colorScheme !== parentColorScheme) {\n    result = <ColorSchemeContext.Provider value={colorScheme}>{result}</ColorSchemeContext.Provider>;\n  }\n\n  if (props.locale) {\n    result = <I18nProvider locale={props.locale}>{result}</I18nProvider>;\n  }\n\n  if (props.router) {\n    result = <RouterProvider {...props.router}>{result}</RouterProvider>;\n  }\n\n  return result;\n}\n\ngenerateDefaultColorSchemeStyles();\n\nlet providerStyles = style({\n  ...colorScheme(),\n  '--s2-container-bg': {\n    type: 'backgroundColor',\n    value: {\n      background: {\n        base: 'base',\n        'layer-1': 'layer-1',\n        'layer-2': 'layer-2'\n      }\n    }\n  },\n  backgroundColor: {\n    // Don't set a background unless one is requested.\n    background: {\n      base: '--s2-container-bg',\n      'layer-1': '--s2-container-bg',\n      'layer-2': '--s2-container-bg'\n    }\n  }\n});\n\nfunction ProviderInner(props: ProviderProps) {\n  let {\n    elementType: Element = 'div',\n    UNSAFE_style,\n    UNSAFE_className = '',\n    styles,\n    children,\n    background,\n    colorScheme\n  } = props;\n  let {locale, direction} = useLocale();\n  return (\n    <Element\n      lang={locale}\n      dir={direction}\n      style={UNSAFE_style}\n      className={UNSAFE_className + mergeStyles(\n        styles,\n        providerStyles({background, colorScheme})\n      )}>\n      {children}\n    </Element>\n  );\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Popover as AriaPopover,\n  PopoverProps as AriaPopoverProps,\n  composeRenderProps,\n  OverlayArrow,\n  useLocale\n} from 'react-aria-components';\nimport {colorScheme, getAllowedOverrides, UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {ColorSchemeContext} from './Provider';\nimport {DOMRef} from '@react-types/shared';\nimport {forwardRef, MutableRefObject, useCallback, useContext} from 'react';\nimport {keyframes} from '../style/style-macro' with {type: 'macro'};\nimport {mergeStyles} from '../style/runtime';\nimport {style} from '../style' with {type: 'macro'};\nimport {StyleString} from '../style/types' with {type: 'macro'};\nimport {useDOMRef} from '@react-spectrum/utils';\n\nexport interface PopoverProps extends UnsafeStyles, Omit<AriaPopoverProps, 'arrowSize' | 'isNonModal' | 'arrowBoundaryOffset' | 'isKeyboardDismissDisabled' | 'shouldCloseOnInteractOutside' | 'shouldUpdatePosition'> {\n  styles?: StyleString,\n  /**\n   * Whether a popover's arrow should be hidden.\n   *\n   * @default false\n   */\n  hideArrow?: boolean,\n  size?: 'S' | 'M' | 'L'\n}\n\nconst fadeKeyframes = keyframes(`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`);\nconst slideUpKeyframes = keyframes(`\n  from {\n    transform: translateY(-4px);\n  }\n\n  to {\n    transform: translateY(0);\n  }\n`);\nconst slideDownKeyframes = keyframes(`\n  from {\n    transform: translateY(4px);\n  }\n\n  to {\n    transform: translateY(0);\n  }\n`);\nconst slideRightKeyframes = keyframes(`\n  from {\n    transform: translateX(4px);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n`);\nconst slideLeftKeyframes = keyframes(`\n  from {\n    transform: translateX(-4px);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n`);\n\nlet popover = style({\n  ...colorScheme(),\n  '--s2-container-bg': {\n    type: 'backgroundColor',\n    value: 'layer-2'\n  },\n  backgroundColor: '--s2-container-bg',\n  borderRadius: 'lg',\n  filter: {\n    isArrowShown: 'elevated'\n  },\n  // Use box-shadow instead of filter when an arrow is not shown.\n  // This fixes the shadow stacking problem with submenus.\n  boxShadow: {\n    default: 'elevated',\n    isArrowShown: 'none'\n  },\n  borderStyle: 'solid',\n  borderWidth: 1,\n  borderColor: {\n    default: 'gray-200',\n    forcedColors: 'ButtonBorder'\n  },\n  width: {\n    size: {\n      // Copied from designs, not sure if correct.\n      S: '[21rem]',\n      M: '[26rem]',\n      L: '[36rem]'\n    }\n  },\n  translateY: {\n    placement: {\n      bottom: {\n        isArrowShown: 8 // TODO: not defined yet should this change with font size? need boolean support for 'hideArrow' prop\n      },\n      top: {\n        isArrowShown: -8\n      }\n    }\n  },\n  translateX: {\n    placement: {\n      left: {\n        isArrowShown: -8\n      },\n      right: {\n        isArrowShown: 8\n      }\n    }\n  },\n  animation: {\n    placement: {\n      top: {\n        isEntering: `${slideDownKeyframes}, ${fadeKeyframes}`,\n        isExiting: `${slideDownKeyframes}, ${fadeKeyframes}`\n      },\n      bottom: {\n        isEntering: `${slideUpKeyframes}, ${fadeKeyframes}`,\n        isExiting: `${slideUpKeyframes}, ${fadeKeyframes}`\n      },\n      left: {\n        isEntering: `${slideRightKeyframes}, ${fadeKeyframes}`,\n        isExiting: `${slideRightKeyframes}, ${fadeKeyframes}`\n      },\n      right: {\n        isEntering: `${slideLeftKeyframes}, ${fadeKeyframes}`,\n        isExiting: `${slideLeftKeyframes}, ${fadeKeyframes}`\n      }\n    }\n  },\n  animationDuration: {\n    isEntering: 200,\n    isExiting: 200\n  },\n  animationDirection: {\n    isEntering: 'normal',\n    isExiting: 'reverse'\n  },\n  animationTimingFunction: {\n    isExiting: 'in'\n  },\n  transition: '[opacity, transform]',\n  willChange: '[opacity, transform]',\n  isolation: 'isolate',\n  pointerEvents: {\n    isExiting: 'none'\n  }\n}, getAllowedOverrides());\n// TODO: animations and real Popover Arrow\n\nlet arrow = style({\n  display: 'block',\n  fill: '--s2-container-bg',\n  rotate: {\n    default: 180,\n    placement: {\n      top: 0,\n      bottom: 180,\n      left: -90,\n      right: 90\n    }\n  },\n  translateX: {\n    placement: {\n      left: -4,\n      right: 4\n    }\n  },\n  strokeWidth: 1,\n  stroke: {\n    default: 'gray-200',\n    forcedColors: 'ButtonBorder'\n  }\n});\n\nfunction Popover(props: PopoverProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    hideArrow = false,\n    UNSAFE_className = '',\n    UNSAFE_style,\n    styles,\n    size\n  } = props;\n  let domRef = useDOMRef(ref);\n  let colorScheme = useContext(ColorSchemeContext);\n  let {locale, direction} = useLocale();\n\n  // TODO: should we pass through lang and dir props in RAC?\n  let popoverRef = useCallback((el: HTMLDivElement) => {\n    (domRef as MutableRefObject<HTMLDivElement>).current = el;\n    if (el) {\n      el.lang = locale;\n      el.dir = direction;\n    }\n  }, [locale, direction, domRef]);\n\n  // TODO: this still isn't the final popover 'tip', copying various ones out of the designs files yields different results\n  // containerPadding not working as expected\n  return (\n    <AriaPopover\n      {...props}\n      ref={popoverRef}\n      style={{\n        ...UNSAFE_style,\n        // Override default z-index from useOverlayPosition. We use isolation: isolate instead.\n        zIndex: undefined\n      }}\n      className={(renderProps) => UNSAFE_className + mergeStyles(popover({...renderProps, size, isArrowShown: !hideArrow, colorScheme}), styles)}>\n      {composeRenderProps(props.children, (children, renderProps) => (\n        <>\n          {!hideArrow && (\n            <OverlayArrow>\n              <svg width={18} height={9} viewBox=\"0 0 18 10\" className={arrow(renderProps)}>\n                <path transform=\"translate(0 -1)\" d=\"M1 1L7.93799 8.52588C8.07224 8.67448 8.23607 8.79362 8.41895 8.87524C8.60182 8.95687 8.79973 8.9993 9 9C9.19984 8.99882 9.39724 8.95606 9.57959 8.87427C9.76193 8.79248 9.9253 8.67336 10.0591 8.5249L17 1\" />\n              </svg>\n            </OverlayArrow>\n          )}\n          {children}\n        </>\n      ))}\n    </AriaPopover>\n  );\n}\n\n/**\n * A popover is an overlay element positioned relative to a trigger.\n */\nlet _Popover = forwardRef(Popover);\nexport {_Popover as Popover};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Button,\n  CellRenderProps,\n  Collection,\n  ColumnRenderProps,\n  ColumnResizer,\n  Key,\n  Provider,\n  Cell as RACCell,\n  CellProps as RACCellProps,\n  CheckboxContext as RACCheckboxContext,\n  Column as RACColumn,\n  ColumnProps as RACColumnProps,\n  Row as RACRow,\n  RowProps as RACRowProps,\n  Table as RACTable,\n  TableBody as RACTableBody,\n  TableBodyProps as RACTableBodyProps,\n  TableHeader as RACTableHeader,\n  TableHeaderProps as RACTableHeaderProps,\n  TableProps as RACTableProps,\n  ResizableTableContainer,\n  RowRenderProps,\n  TableBodyRenderProps,\n  TableRenderProps,\n  UNSTABLE_TableLayout,\n  UNSTABLE_TableLoadingIndicator,\n  UNSTABLE_Virtualizer,\n  useSlottedContext,\n  useTableOptions\n} from 'react-aria-components';\nimport {centerPadding, getAllowedOverrides, StylesPropWithHeight, UnsafeStyles} from './style-utils' with {type: 'macro'};\nimport {Checkbox} from './Checkbox';\nimport Chevron from '../ui-icons/Chevron';\nimport {colorMix, fontRelative, lightDark, size, style} from '../style/spectrum-theme' with {type: 'macro'};\nimport {ColumnSize} from '@react-types/table';\nimport {DOMRef, LoadingState, Node} from '@react-types/shared';\nimport {GridNode} from '@react-types/grid';\nimport {IconContext} from './Icon';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {LayoutNode} from '@react-stately/layout';\nimport {Menu, MenuItem, MenuTrigger} from './Menu';\nimport {mergeStyles} from '../style/runtime';\nimport Nubbin from '../ui-icons/S2_Icon_MoveHorizontalCircleTableWidget_16_N.svg';\nimport {ProgressCircle} from './ProgressCircle';\nimport {raw} from '../style/style-macro' with {type: 'macro'};\nimport React, {createContext, forwardRef, ReactNode, useCallback, useContext, useMemo, useRef, useState} from 'react';\nimport {Rect} from '@react-stately/virtualizer';\nimport SortDownArrow from '../s2wf-icons/S2_Icon_SortDown_20_N.svg';\nimport SortUpArrow from '../s2wf-icons/S2_Icon_SortUp_20_N.svg';\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useLoadMore} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useScale} from './utils';\nimport {VisuallyHidden} from 'react-aria';\n\ninterface S2TableProps {\n  /** Whether the Table should be displayed with a quiet style. */\n  isQuiet?: boolean,\n  /**\n   * Sets the amount of vertical padding within each cell.\n   * @default 'regular'\n   */\n  density?: 'compact' | 'spacious' | 'regular',\n  /**\n   * Sets the overflow behavior for the cell contents.\n   * @default 'truncate'\n   */\n  overflowMode?: 'wrap' | 'truncate',\n  // TODO: will we contine with onAction or rename to onRowAction like it is in RAC?\n  /** Handler that is called when a user performs an action on a row. */\n  onAction?: (key: Key) => void,\n  /**\n   * Handler that is called when a user starts a column resize.\n   */\n  onResizeStart?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * Handler that is called when a user performs a column resize.\n   * Can be used with the width property on columns to put the column widths into\n   * a controlled state.\n   */\n  onResize?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * Handler that is called after a user performs a column resize.\n   * Can be used to store the widths of columns for another future session.\n   */\n  onResizeEnd?: (widths: Map<Key, ColumnSize>) => void,\n  /** The current loading state of the table. */\n  loadingState?: LoadingState,\n  /** Handler that is called when more items should be loaded, e.g. while scrolling near the bottom. */\n  onLoadMore?: () => any\n}\n\n// TODO: Note that loadMore and loadingState are now on the Table instead of on the TableBody\nexport interface TableViewProps extends Omit<RACTableProps, 'style' | 'disabledBehavior' | 'className' | 'onRowAction' | 'selectionBehavior' | 'onScroll' | 'onCellAction' | 'dragAndDropHooks'>, UnsafeStyles, S2TableProps {\n  /** Spectrum-defined styles, returned by the `style()` macro. */\n  styles?: StylesPropWithHeight\n}\n\nlet InternalTableContext = createContext<TableViewProps & {layout?: S2TableLayout<unknown>, setIsInResizeMode?:(val: boolean) => void, isInResizeMode?: boolean}>({});\n\nconst tableWrapper = style({\n  minHeight: 0,\n  minWidth: 0,\n  display: 'flex',\n  isolation: 'isolate',\n  disableTapHighlight: true\n});\n\nconst table = style<TableRenderProps & S2TableProps & {isCheckboxSelection?: boolean}>({\n  width: 'full',\n  userSelect: 'none',\n  minHeight: 0,\n  minWidth: 0,\n  fontFamily: 'sans',\n  fontWeight: 'normal',\n  overflow: 'auto',\n  backgroundColor: {\n    default: 'gray-25',\n    isQuiet: 'transparent',\n    forcedColors: 'Background'\n  },\n  outlineColor: {\n    default: 'gray-300',\n    isFocusVisible: 'focus-ring',\n    forcedColors: 'ButtonBorder'\n  },\n  outlineWidth: {\n    default: 1,\n    isQuiet: 0,\n    isFocusVisible: 2\n  },\n  outlineStyle: 'solid',\n  borderRadius: {\n    default: size(6),\n    isQuiet: 'none'\n  },\n  // Multiple browser bugs from scrollIntoView and scrollPadding:\n  // Bug: Table doesn't scroll items into view perfectly in Chrome\n  // https://issues.chromium.org/issues/365913982\n  // Bug: Table scrolls to the left when navigating up/down through the checkboxes when body is scrolled to the right.\n  // https://issues.chromium.org/issues/40067778\n  // https://bugs.webkit.org/show_bug.cgi?id=272799\n  // Base reproduction: https://codepen.io/lfdanlu/pen/zYVVGPW\n  scrollPaddingTop: 32,\n  scrollPaddingStart: {\n    isCheckboxSelection: 40\n  }\n}, getAllowedOverrides({height: true}));\n\n// component-height-100\nconst DEFAULT_HEADER_HEIGHT = {\n  medium: 32,\n  large: 40\n};\n\nconst ROW_HEIGHTS = {\n  compact: {\n    medium: 32, // table-row-height-medium-compact (aka component-height-100)\n    large: 40\n  },\n  regular: {\n    medium: 40, // table-row-height-medium-regular\n    large: 50\n  },\n  spacious: {\n    medium: 48, // table-row-height-medium-spacious\n    large: 60\n  }\n};\n\nexport class S2TableLayout<T> extends UNSTABLE_TableLayout<T> {\n  constructor(options) {\n    super({...options, loaderHeight: 60});\n  }\n\n  protected isStickyColumn(node: GridNode<T>): boolean {\n    return node.props.isSticky;\n  }\n\n  protected buildCollection(): LayoutNode[] {\n    let [header, body] = super.buildCollection();\n    let {children, layoutInfo} = body;\n    // TableLayout's buildCollection always sets the body width to the max width between the header width, but\n    // we want the body to be sticky and only as wide as the table so it is always in view if loading/empty\n    if (children?.length === 0) {\n      layoutInfo.rect.width = this.virtualizer.visibleRect.width - 80;\n    }\n\n    return [\n      header,\n      body\n    ];\n  }\n\n  protected buildLoader(node: Node<T>, x: number, y: number): LayoutNode {\n    let layoutNode = super.buildLoader(node, x, y);\n    let {layoutInfo} = layoutNode;\n    layoutInfo.allowOverflow = true;\n    layoutInfo.rect.width = this.virtualizer.visibleRect.width;\n    layoutInfo.isSticky = true;\n    return layoutNode;\n  }\n\n  protected buildBody(y: number): LayoutNode {\n    let layoutNode = super.buildBody(y);\n    let {children, layoutInfo} = layoutNode;\n    // Needs overflow for sticky loader\n    layoutInfo.allowOverflow = true;\n    // If loading or empty, we'll want the body to be sticky and centered\n    if (children?.length === 0) {\n      layoutInfo.rect = new Rect(40, 40, this.virtualizer.visibleRect.width - 80, this.virtualizer.visibleRect.height - 80);\n      layoutInfo.isSticky = true;\n    }\n\n    return {...layoutNode, layoutInfo};\n  }\n\n  protected buildRow(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let layoutNode = super.buildRow(node, x, y);\n    layoutNode.layoutInfo.allowOverflow = true;\n    // Needs overflow for sticky selection/drag cells\n    return layoutNode;\n  }\n\n  protected buildTableHeader(): LayoutNode {\n    let layoutNode = super.buildTableHeader();\n    // Needs overflow for sticky selection/drag column\n    layoutNode.layoutInfo.allowOverflow = true;\n    return layoutNode;\n  }\n\n  protected buildColumn(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let layoutNode = super.buildColumn(node, x, y);\n    // Needs overflow for the resize handle\n    layoutNode.layoutInfo.allowOverflow = true;\n    return layoutNode;\n  }\n}\n\nfunction TableView(props: TableViewProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    UNSAFE_style,\n    UNSAFE_className,\n    isQuiet = false,\n    density = 'regular',\n    overflowMode = 'truncate',\n    styles,\n    loadingState,\n    onLoadMore,\n    onResize: propsOnResize,\n    onResizeStart: propsOnResizeStart,\n    onResizeEnd: propsOnResizeEnd,\n    onAction,\n    ...otherProps\n  } = props;\n\n  let domRef = useDOMRef(ref);\n  let scale = useScale();\n  let layout = useMemo(() => {\n    return new S2TableLayout({\n      rowHeight: overflowMode === 'wrap'\n        ? undefined\n        : ROW_HEIGHTS[density][scale],\n      estimatedRowHeight: overflowMode === 'wrap'\n      ? ROW_HEIGHTS[density][scale]\n      : undefined,\n      // No need for estimated headingHeight since the headers aren't affected by overflow mode: wrap\n      headingHeight: DEFAULT_HEADER_HEIGHT[scale]\n    });\n  }, [overflowMode, density, scale]);\n\n  // Starts when the user selects resize from the menu, ends when resizing ends\n  // used to control the visibility of the resizer Nubbin\n  let [isInResizeMode, setIsInResizeMode] = useState(false);\n  let onResizeStart = useCallback((widths) => {\n    propsOnResizeStart?.(widths);\n  }, [propsOnResizeStart]);\n  let onResizeEnd = useCallback((widths) => {\n    setIsInResizeMode(false);\n    propsOnResizeEnd?.(widths);\n  }, [propsOnResizeEnd, setIsInResizeMode]);\n\n  let context = useMemo(() => ({\n    isQuiet,\n    density,\n    overflowMode,\n    loadingState,\n    isInResizeMode,\n    setIsInResizeMode\n  }), [isQuiet, density, overflowMode, loadingState, isInResizeMode, setIsInResizeMode]);\n\n  let isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n  let scrollRef = useRef(null);\n  let memoedLoadMoreProps = useMemo(() => ({\n    isLoading: isLoading,\n    onLoadMore\n  }), [isLoading, onLoadMore]);\n  useLoadMore(memoedLoadMoreProps, scrollRef);\n  let isCheckboxSelection = props.selectionMode === 'multiple' || props.selectionMode === 'single';\n\n  return (\n    <ResizableTableContainer\n      // TODO: perhaps this ref should be attached to the RACTable but it expects a table type ref which isn't true in the virtualized case\n      ref={domRef}\n      onResize={propsOnResize}\n      onResizeEnd={onResizeEnd}\n      onResizeStart={onResizeStart}\n      className={(UNSAFE_className || '') + mergeStyles(tableWrapper, styles)}\n      style={UNSAFE_style}>\n      <UNSTABLE_Virtualizer layout={layout}>\n        <InternalTableContext.Provider value={context}>\n          <RACTable\n            ref={scrollRef}\n            // Fix webkit bug where scrollbars appear above the checkboxes/other table elements\n            style={{WebkitTransform: 'translateZ(0)'}}\n            className={renderProps => table({\n              ...renderProps,\n              isCheckboxSelection,\n              isQuiet\n            })}\n            selectionBehavior=\"toggle\"\n            onRowAction={onAction}\n            {...otherProps} />\n        </InternalTableContext.Provider>\n      </UNSTABLE_Virtualizer>\n    </ResizableTableContainer>\n  );\n}\n\nconst centeredWrapper = style({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  width: 'full',\n  height: 'full'\n});\n\nexport interface TableBodyProps<T> extends Omit<RACTableBodyProps<T>, 'style' | 'className' | 'dependencies'> {}\n\n/**\n * The body of a `<Table>`, containing the table rows.\n */\nexport function TableBody<T extends object>(props: TableBodyProps<T>) {\n  let {items, renderEmptyState, children} = props;\n  let {loadingState} = useContext(InternalTableContext);\n  let emptyRender;\n  let renderer = children;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  let loadMoreSpinner = (\n    <UNSTABLE_TableLoadingIndicator className={style({height: 'full', width: 'full'})}>\n      <div className={centeredWrapper}>\n        <ProgressCircle\n          isIndeterminate\n          aria-label={stringFormatter.format('table.loadingMore')} />\n      </div>\n    </UNSTABLE_TableLoadingIndicator>\n  );\n\n  // If the user is rendering their rows in dynamic fashion, wrap their render function in Collection so we can inject\n  // the loader. Otherwise it is a static renderer and thus we can simply add the table loader after\n  // TODO: this assumes that the user isn't providing their children in some wrapper though and/or isn't doing a map of children\n  // (though I guess they wouldn't provide items then so the check for this is still valid in the latter case)...\n  if (typeof children === 'function' && items) {\n    renderer = (\n      <>\n        <Collection items={items}>\n          {children}\n        </Collection>\n        {loadingState === 'loadingMore' && loadMoreSpinner}\n      </>\n    );\n  } else {\n    renderer = (\n      <>\n        {children}\n        {loadingState === 'loadingMore' && loadMoreSpinner}\n      </>\n    );\n  }\n\n  if (renderEmptyState != null && loadingState !== 'loading') {\n    emptyRender = (props: TableBodyRenderProps) => (\n      <div className={centeredWrapper}>\n        {renderEmptyState(props)}\n      </div>\n    );\n  } else if (loadingState === 'loading') {\n    emptyRender = () => (\n      <div className={centeredWrapper}>\n        <ProgressCircle\n          isIndeterminate\n          aria-label={stringFormatter.format('table.loading')} />\n      </div>\n    );\n  }\n\n  return (\n    <RACTableBody\n      className={style({height: 'full'})}\n      {...props}\n      renderEmptyState={emptyRender}\n      dependencies={[loadingState]}>\n      {renderer}\n    </RACTableBody>\n  );\n}\n\nconst cellFocus = {\n  outlineStyle: {\n    default: 'none',\n    isFocusVisible: 'solid'\n  },\n  outlineOffset: -2,\n  outlineWidth: 2,\n  outlineColor: 'focus-ring',\n  borderRadius: size(6)\n} as const;\n\nfunction CellFocusRing() {\n  return <div role=\"presentation\" className={style({...cellFocus, position: 'absolute', inset: 0})({isFocusVisible: true})} />;\n}\n\nconst columnStyles = style({\n  height: '[inherit]',\n  boxSizing: 'border-box',\n  color: {\n    default: 'neutral',\n    forcedColors: 'ButtonText'\n  },\n  paddingX: {\n    default: 16,\n    isColumnResizable: 0\n  },\n  textAlign: {\n    align: {\n      start: 'start',\n      center: 'center',\n      end: 'end'\n    }\n  },\n  outlineStyle: 'none',\n  position: 'relative',\n  fontSize: 'control',\n  fontFamily: 'sans',\n  fontWeight: 'bold',\n  display: 'flex',\n  borderColor: {\n    default: 'gray-300',\n    forcedColors: 'ButtonBorder'\n  },\n  borderTopWidth: {\n    default: 0,\n    isQuiet: 1\n  },\n  borderBottomWidth: 1,\n  borderStartWidth: 0,\n  borderEndWidth: {\n    default: 0,\n    isColumnResizable: 1\n  },\n  borderStyle: 'solid',\n  forcedColorAdjust: 'none'\n});\n\nexport interface ColumnProps extends RACColumnProps {\n  /** Whether the column should render a divider between it and the next column. */\n  showDivider?: boolean,\n  /** Whether the column allows resizing. */\n  allowsResizing?: boolean,\n  /**\n   * The alignment of the column's contents relative to its allotted width.\n   * @default 'start'\n   */\n  align?: 'start' | 'center' | 'end',\n  /** The content to render as the column header. */\n  children: ReactNode\n}\n\n/**\n * A column within a `<Table>`.\n */\nexport function Column(props: ColumnProps) {\n  let {isHeaderRowHovered} = useContext(InternalTableHeaderContext);\n  let {isQuiet} = useContext(InternalTableContext);\n  let {allowsResizing, children, align = 'start'} = props;\n  let isColumnResizable = allowsResizing;\n\n  return (\n    <RACColumn {...props} style={{borderInlineEndColor: 'transparent'}} className={renderProps => columnStyles({...renderProps, isColumnResizable, align, isQuiet})}>\n      {({allowsSorting, sortDirection, isFocusVisible, sort, startResize, isHovered}) => (\n        <>\n          {/* Note this is mainly for column's without a dropdown menu. If there is a dropdown menu, the button is styled to have a focus ring for simplicity\n          (no need to juggle showing this focus ring if focus is on the menu button and not if it is on the resizer) */}\n          {/* Separate absolutely positioned element because appyling the ring on the column directly via outline means the ring's required borderRadius will cause the bottom gray border to curve as well */}\n          {isFocusVisible && <CellFocusRing />}\n          {isColumnResizable ?\n            (\n              <ResizableColumnContents allowsSorting={allowsSorting} sortDirection={sortDirection} sort={sort} startResize={startResize} isHovered={isHeaderRowHovered || isHovered} align={align}>\n                {children}\n              </ResizableColumnContents>\n            ) : (\n              <ColumnContents allowsSorting={allowsSorting} sortDirection={sortDirection}>\n                {children}\n              </ColumnContents>\n            )\n          }\n        </>\n      )}\n    </RACColumn>\n  );\n}\n\nconst columnContentWrapper = style({\n  minWidth: 0,\n  display: 'flex',\n  alignItems: 'center',\n  width: 'full'\n});\n\nconst sortIcon = style({\n  size: fontRelative(16),\n  flexShrink: 0,\n  marginEnd: {\n    default: 8,\n    isButton: 'text-to-visual'\n  },\n  verticalAlign: {\n    default: 'bottom',\n    isButton: 0\n  },\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  }\n});\n\ninterface ColumnContentProps extends Pick<ColumnRenderProps, 'allowsSorting' | 'sortDirection'>, Pick<ColumnProps, 'children'> {}\n\nfunction ColumnContents(props: ColumnContentProps) {\n  let {allowsSorting, sortDirection, children} = props;\n\n  return (\n    <div className={columnContentWrapper}>\n      {allowsSorting && (\n        <Provider\n          values={[\n            [IconContext, {\n              styles: sortIcon({})\n            }]\n          ]}>\n          {sortDirection != null && (\n            sortDirection === 'ascending' ? <SortUpArrow /> : <SortDownArrow />\n          )}\n        </Provider>\n      )}\n      <span className={style({truncate: true, width: 'full'})}>\n        {children}\n      </span>\n    </div>\n  );\n}\n\nconst resizableMenuButtonWrapper = style({\n  ...cellFocus,\n  color: 'gray-800', // body-color\n  width: 'full',\n  position: 'relative',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: {\n    align: {\n      default: 'start',\n      center: 'center',\n      end: 'end'\n    }\n  },\n  // TODO: when align: end, the dropdown arrow is misaligned with the text, not sure how best to make the svg be flush with the end of the button other than modifying the\n  // paddingEnd\n  paddingX: 16,\n  backgroundColor: 'transparent',\n  borderStyle: 'none',\n  fontSize: 'control',\n  fontFamily: 'sans',\n  fontWeight: 'bold'\n});\n\nconst resizerHandleContainer = style({\n  display: {\n    default: 'none',\n    isResizing: 'block',\n    isHovered: 'block'\n  },\n  width: 12,\n  height: 'full',\n  position: 'absolute',\n  top: 0,\n  insetEnd: size(-6),\n  cursor: {\n    default: 'none',\n    resizableDirection: {\n      'left': 'e-resize',\n      'right': 'w-resize',\n      'both': 'ew-resize'\n    }\n  },\n  // So that the user can still hover + drag the resizer even though it's hit area is partially in the adjacent column's space\n  '--focus-ring-color': {\n    type: 'outlineColor',\n    value: 'focus-ring'\n  }\n});\n\nconst resizerHandle = style({\n  backgroundColor: {\n    default: 'transparent',\n    isHovered: 'gray-300',\n    isFocusVisible: '--focus-ring-color',\n    isResizing: '--focus-ring-color',\n    forcedColors: {\n      default: 'Background',\n      isHovered: 'ButtonBorder',\n      isFocusVisible: 'Highlight',\n      isResizing: 'Highlight'\n    }\n  },\n  height: {\n    default: 'full',\n    isResizing: 'screen'\n  },\n  width: {\n    default: size(1),\n    isResizing: size(2)\n  },\n  position: 'absolute',\n  insetStart: size(6)\n});\n\nconst columnHeaderText = style({\n  truncate: true,\n  // Make it so the text doesn't completely disappear when column is resized to smallest width + both sort and chevron icon is rendered\n  minWidth: fontRelative(16),\n  flexGrow: 0,\n  flexShrink: 1,\n  flexBasis: 'auto'\n});\n\nconst chevronIcon = style({\n  rotate: 90,\n  marginStart: 'text-to-visual',\n  minWidth: fontRelative(16),\n  flexShrink: 0,\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  }\n});\n\nconst nubbin = style({\n  position: 'absolute',\n  top: 0,\n  insetStart: size(-1),\n  size: fontRelative(16),\n  fill: {\n    default: '--focus-ring-color',\n    forcedColors: 'Highlight'\n  },\n  '--iconPrimary': {\n    type: 'fill',\n    value: {\n      default: 'white',\n      forcedColors: 'HighlightText'\n    }\n  }\n});\n\ninterface ResizableColumnContentProps extends Pick<ColumnRenderProps, 'allowsSorting' | 'sort' | 'sortDirection' | 'startResize' | 'isHovered'>, Pick<ColumnProps, 'align' | 'children'> {}\n\nfunction ResizableColumnContents(props: ResizableColumnContentProps) {\n  let {allowsSorting, sortDirection, sort, startResize, children, isHovered, align} = props;\n  let {setIsInResizeMode, isInResizeMode} = useContext(InternalTableContext);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  const onMenuSelect = (key) => {\n    switch (key) {\n      case 'sort-asc':\n        sort('ascending');\n        break;\n      case 'sort-desc':\n        sort('descending');\n        break;\n      case 'resize':\n        setIsInResizeMode?.(true);\n        startResize();\n        break;\n    }\n  };\n\n  let items = useMemo(() => {\n    let options = [\n      {\n        label: stringFormatter.format('table.resizeColumn'),\n        id: 'resize'\n      }\n    ];\n    if (allowsSorting) {\n      options = [\n        {\n          label: stringFormatter.format('table.sortAscending'),\n          id: 'sort-asc'\n        },\n        {\n          label: stringFormatter.format('table.sortDescending'),\n          id: 'sort-desc'\n        },\n        ...options\n      ];\n    }\n    return options;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allowsSorting]);\n\n  let buttonAlignment = 'start';\n  let menuAlign = 'start' as 'start' | 'end';\n  if (align === 'center') {\n    buttonAlignment = 'center';\n  } else if (align === 'end') {\n    buttonAlignment = 'end';\n    menuAlign = 'end';\n  }\n\n  return (\n    <>\n      <MenuTrigger align={menuAlign}>\n        <Button className={(renderProps) => resizableMenuButtonWrapper({...renderProps, align: buttonAlignment})}>\n          {allowsSorting && (\n            <Provider\n              values={[\n                [IconContext, {\n                  styles: sortIcon({isButton: true})\n                }]\n              ]}>\n              {sortDirection != null && (\n                sortDirection === 'ascending' ? <SortUpArrow /> : <SortDownArrow />\n              )}\n            </Provider>\n          )}\n          <div className={columnHeaderText}>\n            {children}\n          </div>\n          <Chevron size=\"M\" className={chevronIcon} />\n        </Button>\n        <Menu onAction={onMenuSelect} items={items} styles={style({minWidth: 128})}>\n          {(item) => <MenuItem>{item?.label}</MenuItem>}\n        </Menu>\n      </MenuTrigger>\n      <div data-react-aria-prevent-focus=\"true\">\n        <ColumnResizer data-react-aria-prevent-focus=\"true\" className={({resizableDirection, isResizing}) => resizerHandleContainer({resizableDirection, isResizing, isHovered: isInResizeMode || isHovered})}>\n          {({isFocusVisible, isResizing}) => (\n            <>\n              <ResizerIndicator isInResizeMode={isInResizeMode} isFocusVisible={isFocusVisible} isHovered={isHovered} isResizing={isResizing} />\n              {(isFocusVisible || isInResizeMode) && isResizing && <div className={nubbin}><Nubbin /></div>}\n            </>\n        )}\n        </ColumnResizer>\n      </div>\n    </>\n  );\n}\n\nfunction ResizerIndicator({isFocusVisible, isHovered, isResizing, isInResizeMode}) {\n  return (\n    <div className={resizerHandle({isFocusVisible, isHovered: isHovered || isInResizeMode, isResizing})} />\n  );\n}\n\nconst tableHeader = style({\n  height: 'full',\n  width: 'full',\n  backgroundColor: 'gray-75',\n  // Attempt to prevent 1px area where you can see scrolled cell content between the table outline and the table header\n  marginTop: '[-1px]'\n});\n\nconst selectAllCheckbox = style({\n  marginStart: 16 // table-edge-to-content, same between mobile and desktop\n});\n\nconst selectAllCheckboxColumn = style({\n  padding: 0,\n  height: 'full',\n  boxSizing: 'border-box',\n  outlineStyle: 'none',\n  position: 'relative',\n  alignContent: 'center',\n  borderColor: {\n    default: 'gray-300',\n    forcedColors: 'ButtonBorder'\n  },\n  borderXWidth: 0,\n  borderTopWidth: {\n    default: 0,\n    isQuiet: 1\n  },\n  borderBottomWidth: 1,\n  borderStyle: 'solid',\n  backgroundColor: 'gray-75'\n});\n\nlet InternalTableHeaderContext = createContext<{isHeaderRowHovered?: boolean}>({isHeaderRowHovered: false});\n\nexport interface TableHeaderProps<T> extends Omit<RACTableHeaderProps<T>, 'style' | 'className' | 'dependencies' | 'onHoverChange' | 'onHoverStart' | 'onHoverEnd'> {}\n\n/**\n * A header within a `<Table>`, containing the table columns.\n */\nexport function TableHeader<T extends object>({columns, children}: TableHeaderProps<T>) {\n  let scale = useScale();\n  let {selectionBehavior, selectionMode} = useTableOptions();\n  let {isQuiet} = useContext(InternalTableContext);\n  let [isHeaderRowHovered, setHeaderRowHovered] = useState(false);\n\n  return (\n    <InternalTableHeaderContext.Provider value={{isHeaderRowHovered}}>\n      <RACTableHeader onHoverChange={setHeaderRowHovered} className={tableHeader}>\n        {/* Add extra columns for selection. */}\n        {selectionBehavior === 'toggle' && (\n          // Also isSticky prop is applied just for the layout, will decide what the RAC api should be later\n          // @ts-ignore\n          <RACColumn isSticky width={scale === 'medium' ? 40 : 52} minWidth={scale === 'medium' ? 40 : 52} className={selectAllCheckboxColumn({isQuiet})}>\n            {({isFocusVisible}) => (\n              <>\n                {selectionMode === 'single' &&\n                  <>\n                    {isFocusVisible && <CellFocusRing />}\n                    <VisuallyHiddenSelectAllLabel />\n                  </>\n                }\n                {selectionMode === 'multiple' &&\n                  <Checkbox isEmphasized styles={selectAllCheckbox} slot=\"selection\" />\n                }\n              </>\n            )}\n          </RACColumn>\n        )}\n        <Collection items={columns}>\n          {children}\n        </Collection>\n      </RACTableHeader>\n    </InternalTableHeaderContext.Provider>\n  );\n}\n\nfunction VisuallyHiddenSelectAllLabel() {\n  let checkboxProps = useSlottedContext(RACCheckboxContext, 'selection');\n\n  return (\n    <VisuallyHidden>{checkboxProps?.['aria-label']}</VisuallyHidden>\n  );\n}\n\nconst commonCellStyles = {\n  borderColor: 'transparent',\n  borderBottomWidth: 1,\n  borderTopWidth: 0,\n  borderXWidth: 0,\n  borderStyle: 'solid',\n  position: 'relative',\n  color: {\n    default: 'gray-800',\n    forcedColors: 'ButtonText'\n  },\n  outlineStyle: 'none',\n  paddingX: 16 // table-edge-to-content\n} as const;\n\nconst cell = style<CellRenderProps & S2TableProps & {isDivider: boolean}>({\n  ...commonCellStyles,\n  color: 'neutral',\n  paddingY: centerPadding(),\n  minHeight: {\n    default: 40,\n    density: {\n      compact: 32,\n      spacious: 48\n    }\n  },\n  boxSizing: 'border-box',\n  height: 'full',\n  width: 'full',\n  fontSize: 'control',\n  alignItems: 'center',\n  display: 'flex',\n  borderStyle: {\n    default: 'none',\n    isDivider: 'solid'\n  },\n  borderEndWidth: {\n    default: 0,\n    isDivider: 1\n  },\n  borderColor: {\n    default: 'gray-300',\n    forcedColors: 'ButtonBorder'\n  }\n});\n\nconst stickyCell = {\n  backgroundColor: 'gray-25'\n} as const;\n\nconst checkboxCellStyle = style({\n  ...commonCellStyles,\n  ...stickyCell,\n  paddingStart: 16,\n  alignContent: 'center',\n  height: '[calc(100% - 1px)]',\n  borderBottomWidth: 0,\n  backgroundColor: '--rowBackgroundColor'\n});\n\nconst cellContent = style({\n  truncate: true,\n  whiteSpace: {\n    default: 'nowrap',\n    overflowMode: {\n      wrap: 'normal'\n    }\n  },\n  textAlign: {\n    align: {\n      start: 'start',\n      center: 'center',\n      end: 'end'\n    }\n  },\n  width: 'full',\n  isolation: 'isolate',\n  padding: {\n    default: 4,\n    isSticky: 0\n  },\n  margin: {\n    default: -4,\n    isSticky: 0\n  },\n  backgroundColor: {\n    default: 'transparent',\n    isSticky: '--rowBackgroundColor'\n  }\n});\n\nexport interface CellProps extends RACCellProps, Pick<ColumnProps, 'align' | 'showDivider'> {\n  /** @private */\n  isSticky?: boolean,\n  /** The content to render as the cell children. */\n  children: ReactNode\n}\n\n/**\n * A cell within a table row.\n */\nexport function Cell(props: CellProps) {\n  let {children, isSticky, showDivider = false, align, textValue, ...otherProps} = props;\n  let tableVisualOptions = useContext(InternalTableContext);\n  textValue ||= typeof children === 'string' ? children : undefined;\n\n  return (\n    <RACCell\n      // Also isSticky prop is applied just for the layout, will decide what the RAC api should be later\n      // @ts-ignore\n      isSticky={isSticky}\n      className={renderProps => cell({\n        ...renderProps,\n        ...tableVisualOptions,\n        isDivider: showDivider\n      })}\n      textValue={textValue}\n      {...otherProps}>\n      {({isFocusVisible}) => (\n        <>\n          {isFocusVisible && <CellFocusRing />}\n          <span className={cellContent({...tableVisualOptions, isSticky, align: align || 'start'})}>{children}</span>\n        </>\n      )}\n    </RACCell>\n  );\n}\n\n// Use color-mix instead of transparency so sticky cells work correctly.\nconst selectedBackground = lightDark(colorMix('gray-25', 'informative-900', 10), colorMix('gray-25', 'informative-700', 10));\nconst selectedActiveBackground = lightDark(colorMix('gray-25', 'informative-900', 15), colorMix('gray-25', 'informative-700', 15));\nconst rowBackgroundColor = {\n  default: {\n    default: 'gray-25',\n    isQuiet: 'transparent'\n  },\n  isFocusVisibleWithin: colorMix('gray-25', 'gray-900', 7), // table-row-hover-color\n  isHovered: colorMix('gray-25', 'gray-900', 7), // table-row-hover-color\n  isPressed: colorMix('gray-25', 'gray-900', 10), // table-row-hover-color\n  isSelected: {\n    default: selectedBackground, // table-selected-row-background-color, opacity /10\n    isFocusVisibleWithin: selectedActiveBackground, // table-selected-row-background-color, opacity /15\n    isHovered: selectedActiveBackground, // table-selected-row-background-color, opacity /15\n    isPressed: selectedActiveBackground // table-selected-row-background-color, opacity /15\n  },\n  forcedColors: {\n    default: 'Background'\n  }\n} as const;\n\nconst row = style<RowRenderProps & S2TableProps>({\n  height: 'full',\n  position: 'relative',\n  boxSizing: 'border-box',\n  backgroundColor: '--rowBackgroundColor',\n  '--rowBackgroundColor': {\n    type: 'backgroundColor',\n    value: rowBackgroundColor\n  },\n  '--rowFocusIndicatorColor': {\n    type: 'outlineColor',\n    value: {\n      default: 'focus-ring',\n      forcedColors: 'Highlight'\n    }\n  },\n  // TODO: outline here is to emulate v3 forcedColors experience but runs into the same problem where the sticky column covers the outline\n  // This doesn't quite work because it gets cut off by the checkbox cell background masking element, figure out another way. Could shrink the checkbox cell's content even more\n  // and offset it by margin top but that messes up the checkbox centering a bit\n  // outlineWidth: {\n  //   forcedColors: {\n  //     isFocusVisible: 2\n  //   }\n  // },\n  // outlineOffset: {\n  //   forcedColors: {\n  //     isFocusVisible: -1\n  //   }\n  // },\n  // outlineColor: {\n  //   forcedColors: {\n  //     isFocusVisible: 'ButtonBorder'\n  //   }\n  // },\n  // outlineStyle: {\n  //   default: 'none',\n  //   forcedColors: {\n  //     isFocusVisible: 'solid'\n  //   }\n  // },\n  outlineStyle: 'none',\n  borderTopWidth: 0,\n  borderBottomWidth: 1,\n  borderStartWidth: 0,\n  borderEndWidth: 0,\n  borderStyle: 'solid',\n  borderColor: {\n    default: 'gray-300',\n    forcedColors: 'ButtonBorder'\n  },\n  forcedColorAdjust: 'none'\n});\n\nexport interface RowProps<T> extends Pick<RACRowProps<T>, 'id' | 'columns' | 'children' | 'textValue'>  {}\n\n/**\n * A row within a `<Table>`.\n */\nexport function Row<T extends object>({id, columns, children, ...otherProps}: RowProps<T>) {\n  let {selectionBehavior, selectionMode} = useTableOptions();\n  let tableVisualOptions = useContext(InternalTableContext);\n\n  return (\n    <RACRow\n      id={id}\n      className={renderProps => row({\n        ...renderProps,\n        ...tableVisualOptions\n      }) + (renderProps.isFocusVisible && ' ' + raw('&:before { content: \"\"; display: inline-block; position: sticky; inset-inline-start: 0; width: 3px; height: 100%; margin-inline-end: -3px; margin-block-end: 1px;  z-index: 3; background-color: var(--rowFocusIndicatorColor)'))}\n      {...otherProps}>\n      {selectionMode !== 'none' && selectionBehavior === 'toggle' && (\n        <Cell isSticky className={checkboxCellStyle}>\n          <Checkbox isEmphasized slot=\"selection\" />\n        </Cell>\n      )}\n      <Collection items={columns}>\n        {children}\n      </Collection>\n    </RACRow>\n  );\n}\n\n/**\n * Tables are containers for displaying information. They allow users to quickly scan, sort, compare, and take action on large amounts of data.\n */\nconst _TableView = forwardRef(TableView);\nexport {_TableView as TableView};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Checkbox as AriaCheckbox, CheckboxProps as AriaCheckboxProps, CheckboxGroupStateContext, CheckboxRenderProps, ContextValue, useSlottedContext} from 'react-aria-components';\nimport {baseColor, focusRing, style} from '../style' with {type: 'macro'};\nimport {CenterBaseline} from './CenterBaseline';\nimport CheckmarkIcon from '../ui-icons/Checkmark';\nimport {createContext, forwardRef, ReactNode, useContext, useRef} from 'react';\nimport DashIcon from '../ui-icons/Dash';\nimport {FocusableRef, FocusableRefValue} from '@react-types/shared';\nimport {FormContext, useFormProps} from './Form';\nimport {getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {pressScale} from './pressScale';\nimport {useFocusableRef} from '@react-spectrum/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\ninterface CheckboxStyleProps {\n  /**\n   * The size of the Checkbox.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /** Whether the Checkbox should be displayed with an emphasized style. */\n  isEmphasized?: boolean\n}\n\ninterface RenderProps extends CheckboxRenderProps, CheckboxStyleProps {}\n\nexport interface CheckboxProps extends Omit<AriaCheckboxProps, 'className' | 'style' | 'children' | 'onHover' | 'onHoverStart' | 'onHoverEnd' | 'onHoverChange'>, StyleProps, CheckboxStyleProps {\n  /** The label for the element. */\n  children?: ReactNode\n}\n\nexport const CheckboxContext = createContext<ContextValue<CheckboxProps, FocusableRefValue<HTMLLabelElement>>>(null);\n\nconst wrapper = style({\n  display: 'flex',\n  columnGap: 'text-to-control',\n  alignItems: 'baseline',\n  width: 'fit',\n  font: 'control',\n  transition: 'colors',\n  color: {\n    default: 'neutral',\n    isDisabled: {\n      default: 'disabled',\n      forcedColors: 'GrayText'\n    }\n  },\n  gridColumnStart: {\n    isInForm: 'field'\n  },\n  disableTapHighlight: true\n}, getAllowedOverrides());\n\nexport const box = style<RenderProps>({\n  ...focusRing(),\n  size: 'control-sm',\n  borderRadius: 'control-sm',\n  flexShrink: 0,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  borderWidth: 2,\n  boxSizing: 'border-box',\n  borderStyle: 'solid',\n  transition: 'default',\n  forcedColorAdjust: 'none',\n  backgroundColor: {\n    default: 'gray-25',\n    forcedColors: 'Background',\n    isSelected: {\n      default: 'neutral',\n      isEmphasized: baseColor('accent-900'),\n      forcedColors: 'Highlight',\n      isInvalid: {\n        default: baseColor('negative-900'),\n        forcedColors: 'Mark'\n      },\n      isDisabled: {\n        default: 'gray-400',\n        forcedColors: 'GrayText'\n      }\n    }\n  },\n  borderColor: {\n    default: baseColor('gray-800'),\n    forcedColors: 'ButtonBorder',\n    isInvalid: {\n      default: 'negative',\n      forcedColors: 'Mark'\n    },\n    isDisabled: {\n      default: 'gray-400',\n      forcedColors: 'GrayText'\n    },\n    isSelected: 'transparent'\n  }\n});\n\nexport const iconStyles = style({\n  '--iconPrimary': {\n    type: 'fill',\n    value: {\n      default: 'gray-25',\n      forcedColors: 'HighlightText'\n    }\n  }\n});\n\nconst iconSize = {\n  S: 'XS',\n  M: 'S',\n  L: 'M',\n  XL: 'L'\n} as const;\n\nfunction Checkbox({children, ...props}: CheckboxProps, ref: FocusableRef<HTMLLabelElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, CheckboxContext);\n  let boxRef = useRef(null);\n  let inputRef = useRef<HTMLInputElement | null>(null);\n  let domRef = useFocusableRef(ref, inputRef);\n  let isInForm = !!useContext(FormContext);\n  props = useFormProps(props);\n  let isInCheckboxGroup = !!useContext(CheckboxGroupStateContext);\n  let ctx = useSlottedContext(CheckboxContext, props.slot);\n\n  return (\n    <AriaCheckbox\n      {...props}\n      ref={domRef}\n      inputRef={inputRef}\n      style={props.UNSAFE_style}\n      className={renderProps => (props.UNSAFE_className || '') + wrapper({...renderProps, isInForm, size: props.size || 'M'}, props.styles)}>\n      {renderProps => {\n        let checkbox = (\n          <div\n            ref={boxRef}\n            style={pressScale(boxRef)(renderProps)}\n            className={box({\n              ...renderProps,\n              isSelected: renderProps.isSelected || renderProps.isIndeterminate,\n              size: props.size || 'M',\n              isEmphasized: isInCheckboxGroup ? ctx?.isEmphasized : props.isEmphasized\n            })}>\n            {renderProps.isIndeterminate &&\n              <DashIcon size={iconSize[props.size || 'M']} className={iconStyles} />\n            }\n            {renderProps.isSelected && !renderProps.isIndeterminate &&\n              <CheckmarkIcon size={iconSize[props.size || 'M']} className={iconStyles} />\n            }\n          </div>\n        );\n\n        // Only render checkbox without center baseline if no label.\n        // This avoids expanding the checkbox height to the font's line height.\n        if (!children) {\n          return checkbox;\n        }\n\n        return (\n          <>\n            <CenterBaseline>\n              {checkbox}\n            </CenterBaseline>\n            {children}\n          </>\n        );\n      }}\n    </AriaCheckbox>\n  );\n}\n\n/**\n * Checkboxes allow users to select multiple items from a list of individual items,\n * or to mark one individual item as selected.\n */\nlet _Checkbox = forwardRef(Checkbox);\nexport {_Checkbox as Checkbox};\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Menu as AriaMenu,\n  MenuItem as AriaMenuItem,\n  MenuItemProps as AriaMenuItemProps,\n  MenuProps as AriaMenuProps,\n  MenuTrigger as AriaMenuTrigger,\n  MenuTriggerProps as AriaMenuTriggerProps,\n  Section as AriaSection,\n  SubmenuTrigger as AriaSubmenuTrigger,\n  SubmenuTriggerProps as AriaSubmenuTriggerProps,\n  ContextValue,\n  Provider,\n  SectionProps,\n  Separator,\n  SeparatorProps\n} from 'react-aria-components';\nimport {baseColor, edgeToText, focusRing, fontRelative, size, space, style} from '../style' with {type: 'macro'};\nimport {box, iconStyles} from './Checkbox';\nimport {centerBaseline} from './CenterBaseline';\nimport {centerPadding, getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport CheckmarkIcon from '../ui-icons/Checkmark';\nimport ChevronRightIcon from '../ui-icons/Chevron';\nimport {createContext, forwardRef, JSX, ReactNode, useContext, useRef} from 'react';\nimport {divider} from './Divider';\nimport {DOMRef, DOMRefValue} from '@react-types/shared';\nimport {forwardRefType} from './types';\nimport {HeaderContext, HeadingContext, KeyboardContext, Text, TextContext} from './Content';\nimport {IconContext} from './Icon'; // chevron right removed??\nimport {ImageContext} from './Image';\nimport LinkOutIcon from '../ui-icons/LinkOut';\nimport {mergeStyles} from '../style/runtime';\nimport {Placement, useLocale} from 'react-aria';\nimport {Popover} from './Popover';\nimport {PressResponder} from '@react-aria/interactions';\nimport {pressScale} from './pressScale';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n// viewbox on LinkOut is super weird just because i copied the icon from designs...\n// need to strip id's from icons\n\nexport interface MenuTriggerProps extends AriaMenuTriggerProps {\n  /**\n   * Alignment of the menu relative to the trigger.\n   *\n   * @default 'start'\n   */\n  align?: 'start' | 'end',\n  /**\n   * Where the Menu opens relative to its trigger.\n   *\n   * @default 'bottom'\n   */\n  direction?: 'bottom' | 'top' | 'left' | 'right' | 'start' | 'end',\n  /**\n   * Whether the menu should automatically flip direction when space is limited.\n   *\n   * @default true\n   */\n  shouldFlip?: boolean\n}\n\nexport interface MenuProps<T> extends Omit<AriaMenuProps<T>, 'children' | 'style' | 'className' | 'dependencies'>, StyleProps {\n  /**\n   * The size of the Menu.\n   *\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L' | 'XL',\n  /**\n   * The contents of the collection.\n   */\n  children?: ReactNode | ((item: T) => ReactNode)\n}\n\nexport const MenuContext = createContext<ContextValue<MenuProps<any>, DOMRefValue<HTMLDivElement>>>(null);\n\nexport let menu = style({\n  outlineStyle: 'none',\n  display: 'grid',\n  gridTemplateColumns: {\n    size: {\n      S: [edgeToText(24), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(24)],\n      M: [edgeToText(32), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(32)],\n      L: [edgeToText(40), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(40)],\n      XL: [edgeToText(48), 'auto', 'auto', 'minmax(0, 1fr)', 'auto', 'auto', 'auto', edgeToText(48)]\n    }\n  },\n  boxSizing: 'border-box',\n  maxHeight: '[inherit]',\n  maxWidth: 320,\n  overflow: 'auto',\n  padding: 8,\n  fontFamily: 'sans',\n  fontSize: 'control'\n});\n\nexport let section = style({\n  gridColumnStart: 1,\n  gridColumnEnd: -1,\n  alignItems: 'center',\n  display: 'grid',\n  gridTemplateAreas: [\n    '. checkmark icon label       value keyboard descriptor .',\n    '. .         .    description .     .        .          .'\n  ],\n  gridTemplateColumns: 'subgrid'\n});\n\nexport let sectionHeader = style<{size?: 'S' | 'M' | 'L' | 'XL'}>({\n  color: 'neutral',\n  gridColumnStart: 2,\n  gridColumnEnd: -2,\n  boxSizing: 'border-box',\n  minHeight: 'control',\n  paddingY: centerPadding()\n});\n\nexport let sectionHeading = style({\n  font: 'ui',\n  fontWeight: 'bold',\n  margin: 0\n});\n\nexport let menuitem = style({\n  ...focusRing(),\n  boxSizing: 'border-box',\n  borderRadius: 'control',\n  font: 'control',\n  '--labelPadding': {\n    type: 'paddingTop',\n    value: centerPadding()\n  },\n  paddingBottom: '--labelPadding',\n  backgroundColor: { // TODO: revisit color when I have access to dev mode again\n    default: {\n      default: 'transparent',\n      isFocused: baseColor('gray-100').isFocusVisible\n    }\n  },\n  color: {\n    default: 'neutral',\n    isDisabled: {\n      default: 'disabled',\n      forcedColors: 'GrayText'\n    }\n  },\n  position: 'relative',\n  // each menu item should take up the entire width, the subgrid will handle within the item\n  gridColumnStart: 1,\n  gridColumnEnd: -1,\n  display: 'grid',\n  gridTemplateAreas: [\n    '. checkmark icon label       value keyboard descriptor .',\n    '. .         .    description .     .        .          .'\n  ],\n  gridTemplateColumns: 'subgrid',\n  gridTemplateRows: {\n    // min-content prevents second row from 'auto'ing to a size larger then 0 when empty\n    default: 'auto minmax(0, min-content)',\n    ':has([slot=description])': 'auto auto'\n  },\n  rowGap: {\n    ':has([slot=description])': space(1)\n  },\n  alignItems: 'baseline',\n  minHeight: 'control',\n  textDecoration: 'none',\n  cursor: {\n    default: 'default',\n    isLink: 'pointer'\n  },\n  transition: 'default'\n}, getAllowedOverrides());\n\nexport let checkmark = style({\n  visibility: {\n    default: 'hidden',\n    isSelected: 'visible'\n  },\n  gridArea: 'checkmark',\n  color: 'accent',\n  '--iconPrimary': {\n    type: 'fill',\n    value: {\n      default: 'currentColor',\n      forcedColors: 'Highlight'\n    }\n  },\n  marginEnd: 'text-to-control',\n  aspectRatio: 'square'\n});\n\nlet checkbox = style({\n  gridArea: 'checkmark',\n  marginEnd: 'text-to-control'\n});\n\nexport let icon = style({\n  display: 'block',\n  size: fontRelative(20),\n  // too small default icon size is wrong, it's like the icons are 1 tshirt size bigger than the rest of the component? check again after typography changes\n  // reminder, size of WF is applied via font size\n  marginEnd: 'text-to-visual',\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  }\n});\n\nexport let iconCenterWrapper = style({\n  display: 'flex',\n  gridArea: 'icon'\n});\n\nlet image = style({\n  gridArea: 'icon',\n  gridRowEnd: 'span 2',\n  marginEnd: 'text-to-visual',\n  marginTop: fontRelative(6), // made up, need feedback\n  alignSelf: 'center',\n  borderRadius: 'sm',\n  size: {\n    default: 40,\n    size: {\n      S: 32,\n      M: 40,\n      L: 44,\n      XL: 48 // TODO: feedback, Why is it 50x50, that's on 12.25 so doesn't fit the grid at all\n    }\n  },\n  aspectRatio: 'square',\n  objectFit: 'contain'\n});\n\nexport let label = style<{size: string}>({\n  gridArea: 'label',\n  font: 'control',\n  color: '[inherit]',\n  fontWeight: 'medium',\n  // TODO: token values for padding not defined yet, revisit\n  marginTop: '--labelPadding'\n});\n\nexport let description = style({\n  gridArea: 'description',\n  font: {\n    default: 'ui-sm',\n    size: {\n      S: 'ui-xs',\n      M: 'ui-sm',\n      L: 'ui',\n      XL: 'ui-lg'\n    }\n  },\n  color: {\n    default: 'neutral-subdued',\n    // Ideally this would use the same token as hover, but we don't have access to that here.\n    // TODO: should we always consider isHovered and isFocused to be the same thing?\n    isFocused: 'gray-800',\n    isDisabled: 'disabled'\n  },\n  transition: 'default'\n});\n\nlet value = style({\n  gridArea: 'value',\n  marginStart: 8\n});\n\nlet keyboard = style({\n  gridArea: 'keyboard',\n  marginStart: 8,\n  font: 'ui',\n  fontWeight: 'light',\n  color: {\n    default: 'gray-600',\n    isDisabled: 'disabled',\n    forcedColors: {\n      isDisabled: 'GrayText'\n    }\n  },\n  background: 'gray-25',\n  unicodeBidi: 'plaintext'\n});\n\nlet descriptor = style({\n  gridArea: 'descriptor',\n  marginStart: 8,\n  '--iconPrimary': {\n    type: 'fill',\n    value: 'currentColor'\n  }\n});\n\nlet InternalMenuContext = createContext<{size: 'S' | 'M' | 'L' | 'XL', isSubmenu: boolean}>({size: 'M', isSubmenu: false});\nlet InternalMenuTriggerContext = createContext<Omit<MenuTriggerProps, 'children'>>({});\n\nfunction Menu<T extends object>(props: MenuProps<T>, ref: DOMRef<HTMLDivElement>) {\n  [props, ref] = useSpectrumContextProps(props, ref, MenuContext);\n  let {isSubmenu, size: ctxSize} = useContext(InternalMenuContext);\n  let {\n    children,\n    size = ctxSize,\n    UNSAFE_style,\n    UNSAFE_className,\n    styles\n  } = props;\n  let {align = 'start', direction = 'bottom', shouldFlip} = useContext(InternalMenuTriggerContext);\n\n  // TODO: change offset/crossoffset based on size? scale?\n  // actual values?\n  let initialPlacement: Placement;\n  switch (direction) {\n    case 'left':\n    case 'right':\n    case 'start':\n    case 'end':\n      initialPlacement = `${direction} ${align === 'end' ? 'bottom' : 'top'}` as Placement;\n      break;\n    case 'bottom':\n    case 'top':\n    default:\n      initialPlacement = `${direction} ${align}` as Placement;\n  }\n  if (isSubmenu) {\n    initialPlacement = 'end top' as Placement;\n  }\n\n  return (\n    <Popover\n      ref={ref}\n      hideArrow\n      placement={initialPlacement}\n      shouldFlip={shouldFlip}\n      // For submenus, the offset from the edge of the popover should be 10px.\n      // Subtract 8px for the padding around the parent menu.\n      offset={isSubmenu ? -2 : 8}\n      // Offset by padding + border so that the first item in a submenu lines up with the parent menu item.\n      crossOffset={isSubmenu ? -9 : 0}\n      UNSAFE_style={UNSAFE_style}\n      UNSAFE_className={UNSAFE_className}\n      styles={styles}>\n      <InternalMenuContext.Provider value={{size, isSubmenu: true}}>\n        <Provider\n          values={[\n            [HeaderContext, {styles: sectionHeader({size})}],\n            [HeadingContext, {styles: sectionHeading}],\n            [TextContext, {\n              slots: {\n                'description': {styles: description({size})}\n              }\n            }]\n          ]}>\n          <AriaMenu\n            {...props}\n            className={menu({size})}>\n            {children}\n          </AriaMenu>\n        </Provider>\n      </InternalMenuContext.Provider>\n    </Popover>\n  );\n}\n\n/**\n * Menus display a list of actions or options that a user can choose.\n */\nlet _Menu = /*#__PURE__*/ (forwardRef as forwardRefType)(Menu);\nexport {_Menu as Menu};\n\nexport function Divider(props: SeparatorProps) {\n  return (\n    <Separator\n      {...props}\n      className={mergeStyles(\n        divider({\n          size: 'M',\n          orientation: 'horizontal',\n          staticColor: undefined\n        }), style({\n          display: {\n            default: 'grid',\n            ':last-child': 'none'\n          },\n          gridColumnStart: 2,\n          gridColumnEnd: -2,\n          marginY: size(5) // height of the menu separator is 12px, and the divider is 2px\n        })\n      )} />\n  );\n}\n\nexport interface MenuSectionProps<T extends object> extends SectionProps<T> {}\nexport function MenuSection<T extends object>(props: MenuSectionProps<T>) {\n  // remember, context doesn't work if it's around Section nor inside\n  return (\n    <>\n      <AriaSection\n        {...props}\n        className={section}>\n        {props.children}\n      </AriaSection>\n      <Divider />\n    </>\n  );\n}\n\nexport interface MenuItemProps extends Omit<AriaMenuItemProps, 'children' | 'style' | 'className'>, StyleProps {\n  /**\n   * The contents of the item.\n   */\n  children: ReactNode\n}\n\nconst checkmarkIconSize = {\n  S: 'XS',\n  M: 'M',\n  L: 'L',\n  XL: 'XL'\n} as const;\n\nconst linkIconSize = {\n  S: 'M',\n  M: 'L',\n  L: 'XL',\n  XL: 'XL'\n} as const;\n\nexport function MenuItem(props: MenuItemProps) {\n  let ref = useRef(null);\n  let isLink = props.href != null;\n  let isLinkOut = isLink && props.target === '_blank';\n  let {size} = useContext(InternalMenuContext);\n  let textValue = props.textValue || (typeof props.children === 'string' ? props.children : undefined);\n  let {direction} = useLocale();\n  return (\n    <AriaMenuItem\n      {...props}\n      textValue={textValue}\n      ref={ref}\n      style={pressScale(ref, props.UNSAFE_style)}\n      className={renderProps => (props.UNSAFE_className || '') + menuitem({...renderProps, isFocused: (renderProps.hasSubmenu && renderProps.isOpen) || renderProps.isFocused, size, isLink}, props.styles)}>\n      {(renderProps) => {\n        let {children} = props;\n        let checkboxRenderProps = {...renderProps, size, isFocused: false, isFocusVisible: false, isIndeterminate: false, isReadOnly: false, isInvalid: false, isRequired: false};\n        return (\n          <>\n            <Provider\n              values={[\n                [IconContext, {\n                  slots: {\n                    icon: {render: centerBaseline({slot: 'icon', styles: iconCenterWrapper}), styles: icon},\n                    descriptor: {render: centerBaseline({slot: 'descriptor', styles: descriptor})} // TODO: remove once we have default?\n                  }\n                }],\n                [TextContext, {\n                  slots: {\n                    label: {styles: label({size})},\n                    description: {styles: description({...renderProps, size})},\n                    value: {styles: value}\n                  }\n                }],\n                [KeyboardContext, {styles: keyboard({size, isDisabled: renderProps.isDisabled})}],\n                [ImageContext, {styles: image({size})}]\n              ]}>\n              {renderProps.selectionMode === 'single' && !isLink && !renderProps.hasSubmenu && <CheckmarkIcon size={checkmarkIconSize[size]} className={checkmark({...renderProps, size})} />}\n              {renderProps.selectionMode === 'multiple' && !isLink && !renderProps.hasSubmenu && (\n                <div className={mergeStyles(checkbox, box(checkboxRenderProps))}>\n                  <CheckmarkIcon size={size} className={iconStyles} />\n                </div>\n              )}\n              {typeof children === 'string' ? <Text slot=\"label\">{children}</Text> : children}\n              {isLinkOut && <LinkOutIcon size={linkIconSize[size]} className={descriptor} />}\n              {renderProps.hasSubmenu && (\n                <div slot=\"descriptor\" className={descriptor}>\n                  <ChevronRightIcon\n                    size={size}\n                    className={style({\n                      scale: {\n                        direction: {\n                          rtl: -1\n                        }\n                      }\n                    })({direction})} />\n                </div>\n              )}\n            </Provider>\n          </>\n        );\n      }}\n    </AriaMenuItem>\n  );\n}\n\n/**\n * The MenuTrigger serves as a wrapper around a Menu and its associated trigger,\n * linking the Menu's open state with the trigger's press state.\n */\nfunction MenuTrigger(props: MenuTriggerProps) {\n  return (\n    <InternalMenuTriggerContext.Provider\n      value={{\n        align: props.align,\n        direction: props.direction,\n        shouldFlip: props.shouldFlip\n      }}>\n      <AriaMenuTrigger {...props}>\n        {/* RAC sets isPressed via PressResponder when the menu is open.\n            We don't want press scaling to appear to get \"stuck\", so override this. */}\n        <PressResponder isPressed={false}>\n          {props.children}\n        </PressResponder>\n      </AriaMenuTrigger>\n    </InternalMenuTriggerContext.Provider>\n  );\n}\n\nexport interface SubmenuTriggerProps extends Omit<AriaSubmenuTriggerProps, 'delay'> {}\n\nconst SubmenuTrigger = AriaSubmenuTrigger as (props: SubmenuTriggerProps) => JSX.Element | null;\n\nexport {MenuTrigger, SubmenuTrigger};\n\n// This is purely so that storybook generates the types for both Menu and MenuTrigger\ninterface ICombined<T extends object> extends MenuProps<T>, Omit<MenuTriggerProps, 'children'> {}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function CombinedMenu<T extends object>(props: ICombined<T>) {\n  return <div />;\n}\n","/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ContextValue, Separator as RACSeparator, SeparatorProps as RACSeparatorProps} from 'react-aria-components';\nimport {createContext, forwardRef} from 'react';\nimport {DOMRef, DOMRefValue} from '@react-types/shared';\nimport {getAllowedOverrides, StyleProps} from './style-utils' with {type: 'macro'};\nimport {style} from '../style' with {type: 'macro'};\nimport {useDOMRef} from '@react-spectrum/utils';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\n/*\n * Adding as it's own type to deal with size being a part of the theme so we\n * can type style() and it's parameters.\n */\ninterface DividerSpectrumProps {\n  /**\n   * How thick the Divider should be.\n   * @default 'M'\n   */\n  size?: 'S' | 'M' | 'L',\n  /**\n   * How thick the Divider should be.\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical',\n  /** The static color style to apply. Useful when the Divider appears over a color background. */\n  staticColor?: 'white' | 'black'\n}\n\n// TODO: allow overriding height (only when orientation is vertical)??\nexport interface DividerProps extends DividerSpectrumProps, Omit<RACSeparatorProps, 'className' | 'style' | 'elementType'>, StyleProps {}\n\nexport const DividerContext = createContext<ContextValue<DividerProps, DOMRefValue>>(null);\n\nexport const divider = style<DividerSpectrumProps>({\n  alignSelf: 'stretch',\n  backgroundColor: {\n    default: 'gray-200',\n    size: {\n      L: 'gray-800'\n    },\n    staticColor: {\n      white: {\n        default: 'transparent-white-200',\n        size: {\n          L: 'transparent-white-800'\n        }\n      },\n      black: {\n        default: 'transparent-black-200',\n        size: {\n          L: 'transparent-black-800'\n        }\n      }\n    },\n    forcedColors: 'ButtonBorder'\n  },\n  borderStyle: 'none',\n  borderRadius: 'full',\n  margin: 0,\n  height: {\n    orientation: {\n      horizontal: {\n        // These should be px not rems, because we're emulating a border.\n        default: '[2px]',\n        size: {\n          S: '[1px]',\n          L: '[4px]'\n        }\n      }\n    }\n  },\n  width: {\n    orientation: {\n      vertical: {\n        default: '[2px]',\n        size: {\n          S: '[1px]',\n          L: '[4px]'\n        }\n      }\n    }\n  }\n}, getAllowedOverrides());\n\nfunction Divider(props: DividerProps, ref: DOMRef) {\n  [props, ref] = useSpectrumContextProps(props, ref, DividerContext);\n  let domRef = useDOMRef(ref);\n\n  return (\n    <RACSeparator\n      {...props}\n      ref={domRef}\n      style={props.UNSAFE_style}\n      className={(props.UNSAFE_className || '') + divider({\n        size: props.size || 'M',\n        orientation: props.orientation || 'horizontal',\n        staticColor: props.staticColor\n      }, props.styles)} />\n  );\n}\n\n/**\n * Dividers bring clarity to a layout by grouping and dividing content in close proximity.\n * They can also be used to establish rhythm and hierarchy.\n */\nlet _Divider = /*#__PURE__*/ forwardRef(Divider);\nexport {_Divider as Divider};\n","import {ActionButton} from './ActionButton';\nimport {AriaLabelingProps, DOMProps, FocusableRef, FocusableRefValue} from '@react-types/shared';\nimport {ContentContext, FooterContext, HeadingContext} from './Content';\nimport {ContextValue, DEFAULT_SLOT, Provider, Dialog as RACDialog, TextContext} from 'react-aria-components';\nimport {createContext, forwardRef, ReactNode} from 'react';\nimport {dialogInner} from './Dialog';\nimport {DialogTrigger, DialogTriggerProps} from './DialogTrigger';\nimport {filterDOMProps, mergeProps, useLabels} from '@react-aria/utils';\nimport HelpIcon from '../s2wf-icons/S2_Icon_HelpCircle_20_N.svg';\nimport InfoIcon from '../s2wf-icons/S2_Icon_InfoCircle_20_N.svg';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {mergeStyles} from '../style/runtime';\nimport {Popover, PopoverProps} from './Popover';\nimport {style, size as styleSize} from '../style' with {type: 'macro'};\nimport {StyleProps} from './style-utils' with { type: 'macro' };\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useSpectrumContextProps} from './useSpectrumContextProps';\n\nexport interface ContextualHelpStyleProps {\n  /**\n   * Indicates whether contents are informative or provides helpful guidance.\n   *\n   * @default 'help'\n   */\n  variant?: 'info' | 'help'\n}\nexport interface ContextualHelpProps extends\n  Pick<DialogTriggerProps, 'isOpen' | 'defaultOpen' | 'onOpenChange' | 'shouldFlip' | 'offset' | 'crossOffset' | 'placement'>,\n  Pick<PopoverProps, 'containerPadding'>,\n  ContextualHelpStyleProps, StyleProps, DOMProps, AriaLabelingProps {\n  /** Contents of the Contextual Help popover. */\n  children?: ReactNode,\n  /**\n   * The size of the ActionButton.\n   *\n   * @default 'XS'\n   */\n  size?: 'XS' | 'S'\n}\n\nconst popover = style({\n  fontFamily: 'sans',\n  minWidth: '[218px]',\n  width: '[218px]',\n  padding: 24\n});\n\nexport const ContextualHelpContext = createContext<ContextValue<ContextualHelpProps, FocusableRefValue<HTMLButtonElement>>>(null);\n\nfunction ContextualHelp(props: ContextualHelpProps, ref: FocusableRef<HTMLButtonElement>) {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/s2');\n  [props, ref] = useSpectrumContextProps(props, ref, ContextualHelpContext);\n  let {\n    children,\n    defaultOpen,\n    // containerPadding = 24, // See popover() above. Issue noted in Popover.tsx.\n    size = 'XS',\n    crossOffset,\n    isOpen,\n    offset = 8,\n    onOpenChange,\n    placement = 'bottom start',\n    shouldFlip,\n    UNSAFE_className,\n    UNSAFE_style,\n    styles,\n    variant = 'help'\n  } = props;\n\n  // In a FieldLabel we're getting the context's aria-labeledby, so we need to\n  // manually set the aria-label after useLabels() to keep the order of label\n  // then ContextualHelp variant\n  let labelProps = useLabels(props);\n  let label = stringFormatter.format(`contextualhelp.${variant}`);\n  labelProps['aria-label'] = labelProps['aria-label'] ? labelProps['aria-label'] + ' ' + label : label;\n\n  let buttonProps = filterDOMProps(props, {labelable: true});\n\n  return (\n    <DialogTrigger\n      isOpen={isOpen}\n      defaultOpen={defaultOpen}\n      onOpenChange={onOpenChange}>\n      <ActionButton\n        slot={null}\n        ref={ref}\n        size={size}\n        {...mergeProps(buttonProps, labelProps)}\n        UNSAFE_style={UNSAFE_style}\n        UNSAFE_className={UNSAFE_className}\n        styles={styles}\n        isQuiet>\n        {variant === 'info' ? <InfoIcon /> : <HelpIcon />}\n      </ActionButton>\n      <Popover\n        placement={placement}\n        shouldFlip={shouldFlip}\n        // not working => containerPadding={containerPadding}\n        offset={offset}\n        crossOffset={crossOffset}\n        hideArrow\n        UNSAFE_className={popover}>\n        <RACDialog className={mergeStyles(dialogInner, style({borderRadius: 'none'}))}>\n          <Provider\n            values={[\n              [TextContext, {\n                slots: {\n                  [DEFAULT_SLOT]: {}\n                }\n              }],\n              [HeadingContext, {styles: style({\n                font: 'heading-xs',\n                margin: 0,\n                marginBottom: styleSize(8) // This only makes it 10px on mobile and should be 12px\n              })}],\n              [ContentContext, {styles: style({\n                font: 'body-sm'\n              })}],\n              [FooterContext, {styles: style({\n                font: 'body-sm',\n                marginTop: 16\n              })}]\n            ]}>\n            {children}\n          </Provider>\n        </RACDialog>\n      </Popover>\n    </DialogTrigger>\n  );\n}\n\n/**\n * Contextual help shows a user extra information about the state of an adjacent component, or a total view.\n */\nlet _ContextualHelp = forwardRef(ContextualHelp);\nexport {_ContextualHelp as ContextualHelp};\n","html {\n  --lightningcss-light: initial;\n  --lightningcss-dark: ;\n  color-scheme: light dark;\n  --s2-container-bg: var(--lightningcss-light, #fff) var(--lightningcss-dark, #111);\n  background: var(--s2-container-bg);\n}\n\n@media (prefers-color-scheme: dark) {\n  html {\n    --lightningcss-light: ;\n    --lightningcss-dark: initial;\n  }\n}\n\nhtml[data-color-scheme=\"light\"] {\n  --lightningcss-light: initial;\n  --lightningcss-dark: ;\n  color-scheme: light;\n}\n\nhtml[data-color-scheme=\"dark\"] {\n  --lightningcss-light: ;\n  --lightningcss-dark: initial;\n  color-scheme: dark;\n}\n\nhtml[data-background=\"layer-1\"] {\n  --s2-container-bg: var(--lightningcss-light, #f8f8f8) var(--lightningcss-dark, #1b1b1b);\n}\n\nhtml[data-background=\"layer-2\"] {\n  --s2-container-bg: var(--lightningcss-light, #fff) var(--lightningcss-dark, #222);\n}\n/*# sourceMappingURL=page.css.map */\n","html, body {\n    margin: 0;\n}\n"],"names":[],"version":3,"file":"index.4a11418c.css.map"}